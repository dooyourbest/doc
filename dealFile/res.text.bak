[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
False
False
False
False
False
False
False
False
False
False
False
False
[{'className': 'Welcome', 'params': '', 'extends': 'CI_Controller', 'comments': "/**\n* Index Page for this controller.\n*\n* Maps to the following URL\n* \t\thttp://example.com/index.php/welcome\n*\t- or -\n* \t\thttp://example.com/index.php/welcome/index\n*\t- or -\n* Since this controller is set as the default controller in\n* config/routes.php, it's displayed at http://example.com/\n*\n* So any other public methods not prefixed with an underscore will\n* map to /index.php/welcome/<method_name>\n* @see https://codeigniter.com/user_guide/general/urls.html\n*/", 'function_name': 'index'}]
False
False
False
False
False
False
False
False
False
False
False
False
[{'className': 'CI_Benchmark', 'params': '$name', 'extends': '', 'comments': '/**\n* Set a benchmark marker\n*\n* Multiple calls to this function can be made so that several\n* execution points can be timed.\n*\n* @param\tstring\t$name\tMarker name\n* @return\tvoid\n*/', 'function_name': 'mark'}, {'className': 'CI_Benchmark', 'params': "$point1 = '', $point2 = '', $decimals = 4", 'extends': '', 'comments': "/**\n* Elapsed time\n*\n* Calculates the time difference between two marked points.\n*\n* If the first parameter is empty this function instead returns the\n* {elapsed_time} pseudo-variable. This permits the full system\n* execution time to be shown in a template. The output class will\n* swap the real value for this variable.\n*\n* @param\tstring\t$point1\t\tA particular marked point\n* @param\tstring\t$point2\t\tA particular marked point\n* @param\tint\t$decimals\tNumber of decimal places\n*\n* @return\tstring\tCalculated elapsed time on success,\n*\t\t\tan '{elapsed_string}' if $point1 is empty\n*\t\t\tor an empty string if $point1 is not found.\n*/", 'function_name': 'elapsed_time'}, {'className': 'CI_Benchmark', 'params': '', 'extends': '', 'comments': "/**\n* Memory Usage\n*\n* Simply returns the {memory_usage} marker.\n*\n* This permits it to be put it anywhere in a template\n* without the memory being calculated until the end.\n* The output class will swap the real value for this variable.\n*\n* @return\tstring\t'{memory_usage}'\n*/", 'function_name': 'memory_usage'}]
[{'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Reference to the CI_Controller method.\n*\n* Returns current CI instance object\n*\n* @return CI_Controller\n*/', 'function_name': '&get_instance'}]
[{'className': '', 'params': '$version', 'extends': '', 'comments': '/**\n* Determines if the current version of PHP is equal to or greater than the supplied value\n*\n* @param\tstring\n* @return\tbool\tTRUE if the current version is $version or higher\n*/', 'function_name': 'is_php'}, {'className': '', 'params': '$file', 'extends': '', 'comments': "/**\n* Tests for file writability\n*\n* is_writable() returns TRUE on Windows servers when you really can't write to\n* the file, based on the read-only attribute.\n*\n* @link\thttps://bugs.php.net/bug.php?id=54709\n* @param\tstring\n* @return\tbool\n*/", 'function_name': 'is_really_writable'}, {'className': '', 'params': "$class, $directory = 'libraries', $param = NULL", 'extends': '', 'comments': '/**\n* Class registry\n*\n* This function acts as a singleton. If the requested class does not\n* exist it is instantiated and set to a static variable. If it has\n* previously been instantiated the variable is returned.\n*\n* @param\tstring\tthe class name being requested\n* @param\tstring\tthe directory where the class should be found\n* @param\tmixed\tan optional argument to pass to the class constructor\n* @return\tobject\n*/', 'function_name': '&load_class'}, {'className': '', 'params': "$class = ''", 'extends': '', 'comments': '/**\n* Keeps track of which libraries have been loaded. This function is\n* called by the load_class() function above\n*\n* @param\tstring\n* @return\tarray\n*/', 'function_name': '&is_loaded'}, {'className': '', 'params': 'Array $replace = array()', 'extends': '', 'comments': "/**\n* Loads the main config.php file\n*\n* This function lets us grab the config file even if the Config class\n* hasn't been instantiated yet\n*\n* @param\tarray\n* @return\tarray\n*/", 'function_name': '&get_config(Array $replace = array'}, {'className': '', 'params': '$item', 'extends': '', 'comments': '/**\n* Returns the specified config item\n*\n* @param\tstring\n* @return\tmixed\n*/', 'function_name': 'config_item'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Returns the MIME types array from config/mimes.php\n*\n* @return\tarray\n*/', 'function_name': '&get_mimes'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Is HTTPS?\n*\n* Determines if the application is accessed via an encrypted\n* (HTTPS) connection.\n*\n* @return\tbool\n*/', 'function_name': 'is_https'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Is CLI?\n*\n* Test to see if a request was made from the command line.\n*\n* @return \tbool\n*/', 'function_name': 'is_cli'}, {'className': '', 'params': "$message, $status_code = 500, $heading = 'An Error Was Encountered'", 'extends': '', 'comments': '/**\n* Error Handler\n*\n* This function lets us invoke the exception class and\n* display errors using the standard error template located\n* in application/views/errors/error_general.php\n* This function will send the error page directly to the\n* browser and exit.\n*\n* @param\tstring\n* @param\tint\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'show_error'}, {'className': '', 'params': "$page = '', $log_error = TRUE", 'extends': '', 'comments': '/**\n* 404 Page Handler\n*\n* This function is similar to the show_error() function above\n* However, instead of the standard error template it displays\n* 404 errors.\n*\n* @param\tstring\n* @param\tbool\n* @return\tvoid\n*/', 'function_name': 'show_404'}, {'className': '', 'params': '$level, $message', 'extends': '', 'comments': "/**\n* Error Logging Interface\n*\n* We use this as a simple mechanism to access the logging\n* class and send messages to be logged.\n*\n* @param\tstring\tthe error level: 'error', 'debug' or 'info'\n* @param\tstring\tthe error message\n* @return\tvoid\n*/", 'function_name': 'log_message'}, {'className': '', 'params': "$code = 200, $text = ''", 'extends': '', 'comments': '/**\n* Set HTTP Status Header\n*\n* @param\tint\tthe status code\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'set_status_header'}, {'className': '', 'params': '$severity, $message, $filepath, $line', 'extends': '', 'comments': '/**\n* Error Handler\n*\n* This is the custom error handler that is declared at the (relative)\n* top of CodeIgniter.php. The main reason we use this is to permit\n* PHP errors to be logged in our own log files since the user may\n* not have access to server logs. Since this function effectively\n* intercepts PHP errors, however, we also need to display errors\n* based on the current error_reporting level.\n* We do that with the use of a PHP error template.\n*\n* @param\tint\t$severity\n* @param\tstring\t$message\n* @param\tstring\t$filepath\n* @param\tint\t$line\n* @return\tvoid\n*/', 'function_name': '_error_handler'}, {'className': '', 'params': '$exception', 'extends': '', 'comments': "/**\n* Exception Handler\n*\n* Sends uncaught exceptions to the logger and displays them\n* only if display_errors is On so that they don't show up in\n* production environments.\n*\n* @param\tException\t$exception\n* @return\tvoid\n*/", 'function_name': '_exception_handler'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Shutdown Handler\n*\n* This is the shutdown handler that is declared at the top\n* of CodeIgniter.php. The main reason we use this is to simulate\n* a complete custom exception handler.\n*\n* E_STRICT is purposively neglected because such events may have\n* been caught. Duplication or none? None is preferred for now.\n*\n* @link\thttp://insomanic.me.uk/post/229851073/php-trick-catching-fatal-errors-e-error-with-a\n* @return\tvoid\n*/', 'function_name': '_shutdown_handler'}, {'className': '', 'params': '$str, $url_encoded = TRUE', 'extends': '', 'comments': '/**\n* Remove Invisible Characters\n*\n* This prevents sandwiching null characters\n* between ascii characters, like Java\\0script.\n*\n* @param\tstring\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'remove_invisible_characters'}, {'className': '', 'params': '$var, $double_encode = TRUE', 'extends': '', 'comments': '/**\n* Returns HTML escaped variable.\n*\n* @param\tmixed\t$var\t\tThe input string or array of strings to be escaped.\n* @param\tbool\t$double_encode\t$double_encode set to FALSE prevents escaping twice.\n* @return\tmixed\t\t\tThe escaped string or array of strings as a result.\n*/', 'function_name': 'html_escape'}, {'className': '', 'params': '$attributes, $js = FALSE', 'extends': '', 'comments': '/**\n* Stringify attributes for use in HTML tags.\n*\n* Helper function used to convert a string, array, or object\n* of attributes to a string.\n*\n* @param\tmixed\tstring, array, object\n* @param\tbool\n* @return\tstring\n*/', 'function_name': '_stringify_attributes'}, {'className': '', 'params': '$function_name', 'extends': '', 'comments': '/**\n* Function usable\n*\n* Executes a function_exists() check, and if the Suhosin PHP\n* extension is loaded - checks whether the function that is\n* checked might be disabled in there as well.\n*\n* This is useful as function_exists() will return FALSE for\n* functions disabled via the *disable_functions* php.ini\n* setting, but not for *suhosin.executor.func.blacklist* and\n* *suhosin.executor.disable_eval*. These settings will just\n* terminate script execution if a disabled function is executed.\n*\n* The above described behavior turned out to be a bug in Suhosin,\n* but even though a fix was committed for 0.9.34 on 2012-02-12,\n* that version is yet to be released. This function will therefore\n* be just temporary, but would probably be kept for a few years.\n*\n* @link\thttp://www.hardened-php.net/suhosin/\n* @param\tstring\t$function_name\tFunction to check for\n* @return\tbool\tTRUE if the function exists and is safe to call,\n*\t\t\tFALSE otherwise.\n*/', 'function_name': 'function_usable'}]
[{'className': '', 'params': '$known_string, $user_string', 'extends': '', 'comments': '/**\n* hash_equals()\n*\n* @link\thttp://php.net/hash_equals\n* @param\tstring\t$known_string\n* @param\tstring\t$user_string\n* @return\tbool\n*/', 'function_name': 'hash_equals'}, {'className': '', 'params': '$algo, $password, $salt, $iterations, $length = 0, $raw_output = FALSE', 'extends': '', 'comments': '/**\n* hash_pbkdf2()\n*\n* @link\thttp://php.net/hash_pbkdf2\n* @param\tstring\t$algo\n* @param\tstring\t$password\n* @param\tstring\t$salt\n* @param\tint\t$iterations\n* @param\tint\t$length\n* @param\tbool\t$raw_output\n* @return\tstring\n*/', 'function_name': 'hash_pbkdf2'}]
[{'className': '', 'params': '$str, $encoding = NULL', 'extends': '', 'comments': '/**\n* mb_strlen()\n*\n* WARNING: This function WILL fall-back to strlen()\n* if iconv is not available!\n*\n* @link\thttp://php.net/mb_strlen\n* @param\tstring\t$str\n* @param\tstring\t$encoding\n* @return\tint\n*/', 'function_name': 'mb_strlen'}, {'className': '', 'params': '$haystack, $needle, $offset = 0, $encoding = NULL', 'extends': '', 'comments': '/**\n* mb_strpos()\n*\n* WARNING: This function WILL fall-back to strpos()\n* if iconv is not available!\n*\n* @link\thttp://php.net/mb_strpos\n* @param\tstring\t$haystack\n* @param\tstring\t$needle\n* @param\tint\t$offset\n* @param\tstring\t$encoding\n* @return\tmixed\n*/', 'function_name': 'mb_strpos'}, {'className': '', 'params': '$str, $start, $length = NULL, $encoding = NULL', 'extends': '', 'comments': '/**\n* mb_substr()\n*\n* WARNING: This function WILL fall-back to substr()\n* if iconv is not available.\n*\n* @link\thttp://php.net/mb_substr\n* @param\tstring\t$str\n* @param\tint\t$start\n* @param\tint \t$length\n* @param\tstring\t$encoding\n* @return\tstring\n*/', 'function_name': 'mb_substr'}]
[{'className': '', 'params': '$hash', 'extends': '', 'comments': '/**\n* password_get_info()\n*\n* @link\thttp://php.net/password_get_info\n* @param\tstring\t$hash\n* @return\tarray\n*/', 'function_name': 'password_get_info'}, {'className': '', 'params': '$password, $algo, array $options = array()', 'extends': '', 'comments': '/**\n* password_hash()\n*\n* @link\thttp://php.net/password_hash\n* @param\tstring\t$password\n* @param\tint\t$algo\n* @param\tarray\t$options\n* @return\tmixed\n*/', 'function_name': 'password_hash($password, $algo, array $options = array'}, {'className': '', 'params': '$hash, $algo, array $options = array()', 'extends': '', 'comments': '/**\n* password_needs_rehash()\n*\n* @link\thttp://php.net/password_needs_rehash\n* @param\tstring\t$hash\n* @param\tint\t$algo\n* @param\tarray\t$options\n* @return\tbool\n*/', 'function_name': 'password_needs_rehash($hash, $algo, array $options = array'}, {'className': '', 'params': '$password, $hash', 'extends': '', 'comments': '/**\n* password_verify()\n*\n* @link\thttp://php.net/password_verify\n* @param\tstring\t$password\n* @param\tstring\t$hash\n* @return\tbool\n*/', 'function_name': 'password_verify'}]
[{'className': '', 'params': 'array $array, $column_key, $index_key = NULL', 'extends': '', 'comments': '/**\n* array_column()\n*\n* @link\thttp://php.net/array_column\n* @param\tarray\t$array\n* @param\tmixed\t$column_key\n* @param\tmixed\t$index_key\n* @return\tarray\n*/', 'function_name': 'array_column'}]
[{'className': 'CI_Config', 'params': '', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* Sets the $config data from the primary config.php file as a class variable.\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Config', 'params': "$file = '', $use_sections = FALSE, $fail_gracefully = FALSE", 'extends': '', 'comments': '/**\n* Load Config File\n*\n* @param\tstring\t$file\t\t\tConfiguration file name\n* @param\tbool\t$use_sections\t\tWhether configuration values should be loaded into their own section\n* @param\tbool\t$fail_gracefully\tWhether to just return FALSE or display an error message\n* @return\tbool\tTRUE if the file was loaded correctly or FALSE on failure\n*/', 'function_name': 'load'}, {'className': 'CI_Config', 'params': "$item, $index = ''", 'extends': '', 'comments': "/**\n* Fetch a config file item\n*\n* @param\tstring\t$item\tConfig item name\n* @param\tstring\t$index\tIndex name\n* @return\tstring|null\tThe configuration item or NULL if the item doesn't exist\n*/", 'function_name': 'item'}, {'className': 'CI_Config', 'params': '$item', 'extends': '', 'comments': "/**\n* Fetch a config file item with slash appended (if not empty)\n*\n* @param\tstring\t\t$item\tConfig item name\n* @return\tstring|null\tThe configuration item or NULL if the item doesn't exist\n*/", 'function_name': 'slash_item'}, {'className': 'CI_Config', 'params': "$uri = '', $protocol = NULL", 'extends': '', 'comments': '/**\n* Site URL\n*\n* Returns base_url . index_page [. uri_string]\n*\n* @uses\tCI_Config::_uri_string()\n*\n* @param\tstring|string[]\t$uri\tURI string or an array of segments\n* @param\tstring\t$protocol\n* @return\tstring\n*/', 'function_name': 'site_url'}, {'className': 'CI_Config', 'params': "$uri = '', $protocol = NULL", 'extends': '', 'comments': '/**\n* Base URL\n*\n* Returns base_url [. uri_string]\n*\n* @uses\tCI_Config::_uri_string()\n*\n* @param\tstring|string[]\t$uri\tURI string or an array of segments\n* @param\tstring\t$protocol\n* @return\tstring\n*/', 'function_name': 'base_url'}, {'className': 'CI_Config', 'params': '$item, $value', 'extends': '', 'comments': '/**\n* Set a config file item\n*\n* @param\tstring\t$item\tConfig item key\n* @param\tstring\t$value\tConfig item value\n* @return\tvoid\n*/', 'function_name': 'set_item'}]
[{'className': 'CI_Controller', 'params': '', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}]
[{'className': 'CI_Exceptions', 'params': '', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Exceptions', 'params': '$severity, $message, $filepath, $line', 'extends': '', 'comments': '/**\n* Exception Logger\n*\n* Logs PHP generated error messages\n*\n* @param\tint\t$severity\tLog level\n* @param\tstring\t$message\tError message\n* @param\tstring\t$filepath\tFile path\n* @param\tint\t$line\t\tLine number\n* @return\tvoid\n*/', 'function_name': 'log_exception'}, {'className': 'CI_Exceptions', 'params': "$page = '', $log_error = TRUE", 'extends': '', 'comments': '/**\n* 404 Error Handler\n*\n* @uses\tCI_Exceptions::show_error()\n*\n* @param\tstring\t$page\t\tPage URI\n* @param \tbool\t$log_error\tWhether to log the error\n* @return\tvoid\n*/', 'function_name': 'show_404'}, {'className': 'CI_Exceptions', 'params': "$heading, $message, $template = 'error_general', $status_code = 500", 'extends': '', 'comments': '/**\n* General Error Page\n*\n* Takes an error message as input (either as a string or an array)\n* and displays it using the specified template.\n*\n* @param\tstring\t\t$heading\tPage heading\n* @param\tstring|string[]\t$message\tError message\n* @param\tstring\t\t$template\tTemplate name\n* @param \tint\t\t$status_code\t(default: 500)\n*\n* @return\tstring\tError page output\n*/', 'function_name': 'show_error'}, {'className': 'CI_Exceptions', 'params': '$exception', 'extends': '', 'comments': '', 'function_name': 'show_exception'}, {'className': 'CI_Exceptions', 'params': '$severity, $message, $filepath, $line', 'extends': '', 'comments': '/**\n* Native PHP error handler\n*\n* @param\tint\t$severity\tError level\n* @param\tstring\t$message\tError message\n* @param\tstring\t$filepath\tFile path\n* @param\tint\t$line\t\tLine number\n* @return\tvoid\n*/', 'function_name': 'show_php_error'}]
[{'className': 'CI_Hooks', 'params': 'CI_Config $config', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @param\tCI_Config\t$config\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Hooks', 'params': "$which = ''", 'extends': '', 'comments': '/**\n* Call Hook\n*\n* Calls a particular hook. Called by CodeIgniter.php.\n*\n* @uses\tCI_Hooks::_run_hook()\n*\n* @param\tstring\t$which\tHook name\n* @return\tbool\tTRUE on success or FALSE on failure\n*/', 'function_name': 'call_hook'}]
[{'className': 'CI_Input', 'params': 'CI_Security &$security', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* Determines whether to globally enable the XSS processing\n* and whether to allow the $_GET array.\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Input', 'params': '$index = NULL, $xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Fetch an item from the GET array\n*\n* @param\tmixed\t$index\t\tIndex for item to be fetched from $_GET\n* @param\tbool\t$xss_clean\tWhether to apply XSS filtering\n* @return\tmixed\n*/', 'function_name': 'get'}, {'className': 'CI_Input', 'params': '$index = NULL, $xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Fetch an item from the POST array\n*\n* @param\tmixed\t$index\t\tIndex for item to be fetched from $_POST\n* @param\tbool\t$xss_clean\tWhether to apply XSS filtering\n* @return\tmixed\n*/', 'function_name': 'post'}, {'className': 'CI_Input', 'params': '$index, $xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Fetch an item from POST data with fallback to GET\n*\n* @param\tstring\t$index\t\tIndex for item to be fetched from $_POST or $_GET\n* @param\tbool\t$xss_clean\tWhether to apply XSS filtering\n* @return\tmixed\n*/', 'function_name': 'post_get'}, {'className': 'CI_Input', 'params': '$index, $xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Fetch an item from GET data with fallback to POST\n*\n* @param\tstring\t$index\t\tIndex for item to be fetched from $_GET or $_POST\n* @param\tbool\t$xss_clean\tWhether to apply XSS filtering\n* @return\tmixed\n*/', 'function_name': 'get_post'}, {'className': 'CI_Input', 'params': '$index = NULL, $xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Fetch an item from the COOKIE array\n*\n* @param\tmixed\t$index\t\tIndex for item to be fetched from $_COOKIE\n* @param\tbool\t$xss_clean\tWhether to apply XSS filtering\n* @return\tmixed\n*/', 'function_name': 'cookie'}, {'className': 'CI_Input', 'params': '$index, $xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Fetch an item from the SERVER array\n*\n* @param\tmixed\t$index\t\tIndex for item to be fetched from $_SERVER\n* @param\tbool\t$xss_clean\tWhether to apply XSS filtering\n* @return\tmixed\n*/', 'function_name': 'server'}, {'className': 'CI_Input', 'params': '$index = NULL, $xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Fetch an item from the php://input stream\n*\n* Useful when you need to access PUT, DELETE or PATCH request data.\n*\n* @param\tstring\t$index\t\tIndex for item to be fetched\n* @param\tbool\t$xss_clean\tWhether to apply XSS filtering\n* @return\tmixed\n*/', 'function_name': 'input_stream'}, {'className': 'CI_Input', 'params': "$name, $value = '', $expire = 0, $domain = '', $path = '/', $prefix = '', $secure = NULL, $httponly = NULL", 'extends': '', 'comments': "/**\n* Set cookie\n*\n* Accepts an arbitrary number of parameters (up to 7) or an associative\n* array in the first parameter containing all the values.\n*\n* @param\tstring|mixed[]\t$name\t\tCookie name or an array containing parameters\n* @param\tstring\t\t$value\t\tCookie value\n* @param\tint\t\t$expire\t\tCookie expiration time in seconds\n* @param\tstring\t\t$domain\t\tCookie domain (e.g.: '.yourdomain.com')\n* @param\tstring\t\t$path\t\tCookie path (default: '/')\n* @param\tstring\t\t$prefix\t\tCookie name prefix\n* @param\tbool\t\t$secure\t\tWhether to only transfer cookies via SSL\n* @param\tbool\t\t$httponly\tWhether to only makes the cookie accessible via HTTP (no javascript)\n* @return\tvoid\n*/", 'function_name': 'set_cookie'}, {'className': 'CI_Input', 'params': '', 'extends': '', 'comments': "/**\n* Fetch the IP Address\n*\n* Determines and validates the visitor's IP address.\n*\n* @return\tstring\tIP address\n*/", 'function_name': 'ip_address'}, {'className': 'CI_Input', 'params': "$ip, $which = ''", 'extends': '', 'comments': "/**\n* Validate IP Address\n*\n* @param\tstring\t$ip\tIP address\n* @param\tstring\t$which\tIP protocol: 'ipv4' or 'ipv6'\n* @return\tbool\n*/", 'function_name': 'valid_ip'}, {'className': 'CI_Input', 'params': '$xss_clean = FALSE', 'extends': '', 'comments': "/**\n* Fetch User Agent string\n*\n* @return\tstring|null\tUser Agent string or NULL if it doesn't exist\n*/", 'function_name': 'user_agent'}, {'className': 'CI_Input', 'params': '$xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Request Headers\n*\n* @param\tbool\t$xss_clean\tWhether to apply XSS filtering\n* @return\tarray\n*/', 'function_name': 'request_headers'}, {'className': 'CI_Input', 'params': '$index, $xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Get Request Header\n*\n* Returns the value of a single member of the headers class member\n*\n* @param\tstring\t\t$index\t\tHeader name\n* @param\tbool\t\t$xss_clean\tWhether to apply XSS filtering\n* @return\tstring|null\tThe requested header on success or NULL on failure\n*/', 'function_name': 'get_request_header'}, {'className': 'CI_Input', 'params': '', 'extends': '', 'comments': '/**\n* Is AJAX request?\n*\n* Test to see if a request contains the HTTP_X_REQUESTED_WITH header.\n*\n* @return \tbool\n*/', 'function_name': 'is_ajax_request'}, {'className': 'CI_Input', 'params': '$upper = FALSE', 'extends': '', 'comments': '/**\n* Get Request Method\n*\n* Return the request method\n*\n* @param\tbool\t$upper\tWhether to return in upper or lower case\n*\t\t\t\t(default: FALSE)\n* @return \tstring\n*/', 'function_name': 'method'}, {'className': 'CI_Input', 'params': '$name', 'extends': '', 'comments': '/**\n* Magic __get()\n*\n* Allows read access to protected properties\n*\n* @param\tstring\t$name\n* @return\tmixed\n*/', 'function_name': '__get'}]
[{'className': 'CI_Lang', 'params': '', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Lang', 'params': "$langfile, $idiom = '', $return = FALSE, $add_suffix = TRUE, $alt_path = ''", 'extends': '', 'comments': '/**\n* Load a language file\n*\n* @param\tmixed\t$langfile\tLanguage file name\n* @param\tstring\t$idiom\t\tLanguage name (english, etc.)\n* @param\tbool\t$return\t\tWhether to return the loaded array of translations\n* @param \tbool\t$add_suffix\tWhether to add suffix to $langfile\n* @param \tstring\t$alt_path\tAlternative path to look for the language file\n*\n* @return\tvoid|string[]\tArray containing translations, if $return is set to TRUE\n*/', 'function_name': 'load'}, {'className': 'CI_Lang', 'params': '$line, $log_errors = TRUE', 'extends': '', 'comments': '/**\n* Language line\n*\n* Fetches a single line of text from the language array\n*\n* @param\tstring\t$line\t\tLanguage line key\n* @param\tbool\t$log_errors\tWhether to log an error message if the line is not found\n* @return\tstring\tTranslation\n*/', 'function_name': 'line'}]
[{'className': 'CI_Loader', 'params': '', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* Sets component load paths, gets the initial output buffering level.\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Loader', 'params': '', 'extends': '', 'comments': '/**\n* Initializer\n*\n* @todo\tFigure out a way to move this to the constructor\n*\t\twithout breaking *package_path*() methods.\n* @uses\tCI_Loader::_ci_autoloader()\n* @used-by\tCI_Controller::__construct()\n* @return\tvoid\n*/', 'function_name': 'initialize'}, {'className': 'CI_Loader', 'params': '$class', 'extends': '', 'comments': '/**\n* Is Loaded\n*\n* A utility method to test if a class is in the self::$_ci_classes array.\n*\n* @used-by\tMainly used by Form Helper function _get_validation_object().\n*\n* @param \tstring\t\t$class\tClass name to check for\n* @return \tstring|bool\tClass object name if loaded or FALSE\n*/', 'function_name': 'is_loaded'}, {'className': 'CI_Loader', 'params': '$library, $params = NULL, $object_name = NULL', 'extends': '', 'comments': '/**\n* Library Loader\n*\n* Loads and instantiates libraries.\n* Designed to be called from application controllers.\n*\n* @param\tmixed\t$library\tLibrary name\n* @param\tarray\t$params\t\tOptional parameters to pass to the library class constructor\n* @param\tstring\t$object_name\tAn optional object name to assign to\n* @return\tobject\n*/', 'function_name': 'library'}, {'className': 'CI_Loader', 'params': "$model, $name = '', $db_conn = FALSE", 'extends': '', 'comments': '/**\n* Model Loader\n*\n* Loads and instantiates models.\n*\n* @param\tmixed\t$model\t\tModel name\n* @param\tstring\t$name\t\tAn optional object name to assign to\n* @param\tbool\t$db_conn\tAn optional database connection configuration to initialize\n* @return\tobject\n*/', 'function_name': 'model'}, {'className': 'CI_Loader', 'params': "$params = '', $return = FALSE, $query_builder = NULL", 'extends': '', 'comments': '/**\n* Database Loader\n*\n* @param\tmixed\t$params\t\tDatabase configuration options\n* @param\tbool\t$return \tWhether to return the database object\n* @param\tbool\t$query_builder\tWhether to enable Query Builder\n*\t\t\t\t\t(overrides the configuration setting)\n*\n* @return\tobject|bool\tDatabase object if $return is set to TRUE,\n*\t\t\t\t\tFALSE on failure, CI_Loader instance in any other case\n*/', 'function_name': 'database'}, {'className': 'CI_Loader', 'params': '$db = NULL, $return = FALSE', 'extends': '', 'comments': '/**\n* Load the Database Utilities Class\n*\n* @param\tobject\t$db\tDatabase object\n* @param\tbool\t$return\tWhether to return the DB Utilities class object or not\n* @return\tobject\n*/', 'function_name': 'dbutil'}, {'className': 'CI_Loader', 'params': '$db = NULL, $return = FALSE', 'extends': '', 'comments': '/**\n* Load the Database Forge Class\n*\n* @param\tobject\t$db\tDatabase object\n* @param\tbool\t$return\tWhether to return the DB Forge class object or not\n* @return\tobject\n*/', 'function_name': 'dbforge'}, {'className': 'CI_Loader', 'params': '$view, $vars = array(), $return = FALSE', 'extends': '', 'comments': '/**\n* View Loader\n*\n* Loads "view" files.\n*\n* @param\tstring\t$view\tView name\n* @param\tarray\t$vars\tAn associative array of data\n*\t\t\t\tto be extracted for use in the view\n* @param\tbool\t$return\tWhether to return the view output\n*\t\t\t\tor leave it to the Output class\n* @return\tobject|string\n*/', 'function_name': 'view($view, $vars = array'}, {'className': 'CI_Loader', 'params': '$path, $return = FALSE', 'extends': '', 'comments': '/**\n* Generic File Loader\n*\n* @param\tstring\t$path\tFile path\n* @param\tbool\t$return\tWhether to return the file output\n* @return\tobject|string\n*/', 'function_name': 'file'}, {'className': 'CI_Loader', 'params': "$vars, $val = ''", 'extends': '', 'comments': '/**\n* Set Variables\n*\n* Once variables are set they become available within\n* the controller class and its "view" files.\n*\n* @param\tarray|object|string\t$vars\n*\t\t\t\t\tAn associative array or object containing values\n*\t\t\t\t\tto be set, or a value\'s name if string\n* @param \tstring\t$val\tValue to set, only used if $vars is a string\n* @return\tobject\n*/', 'function_name': 'vars'}, {'className': 'CI_Loader', 'params': '', 'extends': '', 'comments': '/**\n* Clear Cached Variables\n*\n* Clears the cached variables.\n*\n* @return\tCI_Loader\n*/', 'function_name': 'clear_vars'}, {'className': 'CI_Loader', 'params': '$key', 'extends': '', 'comments': '/**\n* Get Variable\n*\n* Check if a variable is set and retrieve it.\n*\n* @param\tstring\t$key\tVariable name\n* @return\tmixed\tThe variable or NULL if not found\n*/', 'function_name': 'get_var'}, {'className': 'CI_Loader', 'params': '', 'extends': '', 'comments': '/**\n* Get Variables\n*\n* Retrieves all loaded variables.\n*\n* @return\tarray\n*/', 'function_name': 'get_vars'}, {'className': 'CI_Loader', 'params': '$helpers = array()', 'extends': '', 'comments': '/**\n* Helper Loader\n*\n* @param\tstring|string[]\t$helpers\tHelper name(s)\n* @return\tobject\n*/', 'function_name': 'helper($helpers = array'}, {'className': 'CI_Loader', 'params': '$helpers = array()', 'extends': '', 'comments': '/**\n* Load Helpers\n*\n* An alias for the helper() method in case the developer has\n* written the plural form of it.\n*\n* @uses\tCI_Loader::helper()\n* @param\tstring|string[]\t$helpers\tHelper name(s)\n* @return\tobject\n*/', 'function_name': 'helpers($helpers = array'}, {'className': 'CI_Loader', 'params': "$files, $lang = ''", 'extends': '', 'comments': '/**\n* Language Loader\n*\n* Loads language files.\n*\n* @param\tstring|string[]\t$files\tList of language file names to load\n* @param\tstring\t\tLanguage name\n* @return\tobject\n*/', 'function_name': 'language'}, {'className': 'CI_Loader', 'params': '$file, $use_sections = FALSE, $fail_gracefully = FALSE', 'extends': '', 'comments': '/**\n* Config Loader\n*\n* Loads a config file (an alias for CI_Config::load()).\n*\n* @uses\tCI_Config::load()\n* @param\tstring\t$file\t\t\tConfiguration file name\n* @param\tbool\t$use_sections\t\tWhether configuration values should be loaded into their own section\n* @param\tbool\t$fail_gracefully\tWhether to just return FALSE or display an error message\n* @return\tbool\tTRUE if the file was loaded correctly or FALSE on failure\n*/', 'function_name': 'config'}, {'className': 'CI_Loader', 'params': '$library, $params = NULL, $object_name = NULL', 'extends': '', 'comments': '/**\n* Driver Loader\n*\n* Loads a driver library.\n*\n* @param\tstring|string[]\t$library\tDriver name(s)\n* @param\tarray\t\t$params\t\tOptional parameters to pass to the driver\n* @param\tstring\t\t$object_name\tAn optional object name to assign to\n*\n* @return\tobject|bool\tObject or FALSE on failure if $library is a string\n*\t\t\t\tand $object_name is set. CI_Loader instance otherwise.\n*/', 'function_name': 'driver'}, {'className': 'CI_Loader', 'params': '$path, $view_cascade = TRUE', 'extends': '', 'comments': '/**\n* Add Package Path\n*\n* Prepends a parent path to the library, model, helper and config\n* path arrays.\n*\n* @see\tCI_Loader::$_ci_library_paths\n* @see\tCI_Loader::$_ci_model_paths\n* @see CI_Loader::$_ci_helper_paths\n* @see CI_Config::$_config_paths\n*\n* @param\tstring\t$path\t\tPath to add\n* @param \tbool\t$view_cascade\t(default: TRUE)\n* @return\tobject\n*/', 'function_name': 'add_package_path'}, {'className': 'CI_Loader', 'params': '$include_base = FALSE', 'extends': '', 'comments': '/**\n* Get Package Paths\n*\n* Return a list of all package paths.\n*\n* @param\tbool\t$include_base\tWhether to include BASEPATH (default: FALSE)\n* @return\tarray\n*/', 'function_name': 'get_package_paths'}, {'className': 'CI_Loader', 'params': "$path = ''", 'extends': '', 'comments': '/**\n* Remove Package Path\n*\n* Remove a path from the library, model, helper and/or config\n* path arrays if it exists. If no path is provided, the most recently\n* added path will be removed removed.\n*\n* @param\tstring\t$path\tPath to remove\n* @return\tobject\n*/', 'function_name': 'remove_package_path'}]
[{'className': 'CI_Log', 'params': '', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Log', 'params': '$level, $msg', 'extends': '', 'comments': "/**\n* Write Log File\n*\n* Generally this function will be called using the global log_message() function\n*\n* @param\tstring\t$level \tThe error level: 'error', 'debug' or 'info'\n* @param\tstring\t$msg \tThe error message\n* @return\tbool\n*/", 'function_name': 'write_log'}]
[{'className': 'CI_Model', 'params': '$key', 'extends': '', 'comments': "/**\n* __get magic\n*\n* Allows models to access CI's loaded classes using the same\n* syntax as controllers.\n*\n* @param\tstring\t$key\n*/", 'function_name': '__get'}]
[{'className': 'CI_Output', 'params': '', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* Determines whether zLib output compression will be used.\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Output', 'params': '', 'extends': '', 'comments': '/**\n* Get Output\n*\n* Returns the current output string.\n*\n* @return\tstring\n*/', 'function_name': 'get_output'}, {'className': 'CI_Output', 'params': '$output', 'extends': '', 'comments': '/**\n* Set Output\n*\n* Sets the output string.\n*\n* @param\tstring\t$output\tOutput data\n* @return\tCI_Output\n*/', 'function_name': 'set_output'}, {'className': 'CI_Output', 'params': '$output', 'extends': '', 'comments': '/**\n* Append Output\n*\n* Appends data onto the output string.\n*\n* @param\tstring\t$output\tData to append\n* @return\tCI_Output\n*/', 'function_name': 'append_output'}, {'className': 'CI_Output', 'params': '$header, $replace = TRUE', 'extends': '', 'comments': '/**\n* Set Header\n*\n* Lets you set a server header which will be sent with the final output.\n*\n* Note: If a file is cached, headers will not be sent.\n* @todo\tWe need to figure out how to permit headers to be cached.\n*\n* @param\tstring\t$header\t\tHeader\n* @param\tbool\t$replace\tWhether to replace the old header value, if already set\n* @return\tCI_Output\n*/', 'function_name': 'set_header'}, {'className': 'CI_Output', 'params': '$mime_type, $charset = NULL', 'extends': '', 'comments': "/**\n* Set Content-Type Header\n*\n* @param\tstring\t$mime_type\tExtension of the file we're outputting\n* @param\tstring\t$charset\tCharacter set (default: NULL)\n* @return\tCI_Output\n*/", 'function_name': 'set_content_type'}, {'className': 'CI_Output', 'params': '', 'extends': '', 'comments': "/**\n* Get Current Content-Type Header\n*\n* @return\tstring\t'text/html', if not already set\n*/", 'function_name': 'get_content_type'}, {'className': 'CI_Output', 'params': '$header', 'extends': '', 'comments': '/**\n* Get Header\n*\n* @param\tstring\t$header\n* @return\tstring\n*/', 'function_name': 'get_header'}, {'className': 'CI_Output', 'params': "$code = 200, $text = ''", 'extends': '', 'comments': '/**\n* Set HTTP Status Header\n*\n* As of version 1.7.2, this is an alias for common function\n* set_status_header().\n*\n* @param\tint\t$code\tStatus code (default: 200)\n* @param\tstring\t$text\tOptional message\n* @return\tCI_Output\n*/', 'function_name': 'set_status_header'}, {'className': 'CI_Output', 'params': '$val = TRUE', 'extends': '', 'comments': '/**\n* Enable/disable Profiler\n*\n* @param\tbool\t$val\tTRUE to enable or FALSE to disable\n* @return\tCI_Output\n*/', 'function_name': 'enable_profiler'}, {'className': 'CI_Output', 'params': '$sections', 'extends': '', 'comments': '/**\n* Set Profiler Sections\n*\n* Allows override of default/config settings for\n* Profiler section display.\n*\n* @param\tarray\t$sections\tProfiler sections\n* @return\tCI_Output\n*/', 'function_name': 'set_profiler_sections'}, {'className': 'CI_Output', 'params': '$time', 'extends': '', 'comments': '/**\n* Set Cache\n*\n* @param\tint\t$time\tCache expiration time in minutes\n* @return\tCI_Output\n*/', 'function_name': 'cache'}, {'className': 'CI_Output', 'params': '$output = NULL', 'extends': '', 'comments': '/**\n* Display Output\n*\n* Processes and sends finalized output data to the browser along\n* with any server headers and profile data. It also stops benchmark\n* timers so the page rendering speed and memory usage can be shown.\n*\n* Note: All "view" data is automatically put into $this->final_output\n*\t by controller class.\n*\n* @uses\tCI_Output::$final_output\n* @param\tstring\t$output\tOutput data override\n* @return\tvoid\n*/', 'function_name': '_display'}, {'className': 'CI_Output', 'params': '$output', 'extends': '', 'comments': '/**\n* Write Cache\n*\n* @param\tstring\t$output\tOutput data to cache\n* @return\tvoid\n*/', 'function_name': '_write_cache'}, {'className': 'CI_Output', 'params': '&$CFG, &$URI', 'extends': '', 'comments': '/**\n* Update/serve cached output\n*\n* @uses\tCI_Config\n* @uses\tCI_URI\n*\n* @param\tobject\t&$CFG\tCI_Config class instance\n* @param\tobject\t&$URI\tCI_URI class instance\n* @return\tbool\tTRUE on success or FALSE on failure\n*/', 'function_name': '_display_cache'}, {'className': 'CI_Output', 'params': "$uri = ''", 'extends': '', 'comments': '/**\n* Delete cache\n*\n* @param\tstring\t$uri\tURI string\n* @return\tbool\n*/', 'function_name': 'delete_cache'}, {'className': 'CI_Output', 'params': '$last_modified, $expiration', 'extends': '', 'comments': '/**\n* Set Cache Header\n*\n* Set the HTTP headers to match the server-side file cache settings\n* in order to reduce bandwidth.\n*\n* @param\tint\t$last_modified\tTimestamp of when the page was last modified\n* @param\tint\t$expiration\tTimestamp of when should the requested page expire from cache\n* @return\tvoid\n*/', 'function_name': 'set_cache_header'}]
[{'className': 'CI_Router', 'params': '$routing = NULL', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* Runs the route mapping function.\n*\n* @param\tarray\t$routing\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Router', 'params': '$class', 'extends': '', 'comments': '/**\n* Set class name\n*\n* @param\tstring\t$class\tClass name\n* @return\tvoid\n*/', 'function_name': 'set_class'}, {'className': 'CI_Router', 'params': '$method', 'extends': '', 'comments': '/**\n* Set method name\n*\n* @param\tstring\t$method\tMethod name\n* @return\tvoid\n*/', 'function_name': 'set_method'}, {'className': 'CI_Router', 'params': '$dir, $append = FALSE', 'extends': '', 'comments': "/**\n* Set directory name\n*\n* @param\tstring\t$dir\tDirectory name\n* @param\tbool\t$append\tWhether we're appending rather than setting the full value\n* @return\tvoid\n*/", 'function_name': 'set_directory'}]
[{'className': 'CI_Security', 'params': '$charset', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Security', 'params': '', 'extends': '', 'comments': '/**\n* CSRF Verify\n*\n* @return\tCI_Security\n*/', 'function_name': 'csrf_verify'}, {'className': 'CI_Security', 'params': '', 'extends': '', 'comments': '/**\n* CSRF Set Cookie\n*\n* @codeCoverageIgnore\n* @return\tCI_Security\n*/', 'function_name': 'csrf_set_cookie'}, {'className': 'CI_Security', 'params': '', 'extends': '', 'comments': '/**\n* Show CSRF Error\n*\n* @return\tvoid\n*/', 'function_name': 'csrf_show_error'}, {'className': 'CI_Security', 'params': '', 'extends': '', 'comments': '/**\n* Get CSRF Hash\n*\n* @see\t\tCI_Security::$_csrf_hash\n* @return \tstring\tCSRF hash\n*/', 'function_name': 'get_csrf_hash'}, {'className': 'CI_Security', 'params': '', 'extends': '', 'comments': '/**\n* Get CSRF Token Name\n*\n* @see\t\tCI_Security::$_csrf_token_name\n* @return\tstring\tCSRF token name\n*/', 'function_name': 'get_csrf_token_name'}, {'className': 'CI_Security', 'params': '$str, $is_image = FALSE', 'extends': '', 'comments': "/**\n* XSS Clean\n*\n* Sanitizes data so that Cross Site Scripting Hacks can be\n* prevented.  This method does a fair amount of work but\n* it is extremely thorough, designed to prevent even the\n* most obscure XSS attempts.  Nothing is ever 100% foolproof,\n* of course, but I haven't been able to get anything passed\n* the filter.\n*\n* Note: Should only be used to deal with data upon submission.\n*\t It's not something that should be used for general\n*\t runtime processing.\n*\n* @link\thttp://channel.bitflux.ch/wiki/XSS_Prevention\n* \t\tBased in part on some code and ideas from Bitflux.\n*\n* @link\thttp://ha.ckers.org/xss.html\n* \t\tTo help develop this script I used this great list of\n*\t\tvulnerabilities along with a few other hacks I've\n*\t\tharvested from examining vulnerabilities in other programs.\n*\n* @param\tstring|string[]\t$str\t\tInput data\n* @param \tbool\t\t$is_image\tWhether the input is an image\n* @return\tstring\n*/", 'function_name': 'xss_clean'}, {'className': 'CI_Security', 'params': '', 'extends': '', 'comments': '/**\n* XSS Hash\n*\n* Generates the XSS hash if needed and returns it.\n*\n* @see\t\tCI_Security::$_xss_hash\n* @return\tstring\tXSS hash\n*/', 'function_name': 'xss_hash'}, {'className': 'CI_Security', 'params': '$length', 'extends': '', 'comments': '/**\n* Get random bytes\n*\n* @param\tint\t$length\tOutput length\n* @return\tstring\n*/', 'function_name': 'get_random_bytes'}, {'className': 'CI_Security', 'params': '$str, $charset = NULL', 'extends': '', 'comments': '/**\n* HTML Entities Decode\n*\n* A replacement for html_entity_decode()\n*\n* The reason we are not using html_entity_decode() by itself is because\n* while it is not technically correct to leave out the semicolon\n* at the end of an entity most browsers will still interpret the entity\n* correctly. html_entity_decode() does not convert entities without\n* semicolons, so we are left with our own little solution here. Bummer.\n*\n* @link\thttp://php.net/html-entity-decode\n*\n* @param\tstring\t$str\t\tInput\n* @param\tstring\t$charset\tCharacter set\n* @return\tstring\n*/', 'function_name': 'entity_decode'}, {'className': 'CI_Security', 'params': '$str, $relative_path = FALSE', 'extends': '', 'comments': '/**\n* Sanitize Filename\n*\n* @param\tstring\t$str\t\tInput file name\n* @param \tbool\t$relative_path\tWhether to preserve paths\n* @return\tstring\n*/', 'function_name': 'sanitize_filename'}, {'className': 'CI_Security', 'params': '$str', 'extends': '', 'comments': '/**\n* Strip Image Tags\n*\n* @param\tstring\t$str\n* @return\tstring\n*/', 'function_name': 'strip_image_tags'}]
[{'className': 'CI_URI', 'params': 'CI_Config $config', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_URI', 'params': '&$str', 'extends': '', 'comments': '/**\n* Filter URI\n*\n* Filters segments for malicious characters.\n*\n* @param\tstring\t$str\n* @return\tvoid\n*/', 'function_name': 'filter_uri'}, {'className': 'CI_URI', 'params': '$n, $no_result = NULL', 'extends': '', 'comments': '/**\n* Fetch URI Segment\n*\n* @see\t\tCI_URI::$segments\n* @param\tint\t\t$n\t\tIndex\n* @param\tmixed\t\t$no_result\tWhat to return if the segment index is not found\n* @return\tmixed\n*/', 'function_name': 'segment'}, {'className': 'CI_URI', 'params': '$n, $no_result = NULL', 'extends': '', 'comments': '/**\n* Fetch URI "routed" Segment\n*\n* Returns the re-routed URI segment (assuming routing rules are used)\n* based on the index provided. If there is no routing, will return\n* the same result as CI_URI::segment().\n*\n* @see\t\tCI_URI::$rsegments\n* @see\t\tCI_URI::segment()\n* @param\tint\t\t$n\t\tIndex\n* @param\tmixed\t\t$no_result\tWhat to return if the segment index is not found\n* @return\tmixed\n*/', 'function_name': 'rsegment'}, {'className': 'CI_URI', 'params': '$n = 3, $default = array()', 'extends': '', 'comments': '/**\n* URI to assoc\n*\n* Generates an associative array of URI data starting at the supplied\n* segment index. For example, if this is your URI:\n*\n*\texample.com/user/search/name/joe/location/UK/gender/male\n*\n* You can use this method to generate an array with this prototype:\n*\n*\tarray (\n*\t\tname => joe\n*\t\tlocation => UK\n*\t\tgender => male\n*\t )\n*\n* @param\tint\t$n\t\tIndex (default: 3)\n* @param\tarray\t$default\tDefault values\n* @return\tarray\n*/', 'function_name': 'uri_to_assoc($n = 3, $default = array'}, {'className': 'CI_URI', 'params': '$n = 3, $default = array()', 'extends': '', 'comments': '/**\n* Routed URI to assoc\n*\n* Identical to CI_URI::uri_to_assoc(), only it uses the re-routed\n* segment array.\n*\n* @see\t\tCI_URI::uri_to_assoc()\n* @param \tint\t$n\t\tIndex (default: 3)\n* @param \tarray\t$default\tDefault values\n* @return \tarray\n*/', 'function_name': 'ruri_to_assoc($n = 3, $default = array'}, {'className': 'CI_URI', 'params': '$array', 'extends': '', 'comments': '/**\n* Assoc to URI\n*\n* Generates a URI string from an associative array.\n*\n* @param\tarray\t$array\tInput array of key/value pairs\n* @return\tstring\tURI string\n*/', 'function_name': 'assoc_to_uri'}, {'className': 'CI_URI', 'params': "$n, $where = 'trailing'", 'extends': '', 'comments': "/**\n* Slash segment\n*\n* Fetches an URI segment with a slash.\n*\n* @param\tint\t$n\tIndex\n* @param\tstring\t$where\tWhere to add the slash ('trailing' or 'leading')\n* @return\tstring\n*/", 'function_name': 'slash_segment'}, {'className': 'CI_URI', 'params': "$n, $where = 'trailing'", 'extends': '', 'comments': "/**\n* Slash routed segment\n*\n* Fetches an URI routed segment with a slash.\n*\n* @param\tint\t$n\tIndex\n* @param\tstring\t$where\tWhere to add the slash ('trailing' or 'leading')\n* @return\tstring\n*/", 'function_name': 'slash_rsegment'}, {'className': 'CI_URI', 'params': '', 'extends': '', 'comments': '/**\n* Segment Array\n*\n* @return\tarray\tCI_URI::$segments\n*/', 'function_name': 'segment_array'}, {'className': 'CI_URI', 'params': '', 'extends': '', 'comments': '/**\n* Routed Segment Array\n*\n* @return\tarray\tCI_URI::$rsegments\n*/', 'function_name': 'rsegment_array'}, {'className': 'CI_URI', 'params': '', 'extends': '', 'comments': '/**\n* Total number of segments\n*\n* @return\tint\n*/', 'function_name': 'total_segments'}, {'className': 'CI_URI', 'params': '', 'extends': '', 'comments': '/**\n* Total number of routed segments\n*\n* @return\tint\n*/', 'function_name': 'total_rsegments'}, {'className': 'CI_URI', 'params': '', 'extends': '', 'comments': '/**\n* Fetch URI string\n*\n* @return\tstring\tCI_URI::$uri_string\n*/', 'function_name': 'uri_string'}, {'className': 'CI_URI', 'params': '', 'extends': '', 'comments': '/**\n* Fetch Re-routed URI string\n*\n* @return\tstring\n*/', 'function_name': 'ruri_string'}]
[{'className': 'CI_Utf8', 'params': '$charset', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* Determines if UTF-8 support is to be enabled.\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Utf8', 'params': '$str', 'extends': '', 'comments': '/**\n* Clean UTF-8 strings\n*\n* Ensures strings contain only valid UTF-8 characters.\n*\n* @param\tstring\t$str\tString to clean\n* @return\tstring\n*/', 'function_name': 'clean_string'}, {'className': 'CI_Utf8', 'params': '$str', 'extends': '', 'comments': '/**\n* Remove ASCII control characters\n*\n* Removes all ASCII control characters except horizontal tabs,\n* line feeds, and carriage returns, as all others can cause\n* problems in XML.\n*\n* @param\tstring\t$str\tString to clean\n* @return\tstring\n*/', 'function_name': 'safe_ascii_for_xml'}, {'className': 'CI_Utf8', 'params': '$str, $encoding', 'extends': '', 'comments': '/**\n* Convert to UTF-8\n*\n* Attempts to convert a string to UTF-8.\n*\n* @param\tstring\t$str\t\tInput string\n* @param\tstring\t$encoding\tInput encoding\n* @return\tstring\t$str encoded in UTF-8 or FALSE on failure\n*/', 'function_name': 'convert_to_utf8'}, {'className': 'CI_Utf8', 'params': '$str', 'extends': '', 'comments': '/**\n* Is ASCII?\n*\n* Tests if a string is standard 7-bit ASCII or not.\n*\n* @param\tstring\t$str\tString to check\n* @return\tbool\n*/', 'function_name': 'is_ascii'}]
[{'className': 'CI_DB', 'params': "$params = '', $query_builder_override = NULL", 'extends': 'proper', 'comments': '/**\n* Initialize the database\n*\n* @category\tDatabase\n* @author\tEllisLab Dev Team\n* @link\thttps://codeigniter.com/user_guide/database/\n*\n* @param \tstring|string[]\t$params\n* @param \tbool\t\t$query_builder_override\n*\t\t\t\tDetermines if query builder should be used or not\n*/', 'function_name': '&DB'}]
[{'className': 'CI_DB_Cache', 'params': '&$db', 'extends': '', 'comments': '/**\n* Constructor\n*\n* @param\tobject\t&$db\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_Cache', 'params': "$path = ''", 'extends': '', 'comments': '/**\n* Set Cache Directory Path\n*\n* @param\tstring\t$path\tPath to the cache directory\n* @return\tbool\n*/', 'function_name': 'check_path'}, {'className': 'CI_DB_Cache', 'params': '$sql', 'extends': '', 'comments': '/**\n* Retrieve a cached query\n*\n* The URI being requested will become the name of the cache sub-folder.\n* An MD5 hash of the SQL statement will become the cache file name.\n*\n* @param\tstring\t$sql\n* @return\tstring\n*/', 'function_name': 'read'}, {'className': 'CI_DB_Cache', 'params': '$sql, $object', 'extends': '', 'comments': '/**\n* Write a query to a cache file\n*\n* @param\tstring\t$sql\n* @param\tobject\t$object\n* @return\tbool\n*/', 'function_name': 'write'}, {'className': 'CI_DB_Cache', 'params': "$segment_one = '', $segment_two = ''", 'extends': '', 'comments': '/**\n* Delete cache files within a particular directory\n*\n* @param\tstring\t$segment_one\n* @param\tstring\t$segment_two\n* @return\tvoid\n*/', 'function_name': 'delete'}, {'className': 'CI_DB_Cache', 'params': '', 'extends': '', 'comments': '/**\n* Delete all existing cache files\n*\n* @return\tvoid\n*/', 'function_name': 'delete_all'}]
[{'className': '', 'params': '$params', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Initialize Database Settings\n*\n* @return\tvoid\n* @throws\tRuntimeException\tIn case of failure\n*/', 'function_name': 'initialize'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* DB connect\n*\n* This is just a dummy method that all drivers will override.\n*\n* @return\tmixed\n*/', 'function_name': 'db_connect'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Persistent database connection\n*\n* @return\tmixed\n*/', 'function_name': 'db_pconnect'}, {'className': '', 'params': '', 'extends': '', 'comments': "/**\n* Reconnect\n*\n* Keep / reestablish the db connection if no queries have been\n* sent for a length of time exceeding the server's idle timeout.\n*\n* This is just a dummy method to allow drivers without such\n* functionality to not declare it, while others will override it.\n*\n* @return\tvoid\n*/", 'function_name': 'reconnect'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Select database\n*\n* This is just a dummy method to allow drivers without such\n* functionality to not declare it, while others will override it.\n*\n* @return\tbool\n*/', 'function_name': 'db_select'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Last error\n*\n* @return\tarray\n*/', 'function_name': 'error'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* The name of the platform in use (mysql, mssql, etc...)\n*\n* @return\tstring\n*/', 'function_name': 'platform'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Database version number\n*\n* Returns a string containing the version of the database being used.\n* Most drivers will override this method.\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': '', 'params': '$sql, $binds = FALSE, $return_object = NULL', 'extends': '', 'comments': '/**\n* Execute the query\n*\n* Accepts an SQL string as input and returns a result object upon\n* successful execution of a "read" type query. Returns boolean TRUE\n* upon successful execution of a "write" type query. Returns boolean\n* FALSE upon failure, and if the $db_debug variable is set to TRUE\n* will raise an error.\n*\n* @param\tstring\t$sql\n* @param\tarray\t$binds = FALSE\t\tAn array of binding data\n* @param\tbool\t$return_object = NULL\n* @return\tmixed\n*/', 'function_name': 'query'}, {'className': '', 'params': '$sql', 'extends': '', 'comments': '/**\n* Simple Query\n* This is a simplified version of the query() function. Internally\n* we only use it when running transaction commands since they do\n* not require all the features of the main query() function.\n*\n* @param\tstring\tthe sql query\n* @return\tmixed\n*/', 'function_name': 'simple_query'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Disable Transactions\n* This permits transactions to be disabled at run-time.\n*\n* @return\tvoid\n*/', 'function_name': 'trans_off'}, {'className': '', 'params': '$mode = TRUE', 'extends': '', 'comments': '/**\n* Enable/disable Transaction Strict Mode\n*\n* When strict mode is enabled, if you are running multiple groups of\n* transactions, if one group fails all subsequent groups will be\n* rolled back.\n*\n* If strict mode is disabled, each group is treated autonomously,\n* meaning a failure of one group will not affect any others\n*\n* @param\tbool\t$mode = TRUE\n* @return\tvoid\n*/', 'function_name': 'trans_strict'}, {'className': '', 'params': '$test_mode = FALSE', 'extends': '', 'comments': '/**\n* Start Transaction\n*\n* @param\tbool\t$test_mode = FALSE\n* @return\tbool\n*/', 'function_name': 'trans_start'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Complete Transaction\n*\n* @return\tbool\n*/', 'function_name': 'trans_complete'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Lets you retrieve the transaction flag to determine if it has failed\n*\n* @return\tbool\n*/', 'function_name': 'trans_status'}, {'className': '', 'params': '$test_mode = FALSE', 'extends': '', 'comments': '/**\n* Begin Transaction\n*\n* @param\tbool\t$test_mode\n* @return\tbool\n*/', 'function_name': 'trans_begin'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Commit Transaction\n*\n* @return\tbool\n*/', 'function_name': 'trans_commit'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Rollback Transaction\n*\n* @return\tbool\n*/', 'function_name': 'trans_rollback'}, {'className': '', 'params': '$sql, $binds', 'extends': '', 'comments': '/**\n* Compile Bindings\n*\n* @param\tstring\tthe sql statement\n* @param\tarray\tan array of bind data\n* @return\tstring\n*/', 'function_name': 'compile_binds'}, {'className': '', 'params': '$sql', 'extends': '', 'comments': '/**\n* Determines if a query is a "write" type.\n*\n* @param\tstring\tAn SQL query string\n* @return\tbool\n*/', 'function_name': 'is_write_type'}, {'className': '', 'params': '$decimals = 6', 'extends': '', 'comments': '/**\n* Calculate the aggregate query elapsed time\n*\n* @param\tint\tThe number of decimal places\n* @return\tstring\n*/', 'function_name': 'elapsed_time'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Returns the total number of queries\n*\n* @return\tint\n*/', 'function_name': 'total_queries'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Returns the last query that was executed\n*\n* @return\tstring\n*/', 'function_name': 'last_query'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* "Smart" Escape String\n*\n* Escapes data based on type\n* Sets boolean and null types\n*\n* @param\tstring\n* @return\tmixed\n*/', 'function_name': 'escape'}, {'className': '', 'params': '$str, $like = FALSE', 'extends': '', 'comments': '/**\n* Escape String\n*\n* @param\tstring|string[]\t$str\tInput string\n* @param\tbool\t$like\tWhether or not the string will be used in a LIKE condition\n* @return\tstring\n*/', 'function_name': 'escape_str'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Escape LIKE String\n*\n* Calls the individual driver for platform\n* specific escaping for LIKE conditions\n*\n* @param\tstring|string[]\n* @return\tmixed\n*/', 'function_name': 'escape_like_str'}, {'className': '', 'params': '$table', 'extends': '', 'comments': '/**\n* Primary\n*\n* Retrieves the primary key. It assumes that the row in the first\n* position is the primary key\n*\n* @param\tstring\t$table\tTable name\n* @return\tstring\n*/', 'function_name': 'primary'}, {'className': '', 'params': "$table = ''", 'extends': '', 'comments': '/**\n* "Count All" query\n*\n* Generates a platform-specific query string that counts all records in\n* the specified database\n*\n* @param\tstring\n* @return\tint\n*/', 'function_name': 'count_all'}, {'className': '', 'params': '$constrain_by_prefix = FALSE', 'extends': '', 'comments': '/**\n* Returns an array of table names\n*\n* @param\tstring\t$constrain_by_prefix = FALSE\n* @return\tarray\n*/', 'function_name': 'list_tables'}, {'className': '', 'params': '$table_name', 'extends': '', 'comments': '/**\n* Determine if a particular table exists\n*\n* @param\tstring\t$table_name\n* @return\tbool\n*/', 'function_name': 'table_exists'}, {'className': '', 'params': '$table', 'extends': '', 'comments': '/**\n* Fetch Field Names\n*\n* @param\tstring\t$table\tTable name\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': '', 'params': '$field_name, $table_name', 'extends': '', 'comments': '/**\n* Determine if a particular field exists\n*\n* @param\tstring\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'field_exists'}, {'className': '', 'params': '$table', 'extends': '', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\tthe table name\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': '', 'params': '$item, $split = TRUE', 'extends': '', 'comments': '/**\n* Escape the SQL Identifiers\n*\n* This function escapes column and table names\n*\n* @param\tmixed\t$item\tIdentifier to escape\n* @param\tbool\t$split\tWhether to split identifiers when a dot is encountered\n* @return\tmixed\n*/', 'function_name': 'escape_identifiers'}, {'className': '', 'params': '$table, $data', 'extends': '', 'comments': '/**\n* Generate an insert string\n*\n* @param\tstring\tthe table upon which the query will be performed\n* @param\tarray\tan associative array data of key/values\n* @return\tstring\n*/', 'function_name': 'insert_string'}, {'className': '', 'params': '$table, $data, $where', 'extends': '', 'comments': '/**\n* Generate an update string\n*\n* @param\tstring\tthe table upon which the query will be performed\n* @param\tarray\tan associative array data of key/values\n* @param\tmixed\tthe "where" statement\n* @return\tstring\n*/', 'function_name': 'update_string'}, {'className': '', 'params': '$function', 'extends': '', 'comments': '/**\n* Enables a native PHP function to be run, using a platform agnostic wrapper.\n*\n* @param\tstring\t$function\tFunction name\n* @return\tmixed\n*/', 'function_name': 'call_function'}, {'className': '', 'params': "$path = ''", 'extends': '', 'comments': '/**\n* Set Cache Directory Path\n*\n* @param\tstring\tthe path to the cache directory\n* @return\tvoid\n*/', 'function_name': 'cache_set_path'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Enable Query Caching\n*\n* @return\tbool\tcache_on value\n*/', 'function_name': 'cache_on'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Disable Query Caching\n*\n* @return\tbool\tcache_on value\n*/', 'function_name': 'cache_off'}, {'className': '', 'params': "$segment_one = '', $segment_two = ''", 'extends': '', 'comments': "/**\n* Delete the cache files associated with a particular URI\n*\n* @param\tstring\t$segment_one = ''\n* @param\tstring\t$segment_two = ''\n* @return\tbool\n*/", 'function_name': 'cache_delete'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Delete All cache files\n*\n* @return\tbool\n*/', 'function_name': 'cache_delete_all'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Close DB Connection\n*\n* @return\tvoid\n*/', 'function_name': 'close'}, {'className': '', 'params': "$error = '', $swap = '', $native = FALSE", 'extends': '', 'comments': '/**\n* Display an error message\n*\n* @param\tstring\tthe error message\n* @param\tstring\tany "swap" values\n* @param\tbool\twhether to localize the message\n* @return\tstring\tsends the application/views/errors/error_db.php template\n*/', 'function_name': 'display_error'}, {'className': '', 'params': '$item, $prefix_single = FALSE, $protect_identifiers = NULL, $field_exists = TRUE', 'extends': '', 'comments': '/**\n* Protect Identifiers\n*\n* This function is used extensively by the Query Builder class, and by\n* a couple functions in this class.\n* It takes a column or table name (optionally with an alias) and inserts\n* the table prefix onto it. Some logic is necessary in order to deal with\n* column names that include the path. Consider a query like this:\n*\n* SELECT hostname.database.table.column AS c FROM hostname.database.table\n*\n* Or a query with aliasing:\n*\n* SELECT m.member_id, m.member_name FROM members AS m\n*\n* Since the column name can include up to four segments (host, DB, table, column)\n* or also have an alias prefix, we need to do a bit of work to figure this out and\n* insert the table prefix (if it exists) in the proper position, and escape only\n* the correct identifiers.\n*\n* @param\tstring\n* @param\tbool\n* @param\tmixed\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'protect_identifiers'}]
[{'className': '', 'params': '&$db', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @param\tobject\t&$db\tDatabase object\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': '', 'params': '$db_name', 'extends': '', 'comments': '/**\n* Create database\n*\n* @param\tstring\t$db_name\n* @return\tbool\n*/', 'function_name': 'create_database'}, {'className': '', 'params': '$db_name', 'extends': '', 'comments': '/**\n* Drop database\n*\n* @param\tstring\t$db_name\n* @return\tbool\n*/', 'function_name': 'drop_database'}, {'className': '', 'params': '$key, $primary = FALSE', 'extends': '', 'comments': '/**\n* Add Key\n*\n* @param\tstring\t$key\n* @param\tbool\t$primary\n* @return\tCI_DB_forge\n*/', 'function_name': 'add_key'}, {'className': '', 'params': '$field', 'extends': '', 'comments': '/**\n* Add Field\n*\n* @param\tarray\t$field\n* @return\tCI_DB_forge\n*/', 'function_name': 'add_field'}, {'className': '', 'params': '$table, $if_not_exists = FALSE, array $attributes = array()', 'extends': '', 'comments': '/**\n* Create Table\n*\n* @param\tstring\t$table\t\tTable name\n* @param\tbool\t$if_not_exists\tWhether to add IF NOT EXISTS condition\n* @param\tarray\t$attributes\tAssociative array of table attributes\n* @return\tbool\n*/', 'function_name': 'create_table($table, $if_not_exists = FALSE, array $attributes = array'}, {'className': '', 'params': '$table_name, $if_exists = FALSE', 'extends': '', 'comments': '/**\n* Drop Table\n*\n* @param\tstring\t$table_name\tTable name\n* @param\tbool\t$if_exists\tWhether to add an IF EXISTS condition\n* @return\tbool\n*/', 'function_name': 'drop_table'}, {'className': '', 'params': '$table_name, $new_table_name', 'extends': '', 'comments': '/**\n* Rename Table\n*\n* @param\tstring\t$table_name\tOld table name\n* @param\tstring\t$new_table_name\tNew table name\n* @return\tbool\n*/', 'function_name': 'rename_table'}, {'className': '', 'params': '$table, $field, $_after = NULL', 'extends': '', 'comments': '/**\n* Column Add\n*\n* @todo\tRemove deprecated $_after option in 3.1+\n* @param\tstring\t$table\tTable name\n* @param\tarray\t$field\tColumn definition\n* @param\tstring\t$_after\tColumn for AFTER clause (deprecated)\n* @return\tbool\n*/', 'function_name': 'add_column'}, {'className': '', 'params': '$table, $column_name', 'extends': '', 'comments': '/**\n* Column Drop\n*\n* @param\tstring\t$table\t\tTable name\n* @param\tstring\t$column_name\tColumn name\n* @return\tbool\n*/', 'function_name': 'drop_column'}, {'className': '', 'params': '$table, $field', 'extends': '', 'comments': '/**\n* Column Modify\n*\n* @param\tstring\t$table\tTable name\n* @param\tstring\t$field\tColumn definition\n* @return\tbool\n*/', 'function_name': 'modify_column'}]
[{'className': '', 'params': "$select = '*', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* Select\n*\n* Generates the SELECT portion of the query\n*\n* @param\tstring\n* @param\tmixed\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'select'}, {'className': '', 'params': "$select = '', $alias = ''", 'extends': 'CI_DB_driver', 'comments': '/**\n* Select Max\n*\n* Generates a SELECT MAX(field) portion of a query\n*\n* @param\tstring\tthe field\n* @param\tstring\tan alias\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'select_max'}, {'className': '', 'params': "$select = '', $alias = ''", 'extends': 'CI_DB_driver', 'comments': '/**\n* Select Min\n*\n* Generates a SELECT MIN(field) portion of a query\n*\n* @param\tstring\tthe field\n* @param\tstring\tan alias\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'select_min'}, {'className': '', 'params': "$select = '', $alias = ''", 'extends': 'CI_DB_driver', 'comments': '/**\n* Select Average\n*\n* Generates a SELECT AVG(field) portion of a query\n*\n* @param\tstring\tthe field\n* @param\tstring\tan alias\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'select_avg'}, {'className': '', 'params': "$select = '', $alias = ''", 'extends': 'CI_DB_driver', 'comments': '/**\n* Select Sum\n*\n* Generates a SELECT SUM(field) portion of a query\n*\n* @param\tstring\tthe field\n* @param\tstring\tan alias\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'select_sum'}, {'className': '', 'params': '$val = TRUE', 'extends': 'CI_DB_driver', 'comments': '/**\n* DISTINCT\n*\n* Sets a flag which tells the query string compiler to add DISTINCT\n*\n* @param\tbool\t$val\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'distinct'}, {'className': '', 'params': '$from', 'extends': 'CI_DB_driver', 'comments': '/**\n* From\n*\n* Generates the FROM portion of the query\n*\n* @param\tmixed\t$from\tcan be a string or array\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'from'}, {'className': '', 'params': "$table, $cond, $type = '', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* JOIN\n*\n* Generates the JOIN portion of the query\n*\n* @param\tstring\n* @param\tstring\tthe join condition\n* @param\tstring\tthe type of join\n* @param\tstring\twhether not to try to escape identifiers\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'join'}, {'className': '', 'params': '$key, $value = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* WHERE\n*\n* Generates the WHERE portion of the query.\n* Separates multiple calls with 'AND'.\n*\n* @param\tmixed\n* @param\tmixed\n* @param\tbool\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'where'}, {'className': '', 'params': '$key, $value = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* OR WHERE\n*\n* Generates the WHERE portion of the query.\n* Separates multiple calls with 'OR'.\n*\n* @param\tmixed\n* @param\tmixed\n* @param\tbool\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'or_where'}, {'className': '', 'params': '$key = NULL, $values = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* WHERE IN\n*\n* Generates a WHERE field IN('item', 'item') SQL query,\n* joined with 'AND' if appropriate.\n*\n* @param\tstring\t$key\tThe field to search\n* @param\tarray\t$values\tThe values searched on\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'where_in'}, {'className': '', 'params': '$key = NULL, $values = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* OR WHERE IN\n*\n* Generates a WHERE field IN('item', 'item') SQL query,\n* joined with 'OR' if appropriate.\n*\n* @param\tstring\t$key\tThe field to search\n* @param\tarray\t$values\tThe values searched on\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'or_where_in'}, {'className': '', 'params': '$key = NULL, $values = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* WHERE NOT IN\n*\n* Generates a WHERE field NOT IN('item', 'item') SQL query,\n* joined with 'AND' if appropriate.\n*\n* @param\tstring\t$key\tThe field to search\n* @param\tarray\t$values\tThe values searched on\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'where_not_in'}, {'className': '', 'params': '$key = NULL, $values = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* OR WHERE NOT IN\n*\n* Generates a WHERE field NOT IN('item', 'item') SQL query,\n* joined with 'OR' if appropriate.\n*\n* @param\tstring\t$key\tThe field to search\n* @param\tarray\t$values\tThe values searched on\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'or_where_not_in'}, {'className': '', 'params': '$key = NULL, $values = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* HAVING IN\n*\n* Generates a HAVING field IN('item', 'item') SQL query,\n* joined with 'AND' if appropriate.\n*\n* @param\tstring\t$key\tThe field to search\n* @param\tarray\t$values\tThe values searched on\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'having_in'}, {'className': '', 'params': '$key = NULL, $values = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* OR HAVING IN\n*\n* Generates a HAVING field IN('item', 'item') SQL query,\n* joined with 'OR' if appropriate.\n*\n* @param\tstring\t$key\tThe field to search\n* @param\tarray\t$values\tThe values searched on\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'or_having_in'}, {'className': '', 'params': '$key = NULL, $values = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* HAVING NOT IN\n*\n* Generates a HAVING field NOT IN('item', 'item') SQL query,\n* joined with 'AND' if appropriate.\n*\n* @param\tstring\t$key\tThe field to search\n* @param\tarray\t$values\tThe values searched on\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'having_not_in'}, {'className': '', 'params': '$key = NULL, $values = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* OR HAVING NOT IN\n*\n* Generates a HAVING field NOT IN('item', 'item') SQL query,\n* joined with 'OR' if appropriate.\n*\n* @param\tstring\t$key\tThe field to search\n* @param\tarray\t$values\tThe values searched on\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'or_having_not_in'}, {'className': '', 'params': "$field, $match = '', $side = 'both', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': "/**\n* LIKE\n*\n* Generates a %LIKE% portion of the query.\n* Separates multiple calls with 'AND'.\n*\n* @param\tmixed\t$field\n* @param\tstring\t$match\n* @param\tstring\t$side\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'like'}, {'className': '', 'params': "$field, $match = '', $side = 'both', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': "/**\n* NOT LIKE\n*\n* Generates a NOT LIKE portion of the query.\n* Separates multiple calls with 'AND'.\n*\n* @param\tmixed\t$field\n* @param\tstring\t$match\n* @param\tstring\t$side\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'not_like'}, {'className': '', 'params': "$field, $match = '', $side = 'both', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': "/**\n* OR LIKE\n*\n* Generates a %LIKE% portion of the query.\n* Separates multiple calls with 'OR'.\n*\n* @param\tmixed\t$field\n* @param\tstring\t$match\n* @param\tstring\t$side\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'or_like'}, {'className': '', 'params': "$field, $match = '', $side = 'both', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': "/**\n* OR NOT LIKE\n*\n* Generates a NOT LIKE portion of the query.\n* Separates multiple calls with 'OR'.\n*\n* @param\tmixed\t$field\n* @param\tstring\t$match\n* @param\tstring\t$side\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'or_not_like'}, {'className': '', 'params': "$not = '', $type = 'AND '", 'extends': 'CI_DB_driver', 'comments': '/**\n* Starts a query group.\n*\n* @param\tstring\t$not\t(Internal use only)\n* @param\tstring\t$type\t(Internal use only)\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'group_start'}, {'className': '', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Starts a query group, but ORs the group\n*\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'or_group_start'}, {'className': '', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Starts a query group, but NOTs the group\n*\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'not_group_start'}, {'className': '', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Starts a query group, but OR NOTs the group\n*\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'or_not_group_start'}, {'className': '', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Ends a query group\n*\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'group_end'}, {'className': '', 'params': '$by, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': '/**\n* GROUP BY\n*\n* @param\tstring\t$by\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'group_by'}, {'className': '', 'params': '$key, $value = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* HAVING\n*\n* Separates multiple calls with 'AND'.\n*\n* @param\tstring\t$key\n* @param\tstring\t$value\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'having'}, {'className': '', 'params': '$key, $value = NULL, $escape = NULL', 'extends': 'CI_DB_driver', 'comments': "/**\n* OR HAVING\n*\n* Separates multiple calls with 'OR'.\n*\n* @param\tstring\t$key\n* @param\tstring\t$value\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/", 'function_name': 'or_having'}, {'className': '', 'params': "$orderby, $direction = '', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* ORDER BY\n*\n* @param\tstring\t$orderby\n* @param\tstring\t$direction\tASC, DESC or RANDOM\n* @param\tbool\t$escape\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'order_by'}, {'className': '', 'params': '$value, $offset = 0', 'extends': 'CI_DB_driver', 'comments': '/**\n* LIMIT\n*\n* @param\tint\t$value\tLIMIT value\n* @param\tint\t$offset\tOFFSET value\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'limit'}, {'className': '', 'params': '$offset', 'extends': 'CI_DB_driver', 'comments': '/**\n* Sets the OFFSET value\n*\n* @param\tint\t$offset\tOFFSET value\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'offset'}, {'className': '', 'params': "$key, $value = '', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* The "set" function.\n*\n* Allows key/value pairs to be set for inserting or updating\n*\n* @param\tmixed\n* @param\tstring\n* @param\tbool\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'set'}, {'className': '', 'params': "$table = '', $reset = TRUE", 'extends': 'CI_DB_driver', 'comments': '/**\n* Get SELECT query string\n*\n* Compiles a SELECT query string and returns the sql.\n*\n* @param\tstring\tthe table name to select from (optional)\n* @param\tbool\tTRUE: resets QB values; FALSE: leave QB values alone\n* @return\tstring\n*/', 'function_name': 'get_compiled_select'}, {'className': '', 'params': "$table = '', $limit = NULL, $offset = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* Get\n*\n* Compiles the select statement based on the other functions called\n* and runs the query\n*\n* @param\tstring\tthe table\n* @param\tstring\tthe limit clause\n* @param\tstring\tthe offset clause\n* @return\tCI_DB_result\n*/', 'function_name': 'get'}, {'className': '', 'params': "$table = '', $reset = TRUE", 'extends': 'CI_DB_driver', 'comments': '/**\n* "Count All Results" query\n*\n* Generates a platform-specific query string that counts all records\n* returned by an Query Builder query.\n*\n* @param\tstring\n* @param\tbool\tthe reset clause\n* @return\tint\n*/', 'function_name': 'count_all_results'}, {'className': '', 'params': "$table = '', $where = NULL, $limit = NULL, $offset = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* Get_Where\n*\n* Allows the where clause, limit and offset to be added directly\n*\n* @param\tstring\t$table\n* @param\tstring\t$where\n* @param\tint\t$limit\n* @param\tint\t$offset\n* @return\tCI_DB_result\n*/', 'function_name': 'get_where'}, {'className': '', 'params': '$table, $set = NULL, $escape = NULL, $batch_size = 100', 'extends': 'CI_DB_driver', 'comments': '/**\n* Insert_Batch\n*\n* Compiles batch insert strings and runs the queries\n*\n* @param\tstring\t$table\tTable to insert into\n* @param\tarray\t$set \tAn associative array of insert values\n* @param\tbool\t$escape\tWhether to escape values and identifiers\n* @return\tint\tNumber of rows inserted or FALSE on failure\n*/', 'function_name': 'insert_batch'}, {'className': '', 'params': "$key, $value = '', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* The "set_insert_batch" function.  Allows key/value pairs to be set for batch inserts\n*\n* @param\tmixed\n* @param\tstring\n* @param\tbool\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'set_insert_batch'}, {'className': '', 'params': "$table = '', $reset = TRUE", 'extends': 'CI_DB_driver', 'comments': '/**\n* Get INSERT query string\n*\n* Compiles an insert query and returns the sql\n*\n* @param\tstring\tthe table to insert into\n* @param\tbool\tTRUE: reset QB values; FALSE: leave QB values alone\n* @return\tstring\n*/', 'function_name': 'get_compiled_insert'}, {'className': '', 'params': "$table = '', $set = NULL, $escape = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* Insert\n*\n* Compiles an insert string and runs the query\n*\n* @param\tstring\tthe table to insert data into\n* @param\tarray\tan associative array of insert values\n* @param\tbool\t$escape\tWhether to escape values and identifiers\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'insert'}, {'className': '', 'params': "$table = '', $set = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* Replace\n*\n* Compiles an replace into string and runs the query\n*\n* @param\tstring\tthe table to replace data into\n* @param\tarray\tan associative array of insert values\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'replace'}, {'className': '', 'params': "$table = '', $reset = TRUE", 'extends': 'CI_DB_driver', 'comments': '/**\n* Get UPDATE query string\n*\n* Compiles an update query and returns the sql\n*\n* @param\tstring\tthe table to update\n* @param\tbool\tTRUE: reset QB values; FALSE: leave QB values alone\n* @return\tstring\n*/', 'function_name': 'get_compiled_update'}, {'className': '', 'params': "$table = '', $set = NULL, $where = NULL, $limit = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* UPDATE\n*\n* Compiles an update string and runs the query.\n*\n* @param\tstring\t$table\n* @param\tarray\t$set\tAn associative array of update values\n* @param\tmixed\t$where\n* @param\tint\t$limit\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'update'}, {'className': '', 'params': '$table, $set = NULL, $index = NULL, $batch_size = 100', 'extends': 'CI_DB_driver', 'comments': '/**\n* Update_Batch\n*\n* Compiles an update string and runs the query\n*\n* @param\tstring\tthe table to retrieve the results from\n* @param\tarray\tan associative array of update values\n* @param\tstring\tthe where key\n* @return\tint\tnumber of rows affected or FALSE on failure\n*/', 'function_name': 'update_batch'}, {'className': '', 'params': "$key, $index = '', $escape = NULL", 'extends': 'CI_DB_driver', 'comments': '/**\n* The "set_update_batch" function.  Allows key/value pairs to be set for batch updating\n*\n* @param\tarray\n* @param\tstring\n* @param\tbool\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'set_update_batch'}, {'className': '', 'params': "$table = ''", 'extends': 'CI_DB_driver', 'comments': '/**\n* Empty Table\n*\n* Compiles a delete string and runs "DELETE FROM table"\n*\n* @param\tstring\tthe table to empty\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'empty_table'}, {'className': '', 'params': "$table = ''", 'extends': 'CI_DB_driver', 'comments': '/**\n* Truncate\n*\n* Compiles a truncate string and runs the query\n* If the database does not support the truncate() command\n* This function maps to "DELETE FROM table"\n*\n* @param\tstring\tthe table to truncate\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'truncate'}, {'className': '', 'params': "$table = '', $reset = TRUE", 'extends': 'CI_DB_driver', 'comments': '/**\n* Get DELETE query string\n*\n* Compiles a delete query string and returns the sql\n*\n* @param\tstring\tthe table to delete from\n* @param\tbool\tTRUE: reset QB values; FALSE: leave QB values alone\n* @return\tstring\n*/', 'function_name': 'get_compiled_delete'}, {'className': '', 'params': "$table = '', $where = '', $limit = NULL, $reset_data = TRUE", 'extends': 'CI_DB_driver', 'comments': '/**\n* Delete\n*\n* Compiles a delete string and runs the query\n*\n* @param\tmixed\tthe table(s) to delete from. String or array\n* @param\tmixed\tthe where clause\n* @param\tmixed\tthe limit clause\n* @param\tbool\n* @return\tmixed\n*/', 'function_name': 'delete'}, {'className': '', 'params': "$table = ''", 'extends': 'CI_DB_driver', 'comments': '/**\n* DB Prefix\n*\n* Prepends a database prefix if one exists in configuration\n*\n* @param\tstring\tthe table\n* @return\tstring\n*/', 'function_name': 'dbprefix'}, {'className': '', 'params': "$prefix = ''", 'extends': 'CI_DB_driver', 'comments': "/**\n* Set DB Prefix\n*\n* Set's the DB Prefix to something new without needing to reconnect\n*\n* @param\tstring\tthe prefix\n* @return\tstring\n*/", 'function_name': 'set_dbprefix'}, {'className': '', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Start Cache\n*\n* Starts QB caching\n*\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'start_cache'}, {'className': '', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Stop Cache\n*\n* Stops QB caching\n*\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'stop_cache'}, {'className': '', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Flush Cache\n*\n* Empties the QB cache\n*\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'flush_cache'}, {'className': '', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Reset Query Builder values.\n*\n* Publicly-visible method to reset the QB values.\n*\n* @return\tCI_DB_query_builder\n*/', 'function_name': 'reset_query'}]
[{'className': 'CI_DB_result', 'params': '&$driver_object', 'extends': '', 'comments': '/**\n* Constructor\n*\n* @param\tobject\t$driver_object\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_result', 'params': '', 'extends': '', 'comments': '/**\n* Number of rows in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_rows'}, {'className': 'CI_DB_result', 'params': "$type = 'object'", 'extends': '', 'comments': "/**\n* Query result. Acts as a wrapper function for the following functions.\n*\n* @param\tstring\t$type\t'object', 'array' or a custom class name\n* @return\tarray\n*/", 'function_name': 'result'}, {'className': 'CI_DB_result', 'params': '$class_name', 'extends': '', 'comments': '/**\n* Custom query result.\n*\n* @param\tstring\t$class_name\n* @return\tarray\n*/', 'function_name': 'custom_result_object'}, {'className': 'CI_DB_result', 'params': '', 'extends': '', 'comments': '/**\n* Query result. "object" version.\n*\n* @return\tarray\n*/', 'function_name': 'result_object'}, {'className': 'CI_DB_result', 'params': '', 'extends': '', 'comments': '/**\n* Query result. "array" version.\n*\n* @return\tarray\n*/', 'function_name': 'result_array'}, {'className': 'CI_DB_result', 'params': "$n = 0, $type = 'object'", 'extends': '', 'comments': "/**\n* Row\n*\n* A wrapper method.\n*\n* @param\tmixed\t$n\n* @param\tstring\t$type\t'object' or 'array'\n* @return\tmixed\n*/", 'function_name': 'row'}, {'className': 'CI_DB_result', 'params': '$key, $value = NULL', 'extends': '', 'comments': '/**\n* Assigns an item into a particular column slot\n*\n* @param\tmixed\t$key\n* @param\tmixed\t$value\n* @return\tvoid\n*/', 'function_name': 'set_row'}, {'className': 'CI_DB_result', 'params': '$n, $type', 'extends': '', 'comments': '/**\n* Returns a single result row - custom object version\n*\n* @param\tint\t$n\n* @param\tstring\t$type\n* @return\tobject\n*/', 'function_name': 'custom_row_object'}, {'className': 'CI_DB_result', 'params': '$n = 0', 'extends': '', 'comments': '/**\n* Returns a single result row - object version\n*\n* @param\tint\t$n\n* @return\tobject\n*/', 'function_name': 'row_object'}, {'className': 'CI_DB_result', 'params': '$n = 0', 'extends': '', 'comments': '/**\n* Returns a single result row - array version\n*\n* @param\tint\t$n\n* @return\tarray\n*/', 'function_name': 'row_array'}, {'className': 'CI_DB_result', 'params': "$type = 'object'", 'extends': '', 'comments': '/**\n* Returns the "first" row\n*\n* @param\tstring\t$type\n* @return\tmixed\n*/', 'function_name': 'first_row'}, {'className': 'CI_DB_result', 'params': "$type = 'object'", 'extends': '', 'comments': '/**\n* Returns the "last" row\n*\n* @param\tstring\t$type\n* @return\tmixed\n*/', 'function_name': 'last_row'}, {'className': 'CI_DB_result', 'params': "$type = 'object'", 'extends': '', 'comments': '/**\n* Returns the "next" row\n*\n* @param\tstring\t$type\n* @return\tmixed\n*/', 'function_name': 'next_row'}, {'className': 'CI_DB_result', 'params': "$type = 'object'", 'extends': '', 'comments': '/**\n* Returns the "previous" row\n*\n* @param\tstring\t$type\n* @return\tmixed\n*/', 'function_name': 'previous_row'}, {'className': 'CI_DB_result', 'params': "$type = 'object'", 'extends': '', 'comments': "/**\n* Returns an unbuffered row and move pointer to next row\n*\n* @param\tstring\t$type\t'array', 'object' or a custom class name\n* @return\tmixed\n*/", 'function_name': 'unbuffered_row'}, {'className': 'CI_DB_result', 'params': '', 'extends': '', 'comments': '/**\n* Number of fields in the result set\n*\n* Overridden by driver result classes.\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_result', 'params': '', 'extends': '', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names.\n*\n* Overridden by driver result classes.\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_result', 'params': '', 'extends': '', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data.\n*\n* Overridden by driver result classes.\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_result', 'params': '', 'extends': '', 'comments': '/**\n* Free the result\n*\n* Overridden by driver result classes.\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}, {'className': 'CI_DB_result', 'params': '$n = 0', 'extends': '', 'comments': '/**\n* Data Seek\n*\n* Moves the internal pointer to the desired offset. We call\n* this internally before fetching results to make sure the\n* result set starts at zero.\n*\n* Overridden by driver result classes.\n*\n* @param\tint\t$n\n* @return\tbool\n*/', 'function_name': 'data_seek'}]
[{'className': '', 'params': '&$db', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @param\tobject\t&$db\tDatabase object\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* List databases\n*\n* @return\tarray\n*/', 'function_name': 'list_databases'}, {'className': '', 'params': '$database_name', 'extends': '', 'comments': '/**\n* Determine if a particular database exists\n*\n* @param\tstring\t$database_name\n* @return\tbool\n*/', 'function_name': 'database_exists'}, {'className': '', 'params': '$table_name', 'extends': '', 'comments': '/**\n* Optimize Table\n*\n* @param\tstring\t$table_name\n* @return\tmixed\n*/', 'function_name': 'optimize_table'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Optimize Database\n*\n* @return\tmixed\n*/', 'function_name': 'optimize_database'}, {'className': '', 'params': '$table_name', 'extends': '', 'comments': '/**\n* Repair Table\n*\n* @param\tstring\t$table_name\n* @return\tmixed\n*/', 'function_name': 'repair_table'}, {'className': '', 'params': 'CI_DB_result $query, $delim = \',\', $newline = "\\n", $enclosure = \'"\'', 'extends': '', 'comments': '/**\n* Generate CSV from a query result object\n*\n* @param\tobject\t$query\t\tQuery result object\n* @param\tstring\t$delim\t\tDelimiter (default: ,)\n* @param\tstring\t$newline\tNewline character (default: \\n)\n* @param\tstring\t$enclosure\tEnclosure (default: ")\n* @return\tstring\n*/', 'function_name': 'csv_from_result'}, {'className': '', 'params': 'CI_DB_result $query, $params = array()', 'extends': '', 'comments': '/**\n* Generate XML data from a query result object\n*\n* @param\tobject\t$query\tQuery result object\n* @param\tarray\t$params\tAny preferences\n* @return\tstring\n*/', 'function_name': 'xml_from_result(CI_DB_result $query, $params = array'}, {'className': '', 'params': '$params = array()', 'extends': '', 'comments': '/**\n* Database Backup\n*\n* @param\tarray\t$params\n* @return\tstring\n*/', 'function_name': 'backup($params = array'}]
[{'className': 'CI_DB_cubrid_driver', 'params': '$params', 'extends': 'CI_DB', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_cubrid_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Non-persistent database connection\n*\n* @param\tbool\t$persistent\n* @return\tresource\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_cubrid_driver', 'params': '', 'extends': 'CI_DB', 'comments': "/**\n* Reconnect\n*\n* Keep / reestablish the db connection if no queries have been\n* sent for a length of time exceeding the server's idle timeout\n*\n* @return\tvoid\n*/", 'function_name': 'reconnect'}, {'className': 'CI_DB_cubrid_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_cubrid_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_cubrid_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* @return\tint\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_cubrid_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_cubrid_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_cubrid_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of rows in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_rows'}, {'className': 'CI_DB_cubrid_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_cubrid_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_cubrid_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_cubrid_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}, {'className': 'CI_DB_cubrid_result', 'params': '$n = 0', 'extends': 'the', 'comments': '/**\n* Data Seek\n*\n* Moves the internal pointer to the desired offset. We call\n* this internally before fetching results to make sure the\n* result set starts at zero.\n*\n* @param\tint\t$n\n* @return\tbool\n*/', 'function_name': 'data_seek'}]
[{'className': 'CI_DB_cubrid_utility', 'params': '', 'extends': 'CI_DB_utility', 'comments': '/**\n* List databases\n*\n* @return\tarray\n*/', 'function_name': 'list_databases'}]
[{'className': 'CI_DB_ibase_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Non-persistent database connection\n*\n* @param\tbool\t$persistent\n* @return\tresource\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_ibase_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_ibase_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_ibase_driver', 'params': '$generator_name, $inc_by = 0', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* @param\tstring\t$generator_name\n* @param\tint\t$inc_by\n* @return\tint\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_ibase_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_ibase_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': 'CI_DB_ibase_forge', 'params': '$db_name', 'extends': 'CI_DB_forge', 'comments': '/**\n* Create database\n*\n* @param\tstring\t$db_name\n* @return\tbool\n*/', 'function_name': 'create_database'}, {'className': 'CI_DB_ibase_forge', 'params': '$db_name', 'extends': 'CI_DB_forge', 'comments': '/**\n* Drop database\n*\n* @param\tstring\t$db_name\t(ignored)\n* @return\tbool\n*/', 'function_name': 'drop_database'}]
[{'className': 'CI_DB_ibase_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_ibase_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_ibase_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_ibase_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_mssql_driver', 'params': '$params', 'extends': 'CI_DB', 'comments': '/**\n* Class constructor\n*\n* Appends the port number to the hostname, if needed.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_mssql_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Non-persistent database connection\n*\n* @param\tbool\t$persistent\n* @return\tresource\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_mssql_driver', 'params': "$database = ''", 'extends': 'CI_DB', 'comments': '/**\n* Select the database\n*\n* @param\tstring\t$database\n* @return\tbool\n*/', 'function_name': 'db_select'}, {'className': 'CI_DB_mssql_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_mssql_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* Returns the last id created in the Identity column.\n*\n* @return\tstring\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_mssql_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_mssql_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_mssql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of rows in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_rows'}, {'className': 'CI_DB_mssql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_mssql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_mssql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_mssql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}, {'className': 'CI_DB_mssql_result', 'params': '$n = 0', 'extends': 'the', 'comments': '/**\n* Data Seek\n*\n* Moves the internal pointer to the desired offset. We call\n* this internally before fetching results to make sure the\n* result set starts at zero.\n*\n* @param\tint\t$n\n* @return\tbool\n*/', 'function_name': 'data_seek'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_mysql_driver', 'params': '$params', 'extends': 'CI_DB', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_mysql_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Non-persistent database connection\n*\n* @param\tbool\t$persistent\n* @return\tresource\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_mysql_driver', 'params': '', 'extends': 'CI_DB', 'comments': "/**\n* Reconnect\n*\n* Keep / reestablish the db connection if no queries have been\n* sent for a length of time exceeding the server's idle timeout\n*\n* @return\tvoid\n*/", 'function_name': 'reconnect'}, {'className': 'CI_DB_mysql_driver', 'params': "$database = ''", 'extends': 'CI_DB', 'comments': '/**\n* Select the database\n*\n* @param\tstring\t$database\n* @return\tbool\n*/', 'function_name': 'db_select'}, {'className': 'CI_DB_mysql_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_mysql_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_mysql_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* @return\tint\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_mysql_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_mysql_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_mysql_result', 'params': '&$driver_object', 'extends': 'the', 'comments': '/**\n* Class constructor\n*\n* @param\tobject\t&$driver_object\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_mysql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of rows in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_rows'}, {'className': 'CI_DB_mysql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_mysql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_mysql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_mysql_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}, {'className': 'CI_DB_mysql_result', 'params': '$n = 0', 'extends': 'the', 'comments': '/**\n* Data Seek\n*\n* Moves the internal pointer to the desired offset. We call\n* this internally before fetching results to make sure the\n* result set starts at zero.\n*\n* @param\tint\t$n\n* @return\tbool\n*/', 'function_name': 'data_seek'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_mysqli_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Database connection\n*\n* @param\tbool\t$persistent\n* @return\tobject\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_mysqli_driver', 'params': '', 'extends': 'CI_DB', 'comments': "/**\n* Reconnect\n*\n* Keep / reestablish the db connection if no queries have been\n* sent for a length of time exceeding the server's idle timeout\n*\n* @return\tvoid\n*/", 'function_name': 'reconnect'}, {'className': 'CI_DB_mysqli_driver', 'params': "$database = ''", 'extends': 'CI_DB', 'comments': '/**\n* Select the database\n*\n* @param\tstring\t$database\n* @return\tbool\n*/', 'function_name': 'db_select'}, {'className': 'CI_DB_mysqli_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_mysqli_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_mysqli_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* @return\tint\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_mysqli_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_mysqli_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_mysqli_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of rows in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_rows'}, {'className': 'CI_DB_mysqli_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_mysqli_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_mysqli_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_mysqli_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}, {'className': 'CI_DB_mysqli_result', 'params': '$n = 0', 'extends': 'the', 'comments': '/**\n* Data Seek\n*\n* Moves the internal pointer to the desired offset. We call\n* this internally before fetching results to make sure the\n* result set starts at zero.\n*\n* @param\tint\t$n\n* @return\tbool\n*/', 'function_name': 'data_seek'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_oci8_driver', 'params': '$params', 'extends': 'CI_DB', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_oci8_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Non-persistent database connection\n*\n* @param\tbool\t$persistent\n* @return\tresource\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_oci8_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_oci8_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Get cursor. Returns a cursor from the database\n*\n* @return\tresource\n*/', 'function_name': 'get_cursor'}, {'className': 'CI_DB_oci8_driver', 'params': '$package, $procedure, array $params', 'extends': 'CI_DB', 'comments': '/**\n* Stored Procedure.  Executes a stored procedure\n*\n* @param\tstring\tpackage name in which the stored procedure is in\n* @param\tstring\tstored procedure name to execute\n* @param\tarray\tparameters\n* @return\tmixed\n*\n* params array keys\n*\n* KEY      OPTIONAL  NOTES\n* name     no        the name of the parameter should be in :<param_name> format\n* value    no        the value of the parameter.  If this is an OUT or IN OUT parameter,\n*                    this should be a reference to a variable\n* type     yes       the type of the parameter\n* length   yes       the max size of the parameter\n*/', 'function_name': 'stored_procedure'}, {'className': 'CI_DB_oci8_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_oci8_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* @return\tint\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_oci8_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_oci8_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_oci8_result', 'params': '&$driver_object', 'extends': 'the', 'comments': '/**\n* Class constructor\n*\n* @param\tobject\t&$driver_object\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_oci8_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_oci8_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_oci8_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_oci8_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_odbc_driver', 'params': '$params', 'extends': 'CI_DB_driver', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_odbc_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB_driver', 'comments': '/**\n* Non-persistent database connection\n*\n* @param\tbool\t$persistent\n* @return\tresource\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_odbc_driver', 'params': '$sql, $binds', 'extends': 'CI_DB_driver', 'comments': '/**\n* Compile Bindings\n*\n* @param\tstring\t$sql\tSQL statement\n* @param\tarray\t$binds\tAn array of values to bind\n* @return\tstring\n*/', 'function_name': 'compile_binds'}, {'className': 'CI_DB_odbc_driver', 'params': '$sql', 'extends': 'CI_DB_driver', 'comments': '/**\n* Determines if a query is a "write" type.\n*\n* @param\tstring\tAn SQL query string\n* @return\tbool\n*/', 'function_name': 'is_write_type'}, {'className': 'CI_DB_odbc_driver', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_odbc_driver', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Insert ID\n*\n* @return\tbool\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_odbc_driver', 'params': '', 'extends': 'CI_DB_driver', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_odbc_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of rows in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_rows'}, {'className': 'CI_DB_odbc_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_odbc_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_odbc_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_odbc_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}, {'className': 'CI_DB_odbc_result', 'params': '&$result, $rownumber = 1', 'extends': 'the', 'comments': '/**\n* ODBC Fetch array\n*\n* Emulates the native odbc_fetch_array() function when\n* it is not available (odbc_fetch_array() requires unixODBC)\n*\n* @param\tresource\t&$result\n* @param\tint\t\t$rownumber\n* @return\tarray\n*/', 'function_name': 'odbc_fetch_array'}, {'className': 'CI_DB_odbc_result', 'params': '&$result, $rownumber = 1', 'extends': 'the', 'comments': '/**\n* ODBC Fetch object\n*\n* Emulates the native odbc_fetch_object() function when\n* it is not available.\n*\n* @param\tresource\t&$result\n* @param\tint\t\t$rownumber\n* @return\tobject\n*/', 'function_name': 'odbc_fetch_object'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_driver', 'params': '$params', 'extends': 'CI_DB', 'comments': '/**\n* Class constructor\n*\n* Validates the DSN string and/or detects the subdriver.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Database connection\n*\n* @param\tbool\t$persistent\n* @return\tobject\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_pdo_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_pdo_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_pdo_driver', 'params': '$name = NULL', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* @param\tstring\t$name\n* @return\tint\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_pdo_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of rows in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_rows'}, {'className': 'CI_DB_pdo_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_pdo_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tbool\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_pdo_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_pdo_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_4d_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_cubrid_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_cubrid_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_dblib_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_dblib_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Database connection\n*\n* @param\tbool\t$persistent\n* @return\tobject\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_pdo_dblib_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_pdo_dblib_driver', 'params': '', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Database version number\n*\n* @return      string\n*/', 'function_name': 'version'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_firebird_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_firebird_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}]
[{'className': 'CI_DB_pdo_firebird_forge', 'params': '$db_name', 'extends': 'CI_DB_pdo_forge', 'comments': '/**\n* Create database\n*\n* @param\tstring\t$db_name\n* @return\tstring\n*/', 'function_name': 'create_database'}, {'className': 'CI_DB_pdo_firebird_forge', 'params': '$db_name', 'extends': 'CI_DB_pdo_forge', 'comments': '/**\n* Drop database\n*\n* @param\tstring\t$db_name\t(ignored)\n* @return\tbool\n*/', 'function_name': 'drop_database'}]
[{'className': 'CI_DB_pdo_ibm_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_ibm_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_informix_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_informix_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_mysql_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_mysql_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Database connection\n*\n* @param\tbool\t$persistent\n* @return\tobject\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_pdo_mysql_driver', 'params': "$database = ''", 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Select the database\n*\n* @param\tstring\t$database\n* @return\tbool\n*/', 'function_name': 'db_select'}, {'className': 'CI_DB_pdo_mysql_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_oci_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_oci_driver', 'params': '', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_pdo_oci_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_odbc_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_odbc_driver', 'params': '$sql', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Determines if a query is a "write" type.\n*\n* @param\tstring\tAn SQL query string\n* @return\tbool\n*/', 'function_name': 'is_write_type'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_pdo_pgsql_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_pgsql_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Database connection\n*\n* @param\tbool\t$persistent\n* @return\tobject\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_pdo_pgsql_driver', 'params': '$name = NULL', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Insert ID\n*\n* @param\tstring\t$name\n* @return\tint\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_pdo_pgsql_driver', 'params': '$sql', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Determines if a query is a "write" type.\n*\n* @param\tstring\tAn SQL query string\n* @return\tbool\n*/', 'function_name': 'is_write_type'}, {'className': 'CI_DB_pdo_pgsql_driver', 'params': '$str', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* "Smart" Escape String\n*\n* Escapes data based on type\n*\n* @param\tstring\t$str\n* @return\tmixed\n*/', 'function_name': 'escape'}, {'className': 'CI_DB_pdo_pgsql_driver', 'params': "$orderby, $direction = '', $escape = NULL", 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* ORDER BY\n*\n* @param\tstring\t$orderby\n* @param\tstring\t$direction\tASC, DESC or RANDOM\n* @param\tbool\t$escape\n* @return\tobject\n*/', 'function_name': 'order_by'}, {'className': 'CI_DB_pdo_pgsql_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}]
[{'className': 'CI_DB_pdo_pgsql_forge', 'params': '&$db', 'extends': 'CI_DB_pdo_forge', 'comments': '/**\n* Class constructor\n*\n* @param\tobject\t&$db\tDatabase object\n* @return\tvoid\n*/', 'function_name': '__construct'}]
[{'className': 'CI_DB_pdo_sqlite_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_sqlite_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Fetch Field Names\n*\n* @param\tstring\t$table\tTable name\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_pdo_sqlite_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}]
[{'className': 'CI_DB_pdo_sqlite_forge', 'params': '&$db', 'extends': 'CI_DB_pdo_forge', 'comments': '/**\n* Class constructor\n*\n* @param\tobject\t&$db\tDatabase object\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_sqlite_forge', 'params': '$db_name', 'extends': 'CI_DB_pdo_forge', 'comments': '/**\n* Create database\n*\n* @param\tstring\t$db_name\t(ignored)\n* @return\tbool\n*/', 'function_name': 'create_database'}, {'className': 'CI_DB_pdo_sqlite_forge', 'params': '$db_name', 'extends': 'CI_DB_pdo_forge', 'comments': '/**\n* Drop database\n*\n* @param\tstring\t$db_name\t(ignored)\n* @return\tbool\n*/', 'function_name': 'drop_database'}]
[{'className': 'CI_DB_pdo_sqlsrv_driver', 'params': '$params', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Class constructor\n*\n* Builds the DSN if not already set.\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_pdo_sqlsrv_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Database connection\n*\n* @param\tbool\t$persistent\n* @return\tobject\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_pdo_sqlsrv_driver', 'params': '$table', 'extends': 'CI_DB_pdo_driver', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_postgre_driver', 'params': '$params', 'extends': 'CI_DB', 'comments': '/**\n* Class constructor\n*\n* Creates a DSN string to be used for db_connect() and db_pconnect()\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_postgre_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Database connection\n*\n* @param\tbool\t$persistent\n* @return\tresource\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_postgre_driver', 'params': '', 'extends': 'CI_DB', 'comments': "/**\n* Reconnect\n*\n* Keep / reestablish the db connection if no queries have been\n* sent for a length of time exceeding the server's idle timeout\n*\n* @return\tvoid\n*/", 'function_name': 'reconnect'}, {'className': 'CI_DB_postgre_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_postgre_driver', 'params': '$sql', 'extends': 'CI_DB', 'comments': '/**\n* Determines if a query is a "write" type.\n*\n* @param\tstring\tAn SQL query string\n* @return\tbool\n*/', 'function_name': 'is_write_type'}, {'className': 'CI_DB_postgre_driver', 'params': '$str', 'extends': 'CI_DB', 'comments': '/**\n* "Smart" Escape String\n*\n* Escapes data based on type\n*\n* @param\tstring\t$str\n* @return\tmixed\n*/', 'function_name': 'escape'}, {'className': 'CI_DB_postgre_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_postgre_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* @return\tstring\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_postgre_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_postgre_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}, {'className': 'CI_DB_postgre_driver', 'params': "$orderby, $direction = '', $escape = NULL", 'extends': 'CI_DB', 'comments': '/**\n* ORDER BY\n*\n* @param\tstring\t$orderby\n* @param\tstring\t$direction\tASC, DESC or RANDOM\n* @param\tbool\t$escape\n* @return\tobject\n*/', 'function_name': 'order_by'}]
[{'className': 'CI_DB_postgre_forge', 'params': '&$db', 'extends': 'CI_DB_forge', 'comments': '/**\n* Class constructor\n*\n* @param\tobject\t&$db\tDatabase object\n* @return\tvoid\n*/', 'function_name': '__construct'}]
[{'className': 'CI_DB_postgre_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of rows in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_rows'}, {'className': 'CI_DB_postgre_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_postgre_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_postgre_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_postgre_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}, {'className': 'CI_DB_postgre_result', 'params': '$n = 0', 'extends': 'the', 'comments': '/**\n* Data Seek\n*\n* Moves the internal pointer to the desired offset. We call\n* this internally before fetching results to make sure the\n* result set starts at zero.\n*\n* @param\tint\t$n\n* @return\tbool\n*/', 'function_name': 'data_seek'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_sqlite3_driver', 'params': '$persistent = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Non-persistent database connection\n*\n* @param\tbool\t$persistent\n* @return\tSQLite3\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_sqlite3_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_sqlite3_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_sqlite3_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* @return\tint\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_sqlite3_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Fetch Field Names\n*\n* @param\tstring\t$table\tTable name\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_sqlite3_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_sqlite3_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': 'CI_DB_sqlite3_forge', 'params': '&$db', 'extends': 'CI_DB_forge', 'comments': '/**\n* Class constructor\n*\n* @param\tobject\t&$db\tDatabase object\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_sqlite3_forge', 'params': '$db_name', 'extends': 'CI_DB_forge', 'comments': '/**\n* Create database\n*\n* @param\tstring\t$db_name\n* @return\tbool\n*/', 'function_name': 'create_database'}, {'className': 'CI_DB_sqlite3_forge', 'params': '$db_name', 'extends': 'CI_DB_forge', 'comments': '/**\n* Drop database\n*\n* @param\tstring\t$db_name\t(ignored)\n* @return\tbool\n*/', 'function_name': 'drop_database'}]
[{'className': 'CI_DB_sqlite3_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_sqlite3_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_sqlite3_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_sqlite3_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}, {'className': 'CI_DB_sqlite3_result', 'params': '$n = 0', 'extends': 'the', 'comments': '/**\n* Data Seek\n*\n* Moves the internal pointer to the desired offset. We call\n* this internally before fetching results to make sure the\n* result set starts at zero.\n*\n* @param\tint\t$n\t(ignored)\n* @return\tarray\n*/', 'function_name': 'data_seek'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_sqlsrv_driver', 'params': '$params', 'extends': 'CI_DB', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_sqlsrv_driver', 'params': '$pooling = FALSE', 'extends': 'CI_DB', 'comments': '/**\n* Database connection\n*\n* @param\tbool\t$pooling\n* @return\tresource\n*/', 'function_name': 'db_connect'}, {'className': 'CI_DB_sqlsrv_driver', 'params': "$database = ''", 'extends': 'CI_DB', 'comments': '/**\n* Select the database\n*\n* @param\tstring\t$database\n* @return\tbool\n*/', 'function_name': 'db_select'}, {'className': 'CI_DB_sqlsrv_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Affected Rows\n*\n* @return\tint\n*/', 'function_name': 'affected_rows'}, {'className': 'CI_DB_sqlsrv_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Insert ID\n*\n* Returns the last id created in the Identity column.\n*\n* @return\tstring\n*/', 'function_name': 'insert_id'}, {'className': 'CI_DB_sqlsrv_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Database version number\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_DB_sqlsrv_driver', 'params': '$table', 'extends': 'CI_DB', 'comments': '/**\n* Returns an object with field data\n*\n* @param\tstring\t$table\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_sqlsrv_driver', 'params': '', 'extends': 'CI_DB', 'comments': '/**\n* Error\n*\n* Returns an array containing code and message of the last\n* database error that has occurred.\n*\n* @return\tarray\n*/', 'function_name': 'error'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'CI_DB_sqlsrv_result', 'params': '&$driver_object', 'extends': 'the', 'comments': '/**\n* Constructor\n*\n* @param\tobject\t$driver_object\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_DB_sqlsrv_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of rows in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_rows'}, {'className': 'CI_DB_sqlsrv_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Number of fields in the result set\n*\n* @return\tint\n*/', 'function_name': 'num_fields'}, {'className': 'CI_DB_sqlsrv_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Fetch Field Names\n*\n* Generates an array of column names\n*\n* @return\tarray\n*/', 'function_name': 'list_fields'}, {'className': 'CI_DB_sqlsrv_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Field data\n*\n* Generates an array of objects containing field meta-data\n*\n* @return\tarray\n*/', 'function_name': 'field_data'}, {'className': 'CI_DB_sqlsrv_result', 'params': '', 'extends': 'the', 'comments': '/**\n* Free the result\n*\n* @return\tvoid\n*/', 'function_name': 'free_result'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': '', 'params': '$item, array $array, $default = NULL', 'extends': '', 'comments': '/**\n* Element\n*\n* Lets you determine whether an array index is set and whether it has a value.\n* If the element is empty it returns NULL (or whatever you specify as the default value.)\n*\n* @param\tstring\n* @param\tarray\n* @param\tmixed\n* @return\tmixed\tdepends on what the array contains\n*/', 'function_name': 'element'}, {'className': '', 'params': '$array', 'extends': '', 'comments': '/**\n* Random Element - Takes an array as input and returns a random element\n*\n* @param\tarray\n* @return\tmixed\tdepends on what the array contains\n*/', 'function_name': 'random_element'}, {'className': '', 'params': '$items, array $array, $default = NULL', 'extends': '', 'comments': '/**\n* Elements\n*\n* Returns only the array items specified. Will return a default value if\n* it is not set.\n*\n* @param\tarray\n* @param\tarray\n* @param\tmixed\n* @return\tmixed\tdepends on what the array contains\n*/', 'function_name': 'elements'}]
[{'className': '', 'params': "$data = '', $img_path = '', $img_url = '', $font_path = ''", 'extends': '', 'comments': '/**\n* Create CAPTCHA\n*\n* @param\tarray\t$data\t\tData for the CAPTCHA\n* @param\tstring\t$img_path\tPath to create the image in (deprecated)\n* @param\tstring\t$img_url\tURL to the CAPTCHA image folder (deprecated)\n* @param\tstring\t$font_path\tServer path to font (deprecated)\n* @return\tstring\n*/', 'function_name': 'create_captcha'}]
[{'className': '', 'params': "$name, $value = '', $expire = 0, $domain = '', $path = '/', $prefix = '', $secure = NULL, $httponly = NULL", 'extends': '', 'comments': '/**\n* Set cookie\n*\n* Accepts seven parameters, or you can submit an associative\n* array in the first parameter containing all the values.\n*\n* @param\tmixed\n* @param\tstring\tthe value of the cookie\n* @param\tint\tthe number of seconds until expiration\n* @param\tstring\tthe cookie domain.  Usually:  .yourdomain.com\n* @param\tstring\tthe cookie path\n* @param\tstring\tthe cookie prefix\n* @param\tbool\ttrue makes the cookie secure\n* @param\tbool\ttrue makes the cookie accessible via http(s) only (no javascript)\n* @return\tvoid\n*/', 'function_name': 'set_cookie'}, {'className': '', 'params': '$index, $xss_clean = FALSE', 'extends': '', 'comments': '/**\n* Fetch an item from the COOKIE array\n*\n* @param\tstring\n* @param\tbool\n* @return\tmixed\n*/', 'function_name': 'get_cookie'}, {'className': '', 'params': "$name, $domain = '', $path = '/', $prefix = ''", 'extends': '', 'comments': '/**\n* Delete a COOKIE\n*\n* @param\tmixed\n* @param\tstring\tthe cookie domain. Usually: .yourdomain.com\n* @param\tstring\tthe cookie path\n* @param\tstring\tthe cookie prefix\n* @return\tvoid\n*/', 'function_name': 'delete_cookie'}]
[{'className': '', 'params': '$timezone = NULL', 'extends': '', 'comments': '/**\n* Get "now" time\n*\n* Returns time() based on the timezone parameter or on the\n* "time_reference" setting\n*\n* @param\tstring\n* @return\tint\n*/', 'function_name': 'now'}, {'className': '', 'params': "$datestr = '', $time = ''", 'extends': '', 'comments': "/**\n* Convert MySQL Style Datecodes\n*\n* This function is identical to PHPs date() function,\n* except that it allows date codes to be formatted using\n* the MySQL style, where each code letter is preceded\n* with a percent sign:  %Y %m %d etc...\n*\n* The benefit of doing dates this way is that you don't\n* have to worry about escaping your text letters that\n* match the date codes.\n*\n* @param\tstring\n* @param\tint\n* @return\tint\n*/", 'function_name': 'mdate'}, {'className': '', 'params': "$seconds = 1, $time = '', $units = 7", 'extends': '', 'comments': '/**\n* Timespan\n*\n* Returns a span of seconds in this format:\n*\t10 days 14 hours 36 minutes 47 seconds\n*\n* @param\tint\ta number of seconds\n* @param\tint\tUnix timestamp\n* @param\tint\ta number of display units\n* @return\tstring\n*/', 'function_name': 'timespan'}, {'className': '', 'params': "$month = 0, $year = ''", 'extends': '', 'comments': '/**\n* Number of days in a month\n*\n* Takes a month/year as input and returns the number of days\n* for the given month/year. Takes leap years into consideration.\n*\n* @param\tint\ta numeric month\n* @param\tint\ta numeric year\n* @return\tint\n*/', 'function_name': 'days_in_month'}, {'className': '', 'params': "$time = ''", 'extends': '', 'comments': '/**\n* Converts a local Unix timestamp to GMT\n*\n* @param\tint\tUnix timestamp\n* @return\tint\n*/', 'function_name': 'local_to_gmt'}, {'className': '', 'params': "$time = '', $timezone = 'UTC', $dst = FALSE", 'extends': '', 'comments': '/**\n* Converts GMT time to a localized value\n*\n* Takes a Unix timestamp (in GMT) as input, and returns\n* at the local value based on the timezone and DST setting\n* submitted\n*\n* @param\tint\tUnix timestamp\n* @param\tstring\ttimezone\n* @param\tbool\twhether DST is active\n* @return\tint\n*/', 'function_name': 'gmt_to_local'}, {'className': '', 'params': "$time = ''", 'extends': '', 'comments': '/**\n* Converts a MySQL Timestamp to Unix\n*\n* @param\tint\tMySQL timestamp YYYY-MM-DD HH:MM:SS\n* @return\tint\tUnix timstamp\n*/', 'function_name': 'mysql_to_unix'}, {'className': '', 'params': "$time = '', $seconds = FALSE, $fmt = 'us'", 'extends': '', 'comments': '/**\n* Unix to "Human"\n*\n* Formats Unix timestamp to the following prototype: 2006-08-21 11:35 PM\n*\n* @param\tint\tUnix timestamp\n* @param\tbool\twhether to show seconds\n* @param\tstring\tformat: us or euro\n* @return\tstring\n*/', 'function_name': 'unix_to_human'}, {'className': '', 'params': "$datestr = ''", 'extends': '', 'comments': '/**\n* Convert "human" date to GMT\n*\n* Reverses the above process\n*\n* @param\tstring\tformat: us or euro\n* @return\tint\n*/', 'function_name': 'human_to_unix'}, {'className': '', 'params': "$bad_date = '', $format = FALSE", 'extends': '', 'comments': '/**\n* Turns many "reasonably-date-like" strings into something\n* that is actually useful. This only works for dates after unix epoch.\n*\n* @deprecated\t3.1.3\tUse DateTime::createFromFormat($input_format, $input)->format($output_format);\n* @param\tstring\tThe terribly formatted date-like string\n* @param\tstring\tDate format to return (same as php date function)\n* @return\tstring\n*/', 'function_name': 'nice_date'}, {'className': '', 'params': "$default = 'UTC', $class = '', $name = 'timezones', $attributes = ''", 'extends': '', 'comments': '/**\n* Timezone Menu\n*\n* Generates a drop-down menu of timezones.\n*\n* @param\tstring\ttimezone\n* @param\tstring\tclassname\n* @param\tstring\tmenu name\n* @param\tmixed\tattributes\n* @return\tstring\n*/', 'function_name': 'timezone_menu'}, {'className': '', 'params': "$tz = ''", 'extends': '', 'comments': '/**\n* Timezones\n*\n* Returns an array of timezones. This is a helper function\n* for various other ones in this library\n*\n* @param\tstring\ttimezone\n* @return\tstring\n*/', 'function_name': 'timezones'}, {'className': '', 'params': "$unix_start = '', $mixed = '', $is_unix = TRUE, $format = 'Y-m-d'", 'extends': '', 'comments': "/**\n* Date range\n*\n* Returns a list of dates within a specified period.\n*\n* @param\tint\tunix_start\tUNIX timestamp of period start date\n* @param\tint\tunix_end|days\tUNIX timestamp of period end date\n*\t\t\t\t\tor interval in days.\n* @param\tmixed\tis_unix\t\tSpecifies whether the second parameter\n*\t\t\t\t\tis a UNIX timestamp or a day interval\n*\t\t\t\t\t - TRUE or 'unix' for a timestamp\n*\t\t\t\t\t - FALSE or 'days' for an interval\n* @param\tstring  date_format\tOutput date format, same as in date()\n* @return\tarray\n*/", 'function_name': 'date_range'}]
[{'className': '', 'params': '$source_dir, $directory_depth = 0, $hidden = FALSE', 'extends': '', 'comments': '/**\n* Create a Directory Map\n*\n* Reads the specified directory and builds an array\n* representation of it. Sub-folders contained with the\n* directory will be mapped as well.\n*\n* @param\tstring\t$source_dir\t\tPath to source\n* @param\tint\t$directory_depth\tDepth of directories to traverse\n*\t\t\t\t\t\t(0 = fully recursive, 1 = current dir, etc)\n* @param\tbool\t$hidden\t\t\tWhether to show hidden files\n* @return\tarray\n*/', 'function_name': 'directory_map'}]
[{'className': '', 'params': "$filename = '', $data = '', $set_mime = FALSE", 'extends': '', 'comments': '/**\n* Force Download\n*\n* Generates headers that force a download to happen\n*\n* @param\tmixed\tfilename (or an array of local file path => destination filename)\n* @param\tmixed\tthe data to be downloaded\n* @param\tbool\twhether to try and send the actual file MIME type\n* @return\tvoid\n*/', 'function_name': 'force_download'}]
[{'className': '', 'params': "$path, $data, $mode = 'wb'", 'extends': '', 'comments': "/**\n* Write File\n*\n* Writes data to the file specified in the path.\n* Creates a new file if non-existent.\n*\n* @param\tstring\t$path\tFile path\n* @param\tstring\t$data\tData to write\n* @param\tstring\t$mode\tfopen() mode (default: 'wb')\n* @return\tbool\n*/", 'function_name': 'write_file'}, {'className': '', 'params': '$path, $del_dir = FALSE, $htdocs = FALSE, $_level = 0', 'extends': '', 'comments': '/**\n* Delete Files\n*\n* Deletes all files contained in the supplied directory path.\n* Files must be writable or owned by the system in order to be deleted.\n* If the second parameter is set to TRUE, any directories contained\n* within the supplied base directory will be nuked as well.\n*\n* @param\tstring\t$path\t\tFile path\n* @param\tbool\t$del_dir\tWhether to delete any directories found in the path\n* @param\tbool\t$htdocs\t\tWhether to skip deleting .htaccess and index page files\n* @param\tint\t$_level\t\tCurrent directory depth level (default: 0; internal use only)\n* @return\tbool\n*/', 'function_name': 'delete_files'}, {'className': '', 'params': '$source_dir, $include_path = FALSE, $_recursion = FALSE', 'extends': '', 'comments': '/**\n* Get Filenames\n*\n* Reads the specified directory and builds an array containing the filenames.\n* Any sub-folders contained within the specified path are read as well.\n*\n* @param\tstring\tpath to source\n* @param\tbool\twhether to include the path as part of the filename\n* @param\tbool\tinternal variable to determine recursion status - do not use in calls\n* @return\tarray\n*/', 'function_name': 'get_filenames'}, {'className': '', 'params': '$source_dir, $top_level_only = TRUE, $_recursion = FALSE', 'extends': '', 'comments': '/**\n* Get Directory File Information\n*\n* Reads the specified directory and builds an array containing the filenames,\n* filesize, dates, and permissions\n*\n* Any sub-folders contained within the specified path are read as well.\n*\n* @param\tstring\tpath to source\n* @param\tbool\tLook only at the top level directory specified?\n* @param\tbool\tinternal variable to determine recursion status - do not use in calls\n* @return\tarray\n*/', 'function_name': 'get_dir_file_info'}, {'className': '', 'params': "$file, $returned_values = array('name', 'server_path', 'size', 'date')", 'extends': '', 'comments': '/**\n* Get File Info\n*\n* Given a file and path, returns the name, path, size, date modified\n* Second parameter allows you to explicitly declare what information you want returned\n* Options are: name, server_path, size, date, readable, writable, executable, fileperms\n* Returns FALSE if the file cannot be found.\n*\n* @param\tstring\tpath to file\n* @param\tmixed\tarray or comma separated string of information returned\n* @return\tarray\n*/', 'function_name': 'get_file_info($file, $returned_values = array'}, {'className': '', 'params': '$filename', 'extends': '', 'comments': "/**\n* Get Mime by Extension\n*\n* Translates a file extension into a mime type based on config/mimes.php.\n* Returns FALSE if it can't determine the type, or open the mime config file\n*\n* Note: this is NOT an accurate way of determining file mime types, and is here strictly as a convenience\n* It should NOT be trusted, and should certainly NOT be used for security\n*\n* @param\tstring\t$filename\tFile name\n* @return\tstring\n*/", 'function_name': 'get_mime_by_extension'}, {'className': '', 'params': '$perms', 'extends': '', 'comments': "/**\n* Symbolic Permissions\n*\n* Takes a numeric value representing a file's permissions and returns\n* standard symbolic notation representing that value\n*\n* @param\tint\t$perms\tPermissions\n* @return\tstring\n*/", 'function_name': 'symbolic_permissions'}, {'className': '', 'params': '$perms', 'extends': '', 'comments': "/**\n* Octal Permissions\n*\n* Takes a numeric value representing a file's permissions and returns\n* a three character string representing the file's octal permissions\n*\n* @param\tint\t$perms\tPermissions\n* @return\tstring\n*/", 'function_name': 'octal_permissions'}]
[{'className': '', 'params': "$action = '', $attributes = array(), $hidden = array()", 'extends': '', 'comments': '/**\n* Form Declaration\n*\n* Creates the opening portion of the form.\n*\n* @param\tstring\tthe URI segments of the form destination\n* @param\tarray\ta key/value pair of attributes\n* @param\tarray\ta key/value pair hidden data\n* @return\tstring\n*/', 'function_name': "form_open($action = '', $attributes = array(), $hidden = array"}, {'className': '', 'params': "$action = '', $attributes = array(), $hidden = array()", 'extends': '', 'comments': '/**\n* Form Declaration - Multipart type\n*\n* Creates the opening portion of the form, but with "multipart/form-data".\n*\n* @param\tstring\tthe URI segments of the form destination\n* @param\tarray\ta key/value pair of attributes\n* @param\tarray\ta key/value pair hidden data\n* @return\tstring\n*/', 'function_name': "form_open_multipart($action = '', $attributes = array(), $hidden = array"}, {'className': '', 'params': "$name, $value = '', $recursing = FALSE", 'extends': '', 'comments': '/**\n* Hidden Input Field\n*\n* Generates hidden fields. You can pass a simple key/value string or\n* an associative array with multiple values.\n*\n* @param\tmixed\t$name\t\tField name\n* @param\tstring\t$value\t\tField value\n* @param\tbool\t$recursing\n* @return\tstring\n*/', 'function_name': 'form_hidden'}, {'className': '', 'params': "$data = '', $value = '', $extra = ''", 'extends': '', 'comments': '/**\n* Text Input Field\n*\n* @param\tmixed\n* @param\tstring\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'form_input'}, {'className': '', 'params': "$data = '', $value = '', $extra = ''", 'extends': '', 'comments': '/**\n* Password Field\n*\n* Identical to the input function but adds the "password" type\n*\n* @param\tmixed\n* @param\tstring\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'form_password'}, {'className': '', 'params': "$data = '', $extra = ''", 'extends': '', 'comments': '/**\n* Upload Field\n*\n* Identical to the input function but adds the "file" type\n*\n* @param\tmixed\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'form_upload'}, {'className': '', 'params': "$data = '', $value = '', $extra = ''", 'extends': '', 'comments': '/**\n* Textarea field\n*\n* @param\tmixed\t$data\n* @param\tstring\t$value\n* @param\tmixed\t$extra\n* @return\tstring\n*/', 'function_name': 'form_textarea'}, {'className': '', 'params': "$name = '', $options = array(), $selected = array(), $extra = ''", 'extends': '', 'comments': '/**\n* Multi-select menu\n*\n* @param\tstring\n* @param\tarray\n* @param\tmixed\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': "form_multiselect($name = '', $options = array(), $selected = array"}, {'className': '', 'params': "$data = '', $options = array(), $selected = array(), $extra = ''", 'extends': '', 'comments': '/**\n* Drop-down Menu\n*\n* @param\tmixed\t$data\n* @param\tmixed\t$options\n* @param\tmixed\t$selected\n* @param\tmixed\t$extra\n* @return\tstring\n*/', 'function_name': "form_dropdown($data = '', $options = array(), $selected = array"}, {'className': '', 'params': "$data = '', $value = '', $checked = FALSE, $extra = ''", 'extends': '', 'comments': '/**\n* Checkbox Field\n*\n* @param\tmixed\n* @param\tstring\n* @param\tbool\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'form_checkbox'}, {'className': '', 'params': "$data = '', $value = '', $checked = FALSE, $extra = ''", 'extends': '', 'comments': '/**\n* Radio Button\n*\n* @param\tmixed\n* @param\tstring\n* @param\tbool\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'form_radio'}, {'className': '', 'params': "$data = '', $value = '', $extra = ''", 'extends': '', 'comments': '/**\n* Submit Button\n*\n* @param\tmixed\n* @param\tstring\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'form_submit'}, {'className': '', 'params': "$data = '', $value = '', $extra = ''", 'extends': '', 'comments': '/**\n* Reset Button\n*\n* @param\tmixed\n* @param\tstring\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'form_reset'}, {'className': '', 'params': "$data = '', $content = '', $extra = ''", 'extends': '', 'comments': '/**\n* Form Button\n*\n* @param\tmixed\n* @param\tstring\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'form_button'}, {'className': '', 'params': "$label_text = '', $id = '', $attributes = array()", 'extends': '', 'comments': '/**\n* Form Label Tag\n*\n* @param\tstring\tThe text to appear onscreen\n* @param\tstring\tThe id the label applies to\n* @param\tmixed\tAdditional attributes\n* @return\tstring\n*/', 'function_name': "form_label($label_text = '', $id = '', $attributes = array"}, {'className': '', 'params': "$legend_text = '', $attributes = array()", 'extends': '', 'comments': '/**\n* Fieldset Tag\n*\n* Used to produce <fieldset><legend>text</legend>.  To close fieldset\n* use form_fieldset_close()\n*\n* @param\tstring\tThe legend text\n* @param\tarray\tAdditional attributes\n* @return\tstring\n*/', 'function_name': "form_fieldset($legend_text = '', $attributes = array"}, {'className': '', 'params': "$extra = ''", 'extends': '', 'comments': '/**\n* Fieldset Close Tag\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'form_fieldset_close'}, {'className': '', 'params': "$extra = ''", 'extends': '', 'comments': '/**\n* Form Close Tag\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'form_close'}, {'className': '', 'params': "$field, $default = '', $html_escape = TRUE", 'extends': '', 'comments': '/**\n* Form Value\n*\n* Grabs a value from the POST array for the specified field so you can\n* re-populate an input field or textarea. If Form Validation\n* is active it retrieves the info from the validation class\n*\n* @param\tstring\t$field\t\tField name\n* @param\tstring\t$default\tDefault value\n* @param\tbool\t$html_escape\tWhether to escape HTML special characters or not\n* @return\tstring\n*/', 'function_name': 'set_value'}, {'className': '', 'params': "$field, $value = '', $default = FALSE", 'extends': '', 'comments': "/**\n* Set Select\n*\n* Let's you set the selected value of a <select> menu via data in the POST array.\n* If Form Validation is active it retrieves the info from the validation class\n*\n* @param\tstring\n* @param\tstring\n* @param\tbool\n* @return\tstring\n*/", 'function_name': 'set_select'}, {'className': '', 'params': "$field, $value = '', $default = FALSE", 'extends': '', 'comments': "/**\n* Set Checkbox\n*\n* Let's you set the selected value of a checkbox via the value in the POST array.\n* If Form Validation is active it retrieves the info from the validation class\n*\n* @param\tstring\n* @param\tstring\n* @param\tbool\n* @return\tstring\n*/", 'function_name': 'set_checkbox'}, {'className': '', 'params': "$field, $value = '', $default = FALSE", 'extends': '', 'comments': "/**\n* Set Radio\n*\n* Let's you set the selected value of a radio field via info in the POST array.\n* If Form Validation is active it retrieves the info from the validation class\n*\n* @param\tstring\t$field\n* @param\tstring\t$value\n* @param\tbool\t$default\n* @return\tstring\n*/", 'function_name': 'set_radio'}, {'className': '', 'params': "$field = '', $prefix = '', $suffix = ''", 'extends': '', 'comments': '/**\n* Form Error\n*\n* Returns the error for a specific form field. This is a helper for the\n* form validation class.\n*\n* @param\tstring\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'form_error'}, {'className': '', 'params': "$prefix = '', $suffix = ''", 'extends': '', 'comments': '/**\n* Validation Error String\n*\n* Returns all the errors associated with a form submission. This is a helper\n* function for the form validation class.\n*\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'validation_errors'}, {'className': '', 'params': '$attributes, $default', 'extends': '', 'comments': '/**\n* Parse the form attributes\n*\n* Helper function used by some of the form helpers\n*\n* @param\tarray\t$attributes\tList of attributes\n* @param\tarray\t$default\tDefault values\n* @return\tstring\n*/', 'function_name': '_parse_form_attributes'}, {'className': '', 'params': '$attributes', 'extends': '', 'comments': '/**\n* Attributes To String\n*\n* Helper function used by some of the form helpers\n*\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': '_attributes_to_string'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Validation Object\n*\n* Determines what the form validation class was instantiated as, fetches\n* the object and returns it.\n*\n* @return\tmixed\n*/', 'function_name': '&_get_validation_object'}]
[{'className': '', 'params': "$data = '', $h = '1', $attributes = ''", 'extends': '', 'comments': '/**\n* Heading\n*\n* Generates an HTML heading tag.\n*\n* @param\tstring\tcontent\n* @param\tint\theading level\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'heading'}, {'className': '', 'params': "$list, $attributes = ''", 'extends': '', 'comments': '/**\n* Unordered List\n*\n* Generates an HTML unordered list from an single or multi-dimensional array.\n*\n* @param\tarray\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'ul'}, {'className': '', 'params': "$list, $attributes = ''", 'extends': '', 'comments': '/**\n* Ordered List\n*\n* Generates an HTML ordered list from an single or multi-dimensional array.\n*\n* @param\tarray\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'ol'}, {'className': '', 'params': "$type = 'ul', $list = array(), $attributes = '', $depth = 0", 'extends': '', 'comments': '/**\n* Generates the list\n*\n* Generates an HTML ordered list from an single or multi-dimensional array.\n*\n* @param\tstring\n* @param\tmixed\n* @param\tmixed\n* @param\tint\n* @return\tstring\n*/', 'function_name': "_list($type = 'ul', $list = array"}, {'className': '', 'params': "$src = '', $index_page = FALSE, $attributes = ''", 'extends': '', 'comments': '/**\n* Image\n*\n* Generates an <img /> element\n*\n* @param\tmixed\n* @param\tbool\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'img'}, {'className': '', 'params': "$type = 'html5'", 'extends': '', 'comments': '/**\n* Doctype\n*\n* Generates a page document type declaration\n*\n* Examples of valid options: html5, xhtml-11, xhtml-strict, xhtml-trans,\n* xhtml-frame, html4-strict, html4-trans, and html4-frame.\n* All values are saved in the doctypes config file.\n*\n* @param\tstring\ttype\tThe doctype to be generated\n* @return\tstring\n*/', 'function_name': 'doctype'}, {'className': '', 'params': "$href = '', $rel = 'stylesheet', $type = 'text/css', $title = '', $media = '', $index_page = FALSE", 'extends': '', 'comments': '/**\n* Link\n*\n* Generates link to a CSS file\n*\n* @param\tmixed\tstylesheet hrefs or an array\n* @param\tstring\trel\n* @param\tstring\ttype\n* @param\tstring\ttitle\n* @param\tstring\tmedia\n* @param\tbool\tshould index_page be added to the css path\n* @return\tstring\n*/', 'function_name': 'link_tag'}, {'className': '', 'params': '$name = \'\', $content = \'\', $type = \'name\', $newline = "\\n"', 'extends': '', 'comments': '/**\n* Generates meta tags from an array of key/values\n*\n* @param\tarray\n* @param\tstring\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'meta'}]
[{'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Singular\n*\n* Takes a plural word and makes it singular\n*\n* @param\tstring\t$str\tInput string\n* @return\tstring\n*/', 'function_name': 'singular'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Plural\n*\n* Takes a singular word and makes it plural\n*\n* @param\tstring\t$str\tInput string\n* @return\tstring\n*/', 'function_name': 'plural'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Camelize\n*\n* Takes multiple words separated by spaces or underscores and camelizes them\n*\n* @param\tstring\t$str\tInput string\n* @return\tstring\n*/', 'function_name': 'camelize'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Underscore\n*\n* Takes multiple words separated by spaces and underscores them\n*\n* @param\tstring\t$str\tInput string\n* @return\tstring\n*/', 'function_name': 'underscore'}, {'className': '', 'params': "$str, $separator = '_'", 'extends': '', 'comments': '/**\n* Humanize\n*\n* Takes multiple words separated by the separator and changes them to spaces\n*\n* @param\tstring\t$str\t\tInput string\n* @param \tstring\t$separator\tInput separator\n* @return\tstring\n*/', 'function_name': 'humanize'}, {'className': '', 'params': '$word', 'extends': '', 'comments': '/**\n* Checks if the given word has a plural version.\n*\n* @param\tstring\t$word\tWord to check\n* @return\tbool\n*/', 'function_name': 'is_countable'}, {'className': '', 'params': '$number', 'extends': '', 'comments': '/**\n* Returns the English ordinal numeral for a given number\n*\n* @param  int    $number\n* @return string\n*/', 'function_name': 'ordinal_format'}]
[{'className': '', 'params': "$line, $for = '', $attributes = array()", 'extends': '', 'comments': '/**\n* Lang\n*\n* Fetches a language variable and optionally outputs a form label\n*\n* @param\tstring\t$line\t\tThe language line\n* @param\tstring\t$for\t\tThe "for" value (id of the form element)\n* @param\tarray\t$attributes\tAny additional HTML attributes\n* @return\tstring\n*/', 'function_name': "lang($line, $for = '', $attributes = array"}]
[{'className': '', 'params': '$num, $precision = 1', 'extends': '', 'comments': '/**\n* Formats a numbers as bytes, based on size, and adds the appropriate suffix\n*\n* @param\tmixed\twill be cast as int\n* @param\tint\n* @return\tstring\n*/', 'function_name': 'byte_format'}]
[{'className': '', 'params': '$path, $check_existance = FALSE', 'extends': '', 'comments': '/**\n* Set Realpath\n*\n* @param\tstring\n* @param\tbool\tchecks to see if the path exists\n* @return\tstring\n*/', 'function_name': 'set_realpath'}]
[{'className': '', 'params': '$str, $is_image = FALSE', 'extends': '', 'comments': '/**\n* XSS Filtering\n*\n* @param\tstring\n* @param\tbool\twhether or not the content is an image file\n* @return\tstring\n*/', 'function_name': 'xss_clean'}, {'className': '', 'params': '$filename', 'extends': '', 'comments': '/**\n* Sanitize Filename\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'sanitize_filename'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Strip Image Tags\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'strip_image_tags'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Convert PHP tags to entities\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'encode_php_tags'}]
[{'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Strip Slashes\n*\n* Removes slashes contained in a string or in an array\n*\n* @param\tmixed\tstring or array\n* @return\tmixed\tstring or array\n*/', 'function_name': 'strip_slashes'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Strip Quotes\n*\n* Removes single and double quotes from a string\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'strip_quotes'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Quotes to Entities\n*\n* Converts single and double quotes to entities\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'quotes_to_entities'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Reduce Double Slashes\n*\n* Converts double slashes in a string to a single slash,\n* except those found in http://\n*\n* http://www.some-site.com//index.php\n*\n* becomes:\n*\n* http://www.some-site.com/index.php\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'reduce_double_slashes'}, {'className': '', 'params': "$str, $character = ',', $trim = FALSE", 'extends': '', 'comments': '/**\n* Reduce Multiples\n*\n* Reduces multiple instances of a particular character.  Example:\n*\n* Fred, Bill,, Joe, Jimmy\n*\n* becomes:\n*\n* Fred, Bill, Joe, Jimmy\n*\n* @param\tstring\n* @param\tstring\tthe character you wish to reduce\n* @param\tbool\tTRUE/FALSE - whether to trim the character from the beginning/end\n* @return\tstring\n*/', 'function_name': 'reduce_multiples'}, {'className': '', 'params': "$type = 'alnum', $len = 8", 'extends': '', 'comments': '/**\n* Create a "Random" String\n*\n* @param\tstring\ttype of random string.  basic, alpha, alnum, numeric, nozero, unique, md5, encrypt and sha1\n* @param\tint\tnumber of characters\n* @return\tstring\n*/', 'function_name': 'random_string'}, {'className': '', 'params': "$str, $separator = '_', $first = 1", 'extends': '', 'comments': "/**\n* Add's _1 to a string or increment the ending number to allow _2, _3, etc\n*\n* @param\tstring\trequired\n* @param\tstring\tWhat should the duplicate number be appended with\n* @param\tstring\tWhich number should be used for the first dupe increment\n* @return\tstring\n*/", 'function_name': 'increment_string'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Alternator\n*\n* Allows strings to be alternated. See docs...\n*\n* @param\tstring (as many parameters as needed)\n* @return\tstring\n*/', 'function_name': 'alternator'}]
[{'className': '', 'params': "$str, $limit = 100, $end_char = '&#8230;'", 'extends': '', 'comments': '/**\n* Word Limiter\n*\n* Limits a string to X number of words.\n*\n* @param\tstring\n* @param\tint\n* @param\tstring\tthe end character. Usually an ellipsis\n* @return\tstring\n*/', 'function_name': 'word_limiter'}, {'className': '', 'params': "$str, $n = 500, $end_char = '&#8230;'", 'extends': '', 'comments': '/**\n* Character Limiter\n*\n* Limits the string based on the character count.  Preserves complete words\n* so the character count may not be exactly as specified.\n*\n* @param\tstring\n* @param\tint\n* @param\tstring\tthe end character. Usually an ellipsis\n* @return\tstring\n*/', 'function_name': 'character_limiter'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* High ASCII to Entities\n*\n* Converts high ASCII text and MS Word special characters to character entities\n*\n* @param\tstring\t$str\n* @return\tstring\n*/', 'function_name': 'ascii_to_entities'}, {'className': '', 'params': '$str, $all = TRUE', 'extends': '', 'comments': '/**\n* Entities to ASCII\n*\n* Converts character entities back to ASCII\n*\n* @param\tstring\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'entities_to_ascii'}, {'className': '', 'params': "$str, $censored, $replacement = ''", 'extends': '', 'comments': "/**\n* Word Censoring Function\n*\n* Supply a string and an array of disallowed words and any\n* matched words will be converted to #### or to the replacement\n* word you've submitted.\n*\n* @param\tstring\tthe text string\n* @param\tstring\tthe array of censored words\n* @param\tstring\tthe optional replacement value\n* @return\tstring\n*/", 'function_name': 'word_censor'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Code Highlighter\n*\n* Colorizes code strings\n*\n* @param\tstring\tthe text string\n* @return\tstring\n*/', 'function_name': 'highlight_code'}, {'className': '', 'params': "$str, $phrase, $tag_open = '<mark>', $tag_close = '</mark>'", 'extends': '', 'comments': "/**\n* Phrase Highlighter\n*\n* Highlights a phrase within a text string\n*\n* @param\tstring\t$str\t\tthe text string\n* @param\tstring\t$phrase\t\tthe phrase you'd like to highlight\n* @param\tstring\t$tag_open\tthe openging tag to precede the phrase with\n* @param\tstring\t$tag_close\tthe closing tag to end the phrase with\n* @return\tstring\n*/", 'function_name': 'highlight_phrase'}, {'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Convert Accented Foreign Characters to ASCII\n*\n* @param\tstring\t$str\tInput string\n* @return\tstring\n*/', 'function_name': 'convert_accented_characters'}, {'className': '', 'params': '$str, $charlim = 76', 'extends': '', 'comments': '/**\n* Word Wrap\n*\n* Wraps text at the specified character. Maintains the integrity of words.\n* Anything placed between {unwrap}{/unwrap} will not be word wrapped, nor\n* will URLs.\n*\n* @param\tstring\t$str\t\tthe text string\n* @param\tint\t$charlim = 76\tthe number of characters to wrap at\n* @return\tstring\n*/', 'function_name': 'word_wrap'}, {'className': '', 'params': "$str, $max_length, $position = 1, $ellipsis = '&hellip;'", 'extends': '', 'comments': "/**\n* Ellipsize String\n*\n* This function will strip tags from a string, split it at its max_length and ellipsize\n*\n* @param\tstring\tstring to ellipsize\n* @param\tint\tmax length of string\n* @param\tmixed\tint (1|0) or float, .5, .2, etc for position to split\n* @param\tstring\tellipsis ; Default '...'\n* @return\tstring\tellipsized string\n*/", 'function_name': 'ellipsize'}]
[{'className': '', 'params': '$str', 'extends': '', 'comments': '/**\n* Convert newlines to HTML line breaks except within PRE tags\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'nl2br_except_pre'}, {'className': '', 'params': '$str, $reduce_linebreaks = FALSE', 'extends': '', 'comments': '/**\n* Auto Typography Wrapper Function\n*\n* @param\tstring\t$str\n* @param\tbool\t$reduce_linebreaks = FALSE\twhether to reduce multiple instances of double newlines to two\n* @return\tstring\n*/', 'function_name': 'auto_typography'}, {'className': '', 'params': '$str, $charset = NULL', 'extends': '', 'comments': '/**\n* HTML Entities Decode\n*\n* This function is a replacement for html_entity_decode()\n*\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'entity_decode'}]
[{'className': '', 'params': "$uri = '', $protocol = NULL", 'extends': '', 'comments': '/**\n* Site URL\n*\n* Create a local URL based on your basepath. Segments can be passed via the\n* first parameter either as a string or an array.\n*\n* @param\tstring\t$uri\n* @param\tstring\t$protocol\n* @return\tstring\n*/', 'function_name': 'site_url'}, {'className': '', 'params': "$uri = '', $protocol = NULL", 'extends': '', 'comments': '/**\n* Base URL\n*\n* Create a local URL based on your basepath.\n* Segments can be passed in as a string or an array, same as site_url\n* or a URL to a file can be passed in, e.g. to an image file.\n*\n* @param\tstring\t$uri\n* @param\tstring\t$protocol\n* @return\tstring\n*/', 'function_name': 'base_url'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Current URL\n*\n* Returns the full URL (including segments) of the page where this\n* function is placed\n*\n* @return\tstring\n*/', 'function_name': 'current_url'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* URL String\n*\n* Returns the URI segments.\n*\n* @return\tstring\n*/', 'function_name': 'uri_string'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Index page\n*\n* Returns the "index_page" from your config file\n*\n* @return\tstring\n*/', 'function_name': 'index_page'}, {'className': '', 'params': "$uri = '', $title = '', $attributes = ''", 'extends': '', 'comments': '/**\n* Anchor Link\n*\n* Creates an anchor based on the local URL.\n*\n* @param\tstring\tthe URL\n* @param\tstring\tthe link title\n* @param\tmixed\tany attributes\n* @return\tstring\n*/', 'function_name': 'anchor'}, {'className': '', 'params': "$uri = '', $title = '', $attributes = FALSE", 'extends': '', 'comments': '/**\n* Anchor Link - Pop-up version\n*\n* Creates an anchor based on the local URL. The link\n* opens a new window based on the attributes specified.\n*\n* @param\tstring\tthe URL\n* @param\tstring\tthe link title\n* @param\tmixed\tany attributes\n* @return\tstring\n*/', 'function_name': 'anchor_popup'}, {'className': '', 'params': "$email, $title = '', $attributes = ''", 'extends': '', 'comments': '/**\n* Mailto Link\n*\n* @param\tstring\tthe email address\n* @param\tstring\tthe link title\n* @param\tmixed\tany attributes\n* @return\tstring\n*/', 'function_name': 'mailto'}, {'className': '', 'params': "$email, $title = '', $attributes = ''", 'extends': '', 'comments': '/**\n* Encoded Mailto Link\n*\n* Create a spam-protected mailto link written in Javascript\n*\n* @param\tstring\tthe email address\n* @param\tstring\tthe link title\n* @param\tmixed\tany attributes\n* @return\tstring\n*/', 'function_name': 'safe_mailto'}, {'className': '', 'params': "$str, $type = 'both', $popup = FALSE", 'extends': '', 'comments': "/**\n* Auto-linker\n*\n* Automatically links URL and Email addresses.\n* Note: There's a bit of extra code here to deal with\n* URLs or emails that end in a period. We'll strip these\n* off and add them after the link.\n*\n* @param\tstring\tthe string\n* @param\tstring\tthe type: email, url, or both\n* @param\tbool\twhether to create pop-up links\n* @return\tstring\n*/", 'function_name': 'auto_link'}, {'className': '', 'params': "$str = ''", 'extends': '', 'comments': '/**\n* Prep URL\n*\n* Simply adds the http:// part if no scheme is included\n*\n* @param\tstring\tthe URL\n* @return\tstring\n*/', 'function_name': 'prep_url'}, {'className': '', 'params': "$str, $separator = '-', $lowercase = FALSE", 'extends': '', 'comments': '/**\n* Create URL Title\n*\n* Takes a "title" string as input and creates a\n* human-friendly URL string with a "separator" string\n* as the word separator.\n*\n* @todo\tRemove old \'dash\' and \'underscore\' usage in 3.1+.\n* @param\tstring\t$str\t\tInput string\n* @param\tstring\t$separator\tWord separator\n*\t\t\t(usually \'-\' or \'_\')\n* @param\tbool\t$lowercase\tWhether to transform the output string to lowercase\n* @return\tstring\n*/', 'function_name': 'url_title'}, {'className': '', 'params': "$uri = '', $method = 'auto', $code = NULL", 'extends': '', 'comments': "/**\n* Header Redirect\n*\n* Header redirect in two flavors\n* For very fine grained control over headers, you could use the Output\n* Library's set_header() function.\n*\n* @param\tstring\t$uri\tURL\n* @param\tstring\t$method\tRedirect method\n*\t\t\t'auto', 'location' or 'refresh'\n* @param\tint\t$code\tHTTP Response status code\n* @return\tvoid\n*/", 'function_name': 'redirect'}]
[{'className': '', 'params': '$str, $protect_all = FALSE', 'extends': '', 'comments': '/**\n* Convert Reserved XML characters to Entities\n*\n* @param\tstring\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'xml_convert'}]
False
False
False
False
False
False
False
False
False
False
False
False
False
[{'className': 'CI_Cache', 'params': '$config = array()', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Constructor\n*\n* Initialize class properties based on the configuration array.\n*\n* @param\tarray\t$config = array()\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}, {'className': 'CI_Cache', 'params': '$id', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Get\n*\n* Look for a value in the cache. If it exists, return the data\n* if not, return FALSE\n*\n* @param\tstring\t$id\n* @return\tmixed\tvalue matching $id or FALSE on failure\n*/', 'function_name': 'get'}, {'className': 'CI_Cache', 'params': '$id, $data, $ttl = 60, $raw = FALSE', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Cache Save\n*\n* @param\tstring\t$id\tCache ID\n* @param\tmixed\t$data\tData to store\n* @param\tint\t$ttl\tCache TTL (in seconds)\n* @param\tbool\t$raw\tWhether to store the raw value\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'save'}, {'className': 'CI_Cache', 'params': '$id', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Delete from Cache\n*\n* @param\tstring\t$id\tCache ID\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'delete'}, {'className': 'CI_Cache', 'params': '$id, $offset = 1', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Increment a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to add\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'increment'}, {'className': 'CI_Cache', 'params': '$id, $offset = 1', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Decrement a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to reduce by\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'decrement'}, {'className': 'CI_Cache', 'params': '', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Clean the cache\n*\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'clean'}, {'className': 'CI_Cache', 'params': "$type = 'user'", 'extends': 'CI_Driver_Library', 'comments': "/**\n* Cache Info\n*\n* @param\tstring\t$type = 'user'\tuser/filehits\n* @return\tmixed\tarray containing cache info on success OR FALSE on failure\n*/", 'function_name': 'cache_info'}, {'className': 'CI_Cache', 'params': '$id', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Get Cache Metadata\n*\n* @param\tstring\t$id\tkey to get cache metadata on\n* @return\tmixed\tcache item metadata\n*/', 'function_name': 'get_metadata'}, {'className': 'CI_Cache', 'params': '$driver', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Is the requested driver supported in this environment?\n*\n* @param\tstring\t$driver\tThe driver to test\n* @return\tarray\n*/', 'function_name': 'is_supported'}, {'className': 'CI_Cache', 'params': '', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Get currently loaded driver\n*\n* @return string\n*/', 'function_name': 'get_loaded_driver'}]
[{'className': 'CI_Cache_apc', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Class constructor\n*\n* Only present so that an error message is logged\n* if APC is not available.\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Cache_apc', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Get\n*\n* Look for a value in the cache. If it exists, return the data\n* if not, return FALSE\n*\n* @param\tstring\n* @return\tmixed\tvalue that is stored/FALSE on failure\n*/', 'function_name': 'get'}, {'className': 'CI_Cache_apc', 'params': '$id, $data, $ttl = 60, $raw = FALSE', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Save\n*\n* @param\tstring\t$id\tCache ID\n* @param\tmixed\t$data\tData to store\n* @param\tint\t$ttl\tLength of time (in seconds) to cache the data\n* @param\tbool\t$raw\tWhether to store the raw value (unused)\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'save'}, {'className': 'CI_Cache_apc', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Delete from Cache\n*\n* @param\tmixed\tunique identifier of the item in the cache\n* @return\tbool\ttrue on success/false on failure\n*/', 'function_name': 'delete'}, {'className': 'CI_Cache_apc', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Increment a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to add\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'increment'}, {'className': 'CI_Cache_apc', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Decrement a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to reduce by\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'decrement'}, {'className': 'CI_Cache_apc', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Clean the cache\n*\n* @return\tbool\tfalse on failure/true on success\n*/', 'function_name': 'clean'}, {'className': 'CI_Cache_apc', 'params': '$type = NULL', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Info\n*\n* @param\tstring\tuser/filehits\n* @return\tmixed\tarray on success, false on failure\n*/', 'function_name': 'cache_info'}, {'className': 'CI_Cache_apc', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Get Cache Metadata\n*\n* @param\tmixed\tkey to get cache metadata on\n* @return\tmixed\tarray on success/false on failure\n*/', 'function_name': 'get_metadata'}, {'className': 'CI_Cache_apc', 'params': '', 'extends': 'CI_Driver', 'comments': "/**\n* is_supported()\n*\n* Check to see if APC is available on this system, bail if it isn't.\n*\n* @return\tbool\n*/", 'function_name': 'is_supported'}]
[{'className': 'CI_Cache_apcu', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Class constructor\n*\n* Only present so that an error message is logged\n* if APCu is not available.\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Cache_apcu', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Get\n*\n* Look for a value in the cache. If it exists, return the data\n* if not, return FALSE\n*\n* @param\tstring\n* @return\tmixed\tvalue that is stored/FALSE on failure\n*/', 'function_name': 'get'}, {'className': 'CI_Cache_apcu', 'params': '$id, $data, $ttl = 60, $raw = FALSE', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Save\n*\n* @param\tstring\t$id\tCache ID\n* @param\tmixed\t$data\tData to store\n* @param\tint\t$ttl\tLength of time (in seconds) to cache the data\n* @param\tbool\t$raw\tWhether to store the raw value\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'save'}, {'className': 'CI_Cache_apcu', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Delete from Cache\n*\n* @param\tmixed\tunique identifier of the item in the cache\n* @return\tbool\ttrue on success/false on failure\n*/', 'function_name': 'delete'}, {'className': 'CI_Cache_apcu', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Increment a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to add\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'increment'}, {'className': 'CI_Cache_apcu', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Decrement a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to reduce by\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'decrement'}, {'className': 'CI_Cache_apcu', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Clean the cache\n*\n* @return\tbool\tfalse on failure/true on success\n*/', 'function_name': 'clean'}, {'className': 'CI_Cache_apcu', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Info\n*\n* @return\tmixed\tarray on success, false on failure\n*/', 'function_name': 'cache_info'}, {'className': 'CI_Cache_apcu', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Get Cache Metadata\n*\n* @param\tmixed\tkey to get cache metadata on\n* @return\tmixed\tarray on success/false on failure\n*/', 'function_name': 'get_metadata'}, {'className': 'CI_Cache_apcu', 'params': '', 'extends': 'CI_Driver', 'comments': "/**\n* is_supported()\n*\n* Check to see if APCu is available on this system, bail if it isn't.\n*\n* @return\tbool\n*/", 'function_name': 'is_supported'}]
[{'className': 'CI_Cache_dummy', 'params': '$id', 'extends': 'CI_Driver', 'comments': "/**\n* Get\n*\n* Since this is the dummy class, it's always going to return FALSE.\n*\n* @param\tstring\n* @return\tbool\tFALSE\n*/", 'function_name': 'get'}, {'className': 'CI_Cache_dummy', 'params': '$id, $data, $ttl = 60, $raw = FALSE', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Save\n*\n* @param\tstring\tUnique Key\n* @param\tmixed\tData to store\n* @param\tint\tLength of time (in seconds) to cache the data\n* @param\tbool\tWhether to store the raw value\n* @return\tbool\tTRUE, Simulating success\n*/', 'function_name': 'save'}, {'className': 'CI_Cache_dummy', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Delete from Cache\n*\n* @param\tmixed\tunique identifier of the item in the cache\n* @return\tbool\tTRUE, simulating success\n*/', 'function_name': 'delete'}, {'className': 'CI_Cache_dummy', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Increment a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to add\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'increment'}, {'className': 'CI_Cache_dummy', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Decrement a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to reduce by\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'decrement'}, {'className': 'CI_Cache_dummy', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Clean the cache\n*\n* @return\tbool\tTRUE, simulating success\n*/', 'function_name': 'clean'}, {'className': 'CI_Cache_dummy', 'params': '$type = NULL', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Info\n*\n* @param\tstring\tuser/filehits\n* @return\tbool\tFALSE\n*/', 'function_name': 'cache_info'}, {'className': 'CI_Cache_dummy', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Get Cache Metadata\n*\n* @param\tmixed\tkey to get cache metadata on\n* @return\tbool\tFALSE\n*/', 'function_name': 'get_metadata'}, {'className': 'CI_Cache_dummy', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Is this caching driver supported on the system?\n* Of course this one is.\n*\n* @return\tbool\tTRUE\n*/', 'function_name': 'is_supported'}]
[{'className': 'CI_Cache_file', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Initialize file-based cache\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Cache_file', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Fetch from cache\n*\n* @param\tstring\t$id\tCache ID\n* @return\tmixed\tData on success, FALSE on failure\n*/', 'function_name': 'get'}, {'className': 'CI_Cache_file', 'params': '$id, $data, $ttl = 60, $raw = FALSE', 'extends': 'CI_Driver', 'comments': '/**\n* Save into cache\n*\n* @param\tstring\t$id\tCache ID\n* @param\tmixed\t$data\tData to store\n* @param\tint\t$ttl\tTime to live in seconds\n* @param\tbool\t$raw\tWhether to store the raw value (unused)\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'save'}, {'className': 'CI_Cache_file', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Delete from Cache\n*\n* @param\tmixed\tunique identifier of item in cache\n* @return\tbool\ttrue on success/false on failure\n*/', 'function_name': 'delete'}, {'className': 'CI_Cache_file', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Increment a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to add\n* @return\tNew value on success, FALSE on failure\n*/', 'function_name': 'increment'}, {'className': 'CI_Cache_file', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Decrement a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to reduce by\n* @return\tNew value on success, FALSE on failure\n*/', 'function_name': 'decrement'}, {'className': 'CI_Cache_file', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Clean the Cache\n*\n* @return\tbool\tfalse on failure/true on success\n*/', 'function_name': 'clean'}, {'className': 'CI_Cache_file', 'params': '$type = NULL', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Info\n*\n* Not supported by file-based caching\n*\n* @param\tstring\tuser/filehits\n* @return\tmixed\tFALSE\n*/', 'function_name': 'cache_info'}, {'className': 'CI_Cache_file', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Get Cache Metadata\n*\n* @param\tmixed\tkey to get cache metadata on\n* @return\tmixed\tFALSE on failure, array on success.\n*/', 'function_name': 'get_metadata'}, {'className': 'CI_Cache_file', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Is supported\n*\n* In the file driver, check to see that the cache directory is indeed writable\n*\n* @return\tbool\n*/', 'function_name': 'is_supported'}]
[{'className': 'CI_Cache_memcached', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Class constructor\n*\n* Setup Memcache(d)\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Cache_memcached', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Fetch from cache\n*\n* @param\tstring\t$id\tCache ID\n* @return\tmixed\tData on success, FALSE on failure\n*/', 'function_name': 'get'}, {'className': 'CI_Cache_memcached', 'params': '$id, $data, $ttl = 60, $raw = FALSE', 'extends': 'CI_Driver', 'comments': '/**\n* Save\n*\n* @param\tstring\t$id\tCache ID\n* @param\tmixed\t$data\tData being cached\n* @param\tint\t$ttl\tTime to live\n* @param\tbool\t$raw\tWhether to store the raw value\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'save'}, {'className': 'CI_Cache_memcached', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Delete from Cache\n*\n* @param\tmixed\t$id\tkey to be deleted.\n* @return\tbool\ttrue on success, false on failure\n*/', 'function_name': 'delete'}, {'className': 'CI_Cache_memcached', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Increment a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to add\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'increment'}, {'className': 'CI_Cache_memcached', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Decrement a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to reduce by\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'decrement'}, {'className': 'CI_Cache_memcached', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Clean the Cache\n*\n* @return\tbool\tfalse on failure/true on success\n*/', 'function_name': 'clean'}, {'className': 'CI_Cache_memcached', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Info\n*\n* @return\tmixed\tarray on success, false on failure\n*/', 'function_name': 'cache_info'}, {'className': 'CI_Cache_memcached', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Get Cache Metadata\n*\n* @param\tmixed\t$id\tkey to get cache metadata on\n* @return\tmixed\tFALSE on failure, array on success.\n*/', 'function_name': 'get_metadata'}, {'className': 'CI_Cache_memcached', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Is supported\n*\n* Returns FALSE if memcached is not supported on the system.\n* If it is, we setup the memcached object & return TRUE\n*\n* @return\tbool\n*/', 'function_name': 'is_supported'}, {'className': 'CI_Cache_memcached', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Class destructor\n*\n* Closes the connection to Memcache(d) if present.\n*\n* @return\tvoid\n*/', 'function_name': '__destruct'}]
[{'className': 'CI_Cache_redis', 'params': '', 'extends': 'CI_Driver', 'comments': "/**\n* Class constructor\n*\n* Setup Redis\n*\n* Loads Redis config file if present. Will halt execution\n* if a Redis connection can't be established.\n*\n* @return\tvoid\n* @see\t\tRedis::connect()\n*/", 'function_name': '__construct'}, {'className': 'CI_Cache_redis', 'params': '$key', 'extends': 'CI_Driver', 'comments': '/**\n* Get cache\n*\n* @param\tstring\t$key\tCache ID\n* @return\tmixed\n*/', 'function_name': 'get'}, {'className': 'CI_Cache_redis', 'params': '$id, $data, $ttl = 60, $raw = FALSE', 'extends': 'CI_Driver', 'comments': '/**\n* Save cache\n*\n* @param\tstring\t$id\tCache ID\n* @param\tmixed\t$data\tData to save\n* @param\tint\t$ttl\tTime to live in seconds\n* @param\tbool\t$raw\tWhether to store the raw value (unused)\n* @return\tbool\tTRUE on success, FALSE on failure\n*/', 'function_name': 'save'}, {'className': 'CI_Cache_redis', 'params': '$key', 'extends': 'CI_Driver', 'comments': '/**\n* Delete from cache\n*\n* @param\tstring\t$key\tCache key\n* @return\tbool\n*/', 'function_name': 'delete'}, {'className': 'CI_Cache_redis', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Increment a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to add\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'increment'}, {'className': 'CI_Cache_redis', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Decrement a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to reduce by\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'decrement'}, {'className': 'CI_Cache_redis', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Clean cache\n*\n* @return\tbool\n* @see\t\tRedis::flushDB()\n*/', 'function_name': 'clean'}, {'className': 'CI_Cache_redis', 'params': '$type = NULL', 'extends': 'CI_Driver', 'comments': '/**\n* Get cache driver info\n*\n* @param\tstring\t$type\tNot supported in Redis.\n*\t\t\t\tOnly included in order to offer a\n*\t\t\t\tconsistent cache API.\n* @return\tarray\n* @see\t\tRedis::info()\n*/', 'function_name': 'cache_info'}, {'className': 'CI_Cache_redis', 'params': '$key', 'extends': 'CI_Driver', 'comments': '/**\n* Get cache metadata\n*\n* @param\tstring\t$key\tCache key\n* @return\tarray\n*/', 'function_name': 'get_metadata'}, {'className': 'CI_Cache_redis', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Check if Redis driver is supported\n*\n* @return\tbool\n*/', 'function_name': 'is_supported'}, {'className': 'CI_Cache_redis', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Class destructor\n*\n* Closes the connection to Redis if present.\n*\n* @return\tvoid\n*/', 'function_name': '__destruct'}]
[{'className': 'CI_Cache_wincache', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Class constructor\n*\n* Only present so that an error message is logged\n* if APC is not available.\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Cache_wincache', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Get\n*\n* Look for a value in the cache. If it exists, return the data,\n* if not, return FALSE\n*\n* @param\tstring\t$id\tCache Ide\n* @return\tmixed\tValue that is stored/FALSE on failure\n*/', 'function_name': 'get'}, {'className': 'CI_Cache_wincache', 'params': '$id, $data, $ttl = 60, $raw = FALSE', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Save\n*\n* @param\tstring\t$id\tCache ID\n* @param\tmixed\t$data\tData to store\n* @param\tint\t$ttl\tTime to live (in seconds)\n* @param\tbool\t$raw\tWhether to store the raw value (unused)\n* @return\tbool\ttrue on success/false on failure\n*/', 'function_name': 'save'}, {'className': 'CI_Cache_wincache', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Delete from Cache\n*\n* @param\tmixed\tunique identifier of the item in the cache\n* @return\tbool\ttrue on success/false on failure\n*/', 'function_name': 'delete'}, {'className': 'CI_Cache_wincache', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Increment a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to add\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'increment'}, {'className': 'CI_Cache_wincache', 'params': '$id, $offset = 1', 'extends': 'CI_Driver', 'comments': '/**\n* Decrement a raw value\n*\n* @param\tstring\t$id\tCache ID\n* @param\tint\t$offset\tStep/value to reduce by\n* @return\tmixed\tNew value on success or FALSE on failure\n*/', 'function_name': 'decrement'}, {'className': 'CI_Cache_wincache', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Clean the cache\n*\n* @return\tbool\tfalse on failure/true on success\n*/', 'function_name': 'clean'}, {'className': 'CI_Cache_wincache', 'params': '', 'extends': 'CI_Driver', 'comments': '/**\n* Cache Info\n*\n* @return\tmixed\tarray on success, false on failure\n*/', 'function_name': 'cache_info'}, {'className': 'CI_Cache_wincache', 'params': '$id', 'extends': 'CI_Driver', 'comments': '/**\n* Get Cache Metadata\n*\n* @param\tmixed\tkey to get cache metadata on\n* @return\tmixed\tarray on success/false on failure\n*/', 'function_name': 'get_metadata'}, {'className': 'CI_Cache_wincache', 'params': '', 'extends': 'CI_Driver', 'comments': "/**\n* is_supported()\n*\n* Check to see if WinCache is available on this system, bail if it isn't.\n*\n* @return\tbool\n*/", 'function_name': 'is_supported'}]
[{'className': 'CI_Calendar', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* Loads the calendar language file and sets the default time reference.\n*\n* @uses\tCI_Lang::$is_loaded\n*\n* @param\tarray\t$config\tCalendar options\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}, {'className': 'CI_Calendar', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* Initialize the user preferences\n*\n* Accepts an associative array as input, containing display preferences\n*\n* @param\tarray\tconfig preferences\n* @return\tCI_Calendar\n*/', 'function_name': 'initialize($config = array'}, {'className': 'CI_Calendar', 'params': "$year = '', $month = '', $data = array()", 'extends': '', 'comments': '/**\n* Generate the calendar\n*\n* @param\tint\tthe year\n* @param\tint\tthe month\n* @param\tarray\tthe data to be shown in the calendar cells\n* @return\tstring\n*/', 'function_name': "generate($year = '', $month = '', $data = array"}, {'className': 'CI_Calendar', 'params': '$month', 'extends': '', 'comments': '/**\n* Get Month Name\n*\n* Generates a textual month name based on the numeric\n* month provided.\n*\n* @param\tint\tthe month\n* @return\tstring\n*/', 'function_name': 'get_month_name'}, {'className': 'CI_Calendar', 'params': "$day_type = ''", 'extends': '', 'comments': '/**\n* Get Day Names\n*\n* Returns an array of day names (Sunday, Monday, etc.) based\n* on the type. Options: long, short, abr\n*\n* @param\tstring\n* @return\tarray\n*/', 'function_name': 'get_day_names'}, {'className': 'CI_Calendar', 'params': '$month, $year', 'extends': '', 'comments': '/**\n* Adjust Date\n*\n* This function makes sure that we have a valid month/year.\n* For example, if you submit 13 as the month, the year will\n* increment and the month will become January.\n*\n* @param\tint\tthe month\n* @param\tint\tthe year\n* @return\tarray\n*/', 'function_name': 'adjust_date'}, {'className': 'CI_Calendar', 'params': '$month, $year', 'extends': '', 'comments': '/**\n* Total days in a given month\n*\n* @param\tint\tthe month\n* @param\tint\tthe year\n* @return\tint\n*/', 'function_name': 'get_total_days'}, {'className': 'CI_Calendar', 'params': '', 'extends': '', 'comments': '/**\n* Set Default Template Data\n*\n* This is used in the event that the user has not created their own template\n*\n* @return\tarray\n*/', 'function_name': 'default_template'}, {'className': 'CI_Calendar', 'params': '', 'extends': '', 'comments': '/**\n* Parse Template\n*\n* Harvests the data within the template {pseudo-variables}\n* used to display the calendar\n*\n* @return\tCI_Calendar\n*/', 'function_name': 'parse_template'}]
[{'className': 'CI_Driver_Library', 'params': '$child', 'extends': '', 'comments': "/**\n* Get magic method\n*\n* The first time a child is used it won't exist, so we instantiate it\n* subsequents calls will go straight to the proper child.\n*\n* @param\tstring\tChild class name\n* @return\tobject\tChild class\n*/", 'function_name': '__get'}, {'className': 'CI_Driver_Library', 'params': '$child', 'extends': '', 'comments': '/**\n* Load driver\n*\n* Separate load_driver call to support explicit driver load by library or user\n*\n* @param\tstring\tDriver name (w/o parent prefix)\n* @return\tobject\tChild class\n*/', 'function_name': 'load_driver'}, {'className': 'CI_Driver_Library', 'params': '$parent', 'extends': '', 'comments': "/**\n* Decorate\n*\n* Decorates the child with the parent driver lib's methods and properties\n*\n* @param\tobject\n* @return\tvoid\n*/", 'function_name': 'decorate'}, {'className': 'CI_Driver_Library', 'params': '$method, $args = array()', 'extends': '', 'comments': "/**\n* __call magic method\n*\n* Handles access to the parent driver library's methods\n*\n* @param\tstring\n* @param\tarray\n* @return\tmixed\n*/", 'function_name': '__call($method, $args = array'}, {'className': 'CI_Driver_Library', 'params': '$var', 'extends': '', 'comments': "/**\n* __get magic method\n*\n* Handles reading of the parent driver library's properties\n*\n* @param\tstring\n* @return\tmixed\n*/", 'function_name': '__get'}, {'className': 'CI_Driver_Library', 'params': '$var, $val', 'extends': '', 'comments': "/**\n* __set magic method\n*\n* Handles writing to the parent driver library's properties\n*\n* @param\tstring\n* @param\tarray\n* @return\tmixed\n*/", 'function_name': '__set'}]
[{'className': 'CI_Email', 'params': 'array $config = array()', 'extends': '', 'comments': '/**\n* Constructor - Sets Email Preferences\n*\n* The constructor can be passed an array of config values\n*\n* @param\tarray\t$config = array()\n* @return\tvoid\n*/', 'function_name': '__construct(array $config = array'}, {'className': 'CI_Email', 'params': 'array $config = array()', 'extends': '', 'comments': '/**\n* Initialize preferences\n*\n* @param\tarray\t$config\n* @return\tCI_Email\n*/', 'function_name': 'initialize(array $config = array'}, {'className': 'CI_Email', 'params': '$clear_attachments = FALSE', 'extends': '', 'comments': '/**\n* Initialize the Email Data\n*\n* @param\tbool\n* @return\tCI_Email\n*/', 'function_name': 'clear'}, {'className': 'CI_Email', 'params': "$from, $name = '', $return_path = NULL", 'extends': '', 'comments': '/**\n* Set FROM\n*\n* @param\tstring\t$from\n* @param\tstring\t$name\n* @param\tstring\t$return_path = NULL\tReturn-Path\n* @return\tCI_Email\n*/', 'function_name': 'from'}, {'className': 'CI_Email', 'params': "$replyto, $name = ''", 'extends': '', 'comments': '/**\n* Set Reply-to\n*\n* @param\tstring\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'reply_to'}, {'className': 'CI_Email', 'params': '$to', 'extends': '', 'comments': '/**\n* Set Recipients\n*\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'to'}, {'className': 'CI_Email', 'params': '$cc', 'extends': '', 'comments': '/**\n* Set CC\n*\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'cc'}, {'className': 'CI_Email', 'params': "$bcc, $limit = ''", 'extends': '', 'comments': '/**\n* Set BCC\n*\n* @param\tstring\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'bcc'}, {'className': 'CI_Email', 'params': '$subject', 'extends': '', 'comments': '/**\n* Set Email Subject\n*\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'subject'}, {'className': 'CI_Email', 'params': '$body', 'extends': '', 'comments': '/**\n* Set Body\n*\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'message'}, {'className': 'CI_Email', 'params': "$file, $disposition = '', $newname = NULL, $mime = ''", 'extends': '', 'comments': "/**\n* Assign file attachments\n*\n* @param\tstring\t$file\tCan be local path, URL or buffered content\n* @param\tstring\t$disposition = 'attachment'\n* @param\tstring\t$newname = NULL\n* @param\tstring\t$mime = ''\n* @return\tCI_Email\n*/", 'function_name': 'attach'}, {'className': 'CI_Email', 'params': '$filename', 'extends': '', 'comments': '/**\n* Set and return attachment Content-ID\n*\n* Useful for attached inline pictures\n*\n* @param\tstring\t$filename\n* @return\tstring\n*/', 'function_name': 'attachment_cid'}, {'className': 'CI_Email', 'params': '$header, $value', 'extends': '', 'comments': '/**\n* Add a Header Item\n*\n* @param\tstring\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'set_header'}, {'className': 'CI_Email', 'params': '$str', 'extends': '', 'comments': '/**\n* Set Multipart Value\n*\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'set_alt_message'}, {'className': 'CI_Email', 'params': "$type = 'text'", 'extends': '', 'comments': '/**\n* Set Mailtype\n*\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'set_mailtype'}, {'className': 'CI_Email', 'params': '$wordwrap = TRUE', 'extends': '', 'comments': '/**\n* Set Wordwrap\n*\n* @param\tbool\n* @return\tCI_Email\n*/', 'function_name': 'set_wordwrap'}, {'className': 'CI_Email', 'params': "$protocol = 'mail'", 'extends': '', 'comments': '/**\n* Set Protocol\n*\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'set_protocol'}, {'className': 'CI_Email', 'params': '$n = 3', 'extends': '', 'comments': '/**\n* Set Priority\n*\n* @param\tint\n* @return\tCI_Email\n*/', 'function_name': 'set_priority'}, {'className': 'CI_Email', 'params': '$newline = "\\n"', 'extends': '', 'comments': '/**\n* Set Newline Character\n*\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'set_newline'}, {'className': 'CI_Email', 'params': '$crlf = "\\n"', 'extends': '', 'comments': '/**\n* Set CRLF\n*\n* @param\tstring\n* @return\tCI_Email\n*/', 'function_name': 'set_crlf'}, {'className': 'CI_Email', 'params': '$email', 'extends': '', 'comments': '/**\n* Validate Email Address\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'validate_email'}, {'className': 'CI_Email', 'params': '$email', 'extends': '', 'comments': '/**\n* Email Validation\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'valid_email'}, {'className': 'CI_Email', 'params': '$email', 'extends': '', 'comments': '/**\n* Clean Extended Email Address: Joe Smith <joe@smith.com>\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'clean_email'}, {'className': 'CI_Email', 'params': '$str, $charlim = NULL', 'extends': '', 'comments': '/**\n* Word Wrap\n*\n* @param\tstring\n* @param\tint\tline-length limit\n* @return\tstring\n*/', 'function_name': 'word_wrap'}, {'className': 'CI_Email', 'params': '$auto_clear = TRUE', 'extends': '', 'comments': '/**\n* Send Email\n*\n* @param\tbool\t$auto_clear = TRUE\n* @return\tbool\n*/', 'function_name': 'send'}, {'className': 'CI_Email', 'params': '', 'extends': '', 'comments': '/**\n* Batch Bcc Send. Sends groups of BCCs in batches\n*\n* @return\tvoid\n*/', 'function_name': 'batch_bcc_send'}, {'className': 'CI_Email', 'params': "$include = array('headers', 'subject', 'body')", 'extends': '', 'comments': "/**\n* Get Debug Message\n*\n* @param\tarray\t$include\tList of raw data chunks to include in the output\n*\t\t\t\t\tValid options are: 'headers', 'subject', 'body'\n* @return\tstring\n*/", 'function_name': 'print_debugger($include = array'}, {'className': 'CI_Email', 'params': '', 'extends': '', 'comments': '/**\n* Destructor\n*\n* @return\tvoid\n*/', 'function_name': '__destruct'}]
[{'className': 'CI_Encrypt', 'params': '', 'extends': '', 'comments': '/**\n* Initialize Encryption class\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Encrypt', 'params': "$key = ''", 'extends': '', 'comments': '/**\n* Fetch the encryption key\n*\n* Returns it as MD5 in order to have an exact-length 128 bit key.\n* Mcrypt is sensitive to keys that are not the correct length\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'get_key'}, {'className': 'CI_Encrypt', 'params': "$key = ''", 'extends': '', 'comments': '/**\n* Set the encryption key\n*\n* @param\tstring\n* @return\tCI_Encrypt\n*/', 'function_name': 'set_key'}, {'className': 'CI_Encrypt', 'params': "$string, $key = ''", 'extends': '', 'comments': '/**\n* Encode\n*\n* Encodes the message string using bitwise XOR encoding.\n* The key is combined with a random hash, and then it\n* too gets converted using XOR. The whole thing is then run\n* through mcrypt using the randomized key. The end result\n* is a double-encrypted message string that is randomized\n* with each call to this function, even if the supplied\n* message and key are the same.\n*\n* @param\tstring\tthe string to encode\n* @param\tstring\tthe key\n* @return\tstring\n*/', 'function_name': 'encode'}, {'className': 'CI_Encrypt', 'params': "$string, $key = ''", 'extends': '', 'comments': '/**\n* Decode\n*\n* Reverses the above process\n*\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'decode'}, {'className': 'CI_Encrypt', 'params': "$string, $legacy_mode = MCRYPT_MODE_ECB, $key = ''", 'extends': '', 'comments': '/**\n* Encode from Legacy\n*\n* Takes an encoded string from the original Encryption class algorithms and\n* returns a newly encoded string using the improved method added in 2.0.0\n* This allows for backwards compatibility and a method to transition to the\n* new encryption algorithms.\n*\n* For more details, see https://codeigniter.com/user_guide/installation/upgrade_200.html#encryption\n*\n* @param\tstring\n* @param\tint\t\t(mcrypt mode constant)\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'encode_from_legacy'}, {'className': 'CI_Encrypt', 'params': '$data, $key', 'extends': '', 'comments': '/**\n* Encrypt using Mcrypt\n*\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'mcrypt_encode'}, {'className': 'CI_Encrypt', 'params': '$data, $key', 'extends': '', 'comments': '/**\n* Decrypt using Mcrypt\n*\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'mcrypt_decode'}, {'className': 'CI_Encrypt', 'params': '$cipher', 'extends': '', 'comments': '/**\n* Set the Mcrypt Cipher\n*\n* @param\tint\n* @return\tCI_Encrypt\n*/', 'function_name': 'set_cipher'}, {'className': 'CI_Encrypt', 'params': '$mode', 'extends': '', 'comments': '/**\n* Set the Mcrypt Mode\n*\n* @param\tint\n* @return\tCI_Encrypt\n*/', 'function_name': 'set_mode'}, {'className': 'CI_Encrypt', 'params': "$type = 'sha1'", 'extends': '', 'comments': '/**\n* Set the Hash type\n*\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'set_hash'}, {'className': 'CI_Encrypt', 'params': '$str', 'extends': '', 'comments': '/**\n* Hash encode a string\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'hash'}]
[{'className': 'CI_Encryption', 'params': 'array $params = array()', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\tConfiguration parameters\n* @return\tvoid\n*/', 'function_name': '__construct(array $params = array'}, {'className': 'CI_Encryption', 'params': 'array $params', 'extends': '', 'comments': '/**\n* Initialize\n*\n* @param\tarray\t$params\tConfiguration parameters\n* @return\tCI_Encryption\n*/', 'function_name': 'initialize'}, {'className': 'CI_Encryption', 'params': '$length', 'extends': '', 'comments': '/**\n* Create a random key\n*\n* @param\tint\t$length\tOutput length\n* @return\tstring\n*/', 'function_name': 'create_key'}, {'className': 'CI_Encryption', 'params': '$data, array $params = NULL', 'extends': '', 'comments': '/**\n* Encrypt\n*\n* @param\tstring\t$data\tInput data\n* @param\tarray\t$params\tInput parameters\n* @return\tstring\n*/', 'function_name': 'encrypt'}, {'className': 'CI_Encryption', 'params': '$data, array $params = NULL', 'extends': '', 'comments': '/**\n* Decrypt\n*\n* @param\tstring\t$data\tEncrypted data\n* @param\tarray\t$params\tInput parameters\n* @return\tstring\n*/', 'function_name': 'decrypt'}, {'className': 'CI_Encryption', 'params': "$key, $digest = 'sha512', $salt = NULL, $length = NULL, $info = ''", 'extends': '', 'comments': '/**\n* HKDF\n*\n* @link\thttps://tools.ietf.org/rfc/rfc5869.txt\n* @param\t$key\tInput key\n* @param\t$digest\tA SHA-2 hashing algorithm\n* @param\t$salt\tOptional salt\n* @param\t$length\tOutput length (defaults to the selected digest size)\n* @param\t$info\tOptional context/application-specific info\n* @return\tstring\tA pseudo-random key\n*/', 'function_name': 'hkdf'}, {'className': 'CI_Encryption', 'params': '$key', 'extends': '', 'comments': '/**\n* __get() magic\n*\n* @param\tstring\t$key\tProperty name\n* @return\tmixed\n*/', 'function_name': '__get'}]
[{'className': 'CI_Form_validation', 'params': '$rules = array()', 'extends': '', 'comments': '/**\n* Initialize Form_Validation class\n*\n* @param\tarray\t$rules\n* @return\tvoid\n*/', 'function_name': '__construct($rules = array'}, {'className': 'CI_Form_validation', 'params': '$field, $label = null, $rules = null, $errors = array()', 'extends': '', 'comments': '/**\n* Set Rules\n*\n* This function takes an array of field names and validation\n* rules as input, any custom error messages, validates the info,\n* and stores it\n*\n* @param\tmixed\t$field\n* @param\tstring\t$label\n* @param\tmixed\t$rules\n* @param\tarray\t$errors\n* @return\tCI_Form_validation\n*/', 'function_name': 'set_rules($field, $label = null, $rules = null, $errors = array'}, {'className': 'CI_Form_validation', 'params': 'array $data', 'extends': '', 'comments': "/**\n* By default, form validation uses the $_POST array to validate\n*\n* If an array is set through this method, then this array will\n* be used instead of the $_POST array\n*\n* Note that if you are validating multiple arrays, then the\n* reset_validation() function should be called after validating\n* each array due to the limitations of CI's singleton\n*\n* @param\tarray\t$data\n* @return\tCI_Form_validation\n*/", 'function_name': 'set_data'}, {'className': 'CI_Form_validation', 'params': "$lang, $val = ''", 'extends': '', 'comments': '/**\n* Set Error Message\n*\n* Lets users set their own error messages on the fly. Note:\n* The key name has to match the function name that it corresponds to.\n*\n* @param\tarray\n* @param\tstring\n* @return\tCI_Form_validation\n*/', 'function_name': 'set_message'}, {'className': 'CI_Form_validation', 'params': "$prefix = '<p>', $suffix = '</p>'", 'extends': '', 'comments': '/**\n* Set The Error Delimiter\n*\n* Permits a prefix/suffix to be added to each error message\n*\n* @param\tstring\n* @param\tstring\n* @return\tCI_Form_validation\n*/', 'function_name': 'set_error_delimiters'}, {'className': 'CI_Form_validation', 'params': "$field, $prefix = '', $suffix = ''", 'extends': '', 'comments': '/**\n* Get Error Message\n*\n* Gets the error message associated with a particular field\n*\n* @param\tstring\t$field\tField name\n* @param\tstring\t$prefix\tHTML start tag\n* @param \tstring\t$suffix\tHTML end tag\n* @return\tstring\n*/', 'function_name': 'error'}, {'className': 'CI_Form_validation', 'params': '', 'extends': '', 'comments': '/**\n* Get Array of Error Messages\n*\n* Returns the error messages as an array\n*\n* @return\tarray\n*/', 'function_name': 'error_array'}, {'className': 'CI_Form_validation', 'params': "$prefix = '', $suffix = ''", 'extends': '', 'comments': '/**\n* Error String\n*\n* Returns the error messages as a string, wrapped in the error delimiters\n*\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'error_string'}, {'className': 'CI_Form_validation', 'params': '$config = NULL, &$data = NULL', 'extends': '', 'comments': '/**\n* Run the Validator\n*\n* This function does all the work.\n*\n* @param\tstring\t$config\n* @param\tarray\t$data\n* @return\tbool\n*/', 'function_name': 'run'}, {'className': 'CI_Form_validation', 'params': '$field', 'extends': '', 'comments': '/**\n* Checks if the rule is present within the validator\n*\n* Permits you to check if a rule is present within the validator\n*\n* @param\tstring\tthe field name\n* @return\tbool\n*/', 'function_name': 'has_rule'}, {'className': 'CI_Form_validation', 'params': "$field = '', $default = ''", 'extends': '', 'comments': "/**\n* Get the value from a form\n*\n* Permits you to repopulate a form field with the value it was submitted\n* with, or, if that value doesn't exist, with the default\n*\n* @param\tstring\tthe field name\n* @param\tstring\n* @return\tstring\n*/", 'function_name': 'set_value'}, {'className': 'CI_Form_validation', 'params': "$field = '', $value = '', $default = FALSE", 'extends': '', 'comments': '/**\n* Set Select\n*\n* Enables pull-down lists to be set to the value the user\n* selected in the event of an error\n*\n* @param\tstring\n* @param\tstring\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'set_select'}, {'className': 'CI_Form_validation', 'params': "$field = '', $value = '', $default = FALSE", 'extends': '', 'comments': '/**\n* Set Radio\n*\n* Enables radio buttons to be set to the value the user\n* selected in the event of an error\n*\n* @param\tstring\n* @param\tstring\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'set_radio'}, {'className': 'CI_Form_validation', 'params': "$field = '', $value = '', $default = FALSE", 'extends': '', 'comments': '/**\n* Set Checkbox\n*\n* Enables checkboxes to be set to the value the user\n* selected in the event of an error\n*\n* @param\tstring\n* @param\tstring\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'set_checkbox'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Required\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'required'}, {'className': 'CI_Form_validation', 'params': '$str, $regex', 'extends': '', 'comments': '/**\n* Performs a Regular Expression match test.\n*\n* @param\tstring\n* @param\tstring\tregex\n* @return\tbool\n*/', 'function_name': 'regex_match'}, {'className': 'CI_Form_validation', 'params': '$str, $field', 'extends': '', 'comments': '/**\n* Match one field to another\n*\n* @param\tstring\t$str\tstring to compare against\n* @param\tstring\t$field\n* @return\tbool\n*/', 'function_name': 'matches'}, {'className': 'CI_Form_validation', 'params': '$str, $field', 'extends': '', 'comments': '/**\n* Differs from another field\n*\n* @param\tstring\n* @param\tstring\tfield\n* @return\tbool\n*/', 'function_name': 'differs'}, {'className': 'CI_Form_validation', 'params': '$str, $field', 'extends': '', 'comments': "/**\n* Is Unique\n*\n* Check if the input value doesn't already exist\n* in the specified database field.\n*\n* @param\tstring\t$str\n* @param\tstring\t$field\n* @return\tbool\n*/", 'function_name': 'is_unique'}, {'className': 'CI_Form_validation', 'params': '$str, $val', 'extends': '', 'comments': '/**\n* Minimum Length\n*\n* @param\tstring\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'min_length'}, {'className': 'CI_Form_validation', 'params': '$str, $val', 'extends': '', 'comments': '/**\n* Max Length\n*\n* @param\tstring\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'max_length'}, {'className': 'CI_Form_validation', 'params': '$str, $val', 'extends': '', 'comments': '/**\n* Exact Length\n*\n* @param\tstring\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'exact_length'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Valid URL\n*\n* @param\tstring\t$str\n* @return\tbool\n*/', 'function_name': 'valid_url'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Valid Email\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'valid_email'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Valid Emails\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'valid_emails'}, {'className': 'CI_Form_validation', 'params': "$ip, $which = ''", 'extends': '', 'comments': "/**\n* Validate IP Address\n*\n* @param\tstring\n* @param\tstring\t'ipv4' or 'ipv6' to validate a specific IP format\n* @return\tbool\n*/", 'function_name': 'valid_ip'}, {'className': 'CI_Form_validation', 'params': '$mac', 'extends': '', 'comments': '/**\n* Validate MAC address\n*\n* @param\tstring\t$mac\n* @return\tbool\n*/', 'function_name': 'valid_mac'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Alpha\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'alpha'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Alpha-numeric\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'alpha_numeric'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Alpha-numeric w/ spaces\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'alpha_numeric_spaces'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Alpha-numeric with underscores and dashes\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'alpha_dash'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Numeric\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'numeric'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Integer\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'integer'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Decimal number\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'decimal'}, {'className': 'CI_Form_validation', 'params': '$str, $min', 'extends': '', 'comments': '/**\n* Greater than\n*\n* @param\tstring\n* @param\tint\n* @return\tbool\n*/', 'function_name': 'greater_than'}, {'className': 'CI_Form_validation', 'params': '$str, $min', 'extends': '', 'comments': '/**\n* Equal to or Greater than\n*\n* @param\tstring\n* @param\tint\n* @return\tbool\n*/', 'function_name': 'greater_than_equal_to'}, {'className': 'CI_Form_validation', 'params': '$str, $max', 'extends': '', 'comments': '/**\n* Less than\n*\n* @param\tstring\n* @param\tint\n* @return\tbool\n*/', 'function_name': 'less_than'}, {'className': 'CI_Form_validation', 'params': '$str, $max', 'extends': '', 'comments': '/**\n* Equal to or Less than\n*\n* @param\tstring\n* @param\tint\n* @return\tbool\n*/', 'function_name': 'less_than_equal_to'}, {'className': 'CI_Form_validation', 'params': '$value, $list', 'extends': '', 'comments': '/**\n* Value should be within an array of values\n*\n* @param\tstring\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'in_list'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Is a Natural number  (0,1,2,3, etc.)\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'is_natural'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Is a Natural number, but not a zero  (1,2,3, etc.)\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'is_natural_no_zero'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Valid Base64\n*\n* Tests a string for characters outside of the Base64 alphabet\n* as defined by RFC 2045 http://www.faqs.org/rfcs/rfc2045\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'valid_base64'}, {'className': 'CI_Form_validation', 'params': "$str = ''", 'extends': '', 'comments': '/**\n* Prep URL\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'prep_url'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Strip Image Tags\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'strip_image_tags'}, {'className': 'CI_Form_validation', 'params': '$str', 'extends': '', 'comments': '/**\n* Convert PHP tags to entities\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'encode_php_tags'}, {'className': 'CI_Form_validation', 'params': '', 'extends': '', 'comments': '/**\n* Reset validation vars\n*\n* Prevents subsequent validation routines from being affected by the\n* results of any previous validation routine due to the CI singleton.\n*\n* @return\tCI_Form_validation\n*/', 'function_name': 'reset_validation'}]
[{'className': 'CI_FTP', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* Constructor\n*\n* @param\tarray\t$config\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}, {'className': 'CI_FTP', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* Initialize preferences\n*\n* @param\tarray\t$config\n* @return\tvoid\n*/', 'function_name': 'initialize($config = array'}, {'className': 'CI_FTP', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* FTP Connect\n*\n* @param\tarray\t $config\tConnection values\n* @return\tbool\n*/', 'function_name': 'connect($config = array'}, {'className': 'CI_FTP', 'params': '$path, $suppress_debug = FALSE', 'extends': '', 'comments': '/**\n* Change directory\n*\n* The second parameter lets us momentarily turn off debugging so that\n* this function can be used to test for the existence of a folder\n* without throwing an error. There\'s no FTP equivalent to is_dir()\n* so we do it by trying to change to a particular directory.\n* Internally, this parameter is only used by the "mirror" function below.\n*\n* @param\tstring\t$path\n* @param\tbool\t$suppress_debug\n* @return\tbool\n*/', 'function_name': 'changedir'}, {'className': 'CI_FTP', 'params': '$path, $permissions = NULL', 'extends': '', 'comments': '/**\n* Create a directory\n*\n* @param\tstring\t$path\n* @param\tint\t$permissions\n* @return\tbool\n*/', 'function_name': 'mkdir'}, {'className': 'CI_FTP', 'params': "$locpath, $rempath, $mode = 'auto', $permissions = NULL", 'extends': '', 'comments': '/**\n* Upload a file to the server\n*\n* @param\tstring\t$locpath\n* @param\tstring\t$rempath\n* @param\tstring\t$mode\n* @param\tint\t$permissions\n* @return\tbool\n*/', 'function_name': 'upload'}, {'className': 'CI_FTP', 'params': "$rempath, $locpath, $mode = 'auto'", 'extends': '', 'comments': '/**\n* Download a file from a remote server to the local server\n*\n* @param\tstring\t$rempath\n* @param\tstring\t$locpath\n* @param\tstring\t$mode\n* @return\tbool\n*/', 'function_name': 'download'}, {'className': 'CI_FTP', 'params': '$old_file, $new_file, $move = FALSE', 'extends': '', 'comments': '/**\n* Rename (or move) a file\n*\n* @param\tstring\t$old_file\n* @param\tstring\t$new_file\n* @param\tbool\t$move\n* @return\tbool\n*/', 'function_name': 'rename'}, {'className': 'CI_FTP', 'params': '$old_file, $new_file', 'extends': '', 'comments': '/**\n* Move a file\n*\n* @param\tstring\t$old_file\n* @param\tstring\t$new_file\n* @return\tbool\n*/', 'function_name': 'move'}, {'className': 'CI_FTP', 'params': '$filepath', 'extends': '', 'comments': '/**\n* Rename (or move) a file\n*\n* @param\tstring\t$filepath\n* @return\tbool\n*/', 'function_name': 'delete_file'}, {'className': 'CI_FTP', 'params': '$filepath', 'extends': '', 'comments': '/**\n* Delete a folder and recursively delete everything (including sub-folders)\n* contained within it.\n*\n* @param\tstring\t$filepath\n* @return\tbool\n*/', 'function_name': 'delete_dir'}, {'className': 'CI_FTP', 'params': '$path, $perm', 'extends': '', 'comments': '/**\n* Set file permissions\n*\n* @param\tstring\t$path\tFile path\n* @param\tint\t$perm\tPermissions\n* @return\tbool\n*/', 'function_name': 'chmod'}, {'className': 'CI_FTP', 'params': "$path = '.'", 'extends': '', 'comments': '/**\n* FTP List files in the specified directory\n*\n* @param\tstring\t$path\n* @return\tarray\n*/', 'function_name': 'list_files'}, {'className': 'CI_FTP', 'params': '$locpath, $rempath', 'extends': '', 'comments': '/**\n* Read a directory and recreate it remotely\n*\n* This function recursively reads a folder and everything it contains\n* (including sub-folders) and creates a mirror via FTP based on it.\n* Whatever the directory structure of the original file path will be\n* recreated on the server.\n*\n* @param\tstring\t$locpath\tPath to source with trailing slash\n* @param\tstring\t$rempath\tPath to destination - include the base folder with trailing slash\n* @return\tbool\n*/', 'function_name': 'mirror'}, {'className': 'CI_FTP', 'params': '', 'extends': '', 'comments': '/**\n* Close the connection\n*\n* @return\tbool\n*/', 'function_name': 'close'}]
[{'className': 'CI_Image_lib', 'params': '$props = array()', 'extends': '', 'comments': '/**\n* Initialize Image Library\n*\n* @param\tarray\t$props\n* @return\tvoid\n*/', 'function_name': '__construct($props = array'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Initialize image properties\n*\n* Resets values in case this class is used in a loop\n*\n* @return\tvoid\n*/', 'function_name': 'clear'}, {'className': 'CI_Image_lib', 'params': '$props = array()', 'extends': '', 'comments': '/**\n* initialize image preferences\n*\n* @param\tarray\n* @return\tbool\n*/', 'function_name': 'initialize($props = array'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Image Resize\n*\n* This is a wrapper function that chooses the proper\n* resize function based on the protocol specified\n*\n* @return\tbool\n*/', 'function_name': 'resize'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Image Crop\n*\n* This is a wrapper function that chooses the proper\n* cropping function based on the protocol specified\n*\n* @return\tbool\n*/', 'function_name': 'crop'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Image Rotate\n*\n* This is a wrapper function that chooses the proper\n* rotation function based on the protocol specified\n*\n* @return\tbool\n*/', 'function_name': 'rotate'}, {'className': 'CI_Image_lib', 'params': "$action = 'resize'", 'extends': '', 'comments': '/**\n* Image Process Using GD/GD2\n*\n* This function will resize or crop\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'image_process_gd'}, {'className': 'CI_Image_lib', 'params': "$action = 'resize'", 'extends': '', 'comments': '/**\n* Image Process Using ImageMagick\n*\n* This function will resize, crop or rotate\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'image_process_imagemagick'}, {'className': 'CI_Image_lib', 'params': "$action = 'resize'", 'extends': '', 'comments': '/**\n* Image Process Using NetPBM\n*\n* This function will resize, crop or rotate\n*\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'image_process_netpbm'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Image Rotate Using GD\n*\n* @return\tbool\n*/', 'function_name': 'image_rotate_gd'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Create Mirror Image using GD\n*\n* This function will flip horizontal or vertical\n*\n* @return\tbool\n*/', 'function_name': 'image_mirror_gd'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Image Watermark\n*\n* This is a wrapper function that chooses the type\n* of watermarking based on the specified preference.\n*\n* @return\tbool\n*/', 'function_name': 'watermark'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Watermark - Graphic Version\n*\n* @return\tbool\n*/', 'function_name': 'overlay_watermark'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Watermark - Text Version\n*\n* @return\tbool\n*/', 'function_name': 'text_watermark'}, {'className': 'CI_Image_lib', 'params': "$path = '', $image_type = ''", 'extends': '', 'comments': '/**\n* Create Image - GD\n*\n* This simply creates an image resource handle\n* based on the type of image being processed\n*\n* @param\tstring\n* @param\tstring\n* @return\tresource\n*/', 'function_name': 'image_create_gd'}, {'className': 'CI_Image_lib', 'params': '$resource', 'extends': '', 'comments': '/**\n* Write image file to disk - GD\n*\n* Takes an image resource as input and writes the file\n* to the specified destination\n*\n* @param\tresource\n* @return\tbool\n*/', 'function_name': 'image_save_gd'}, {'className': 'CI_Image_lib', 'params': '$resource', 'extends': '', 'comments': '/**\n* Dynamically outputs an image\n*\n* @param\tresource\n* @return\tvoid\n*/', 'function_name': 'image_display_gd'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Re-proportion Image Width/Height\n*\n* When creating thumbs, the desired width/height\n* can end up warping the image due to an incorrect\n* ratio between the full-sized image and the thumb.\n*\n* This function lets us re-proportion the width/height\n* if users choose to maintain the aspect ratio when resizing.\n*\n* @return\tvoid\n*/', 'function_name': 'image_reproportion'}, {'className': 'CI_Image_lib', 'params': "$path = '', $return = FALSE", 'extends': '', 'comments': '/**\n* Get image properties\n*\n* A helper function that gets info about the file\n*\n* @param\tstring\n* @param\tbool\n* @return\tmixed\n*/', 'function_name': 'get_image_properties'}, {'className': 'CI_Image_lib', 'params': '$vals', 'extends': '', 'comments': "/**\n* Size calculator\n*\n* This function takes a known width x height and\n* recalculates it to a new size. Only one\n* new variable needs to be known\n*\n*\t$props = array(\n*\t\t\t'width'\t\t=> $width,\n*\t\t\t'height'\t=> $height,\n*\t\t\t'new_width'\t=> 40,\n*\t\t\t'new_height'\t=> ''\n*\t\t);\n*\n* @param\tarray\n* @return\tarray\n*/", 'function_name': 'size_calculator'}, {'className': 'CI_Image_lib', 'params': '$source_image', 'extends': '', 'comments': "/**\n* Explode source_image\n*\n* This is a helper function that extracts the extension\n* from the source_image.  This function lets us deal with\n* source_images with multiple periods, like: my.cool.jpg\n* It returns an associative array with two elements:\n* $array['ext']  = '.jpg';\n* $array['name'] = 'my.cool';\n*\n* @param\tarray\n* @return\tarray\n*/", 'function_name': 'explode_name'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Is GD Installed?\n*\n* @return\tbool\n*/', 'function_name': 'gd_loaded'}, {'className': 'CI_Image_lib', 'params': '', 'extends': '', 'comments': '/**\n* Get GD version\n*\n* @return\tmixed\n*/', 'function_name': 'gd_version'}, {'className': 'CI_Image_lib', 'params': '$msg', 'extends': '', 'comments': '/**\n* Set error message\n*\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'set_error'}, {'className': 'CI_Image_lib', 'params': "$open = '<p>', $close = '</p>'", 'extends': '', 'comments': '/**\n* Show error messages\n*\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'display_errors'}]
[{'className': 'CI_Migration', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* Initialize Migration Class\n*\n* @param\tarray\t$config\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}, {'className': 'CI_Migration', 'params': '$target_version', 'extends': '', 'comments': '/**\n* Migrate to a schema version\n*\n* Calls each migration step required to get to the schema version of\n* choice\n*\n* @param\tstring\t$target_version\tTarget schema version\n* @return\tmixed\tTRUE if no migrations are found, current version string on success, FALSE on failure\n*/', 'function_name': 'version'}, {'className': 'CI_Migration', 'params': '', 'extends': '', 'comments': '/**\n* Sets the schema to the latest migration\n*\n* @return\tmixed\tCurrent version string on success, FALSE on failure\n*/', 'function_name': 'latest'}, {'className': 'CI_Migration', 'params': '', 'extends': '', 'comments': '/**\n* Sets the schema to the migration version set in config\n*\n* @return\tmixed\tTRUE if no migrations are found, current version string on success, FALSE on failure\n*/', 'function_name': 'current'}, {'className': 'CI_Migration', 'params': '', 'extends': '', 'comments': '/**\n* Error string\n*\n* @return\tstring\tError message returned as a string\n*/', 'function_name': 'error_string'}, {'className': 'CI_Migration', 'params': '', 'extends': '', 'comments': '/**\n* Retrieves list of available migration scripts\n*\n* @return\tarray\tlist of migration file paths sorted by version\n*/', 'function_name': 'find_migrations'}, {'className': 'CI_Migration', 'params': '$var', 'extends': '', 'comments': '/**\n* Enable the use of CI super-global\n*\n* @param\tstring\t$var\n* @return\tmixed\n*/', 'function_name': '__get'}]
[{'className': 'CI_Pagination', 'params': '$params = array()', 'extends': '', 'comments': '/**\n* Constructor\n*\n* @param\tarray\t$params\tInitialization parameters\n* @return\tvoid\n*/', 'function_name': '__construct($params = array'}, {'className': 'CI_Pagination', 'params': 'array $params = array()', 'extends': '', 'comments': '/**\n* Initialize Preferences\n*\n* @param\tarray\t$params\tInitialization parameters\n* @return\tCI_Pagination\n*/', 'function_name': 'initialize(array $params = array'}, {'className': 'CI_Pagination', 'params': '', 'extends': '', 'comments': '/**\n* Generate the pagination links\n*\n* @return\tstring\n*/', 'function_name': 'create_links'}]
[{'className': 'CI_Parser', 'params': '', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Parser', 'params': '$template, $data, $return = FALSE', 'extends': '', 'comments': '/**\n* Parse a template\n*\n* Parses pseudo-variables contained in the specified template view,\n* replacing them with the data in the second param\n*\n* @param\tstring\n* @param\tarray\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'parse'}, {'className': 'CI_Parser', 'params': '$template, $data, $return = FALSE', 'extends': '', 'comments': '/**\n* Parse a String\n*\n* Parses pseudo-variables contained in the specified string,\n* replacing them with the data in the second param\n*\n* @param\tstring\n* @param\tarray\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'parse_string'}, {'className': 'CI_Parser', 'params': "$l = '{', $r = '}'", 'extends': '', 'comments': '/**\n* Set the left/right variable delimiters\n*\n* @param\tstring\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'set_delimiters'}]
[{'className': 'CI_Profiler', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* Initialize Profiler\n*\n* @param\tarray\t$config\tParameters\n*/', 'function_name': '__construct($config = array'}, {'className': 'CI_Profiler', 'params': '$config', 'extends': '', 'comments': '/**\n* Set Sections\n*\n* Sets the private _compile_* properties to enable/disable Profiler sections\n*\n* @param\tmixed\t$config\n* @return\tvoid\n*/', 'function_name': 'set_sections'}, {'className': 'CI_Profiler', 'params': '', 'extends': '', 'comments': '/**\n* Run the Profiler\n*\n* @return\tstring\n*/', 'function_name': 'run'}]
[{'className': 'CI_Session_database_driver', 'params': '&$params', 'extends': 'CI_Session_driver', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\tConfiguration parameters\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Session_database_driver', 'params': '$save_path, $name', 'extends': 'CI_Session_driver', 'comments': '/**\n* Open\n*\n* Initializes the database connection\n*\n* @param\tstring\t$save_path\tTable name\n* @param\tstring\t$name\t\tSession cookie name, unused\n* @return\tbool\n*/', 'function_name': 'open'}, {'className': 'CI_Session_database_driver', 'params': '$session_id', 'extends': 'CI_Session_driver', 'comments': '/**\n* Read\n*\n* Reads session data and acquires a lock\n*\n* @param\tstring\t$session_id\tSession ID\n* @return\tstring\tSerialized session data\n*/', 'function_name': 'read'}, {'className': 'CI_Session_database_driver', 'params': '$session_id, $session_data', 'extends': 'CI_Session_driver', 'comments': '/**\n* Write\n*\n* Writes (create / update) session data\n*\n* @param\tstring\t$session_id\tSession ID\n* @param\tstring\t$session_data\tSerialized session data\n* @return\tbool\n*/', 'function_name': 'write'}, {'className': 'CI_Session_database_driver', 'params': '', 'extends': 'CI_Session_driver', 'comments': '/**\n* Close\n*\n* Releases locks\n*\n* @return\tbool\n*/', 'function_name': 'close'}, {'className': 'CI_Session_database_driver', 'params': '$session_id', 'extends': 'CI_Session_driver', 'comments': '/**\n* Destroy\n*\n* Destroys the current session.\n*\n* @param\tstring\t$session_id\tSession ID\n* @return\tbool\n*/', 'function_name': 'destroy'}, {'className': 'CI_Session_database_driver', 'params': '$maxlifetime', 'extends': 'CI_Session_driver', 'comments': '/**\n* Garbage Collector\n*\n* Deletes expired sessions\n*\n* @param\tint \t$maxlifetime\tMaximum lifetime of sessions\n* @return\tbool\n*/', 'function_name': 'gc'}]
[{'className': 'CI_Session_files_driver', 'params': '&$params', 'extends': 'CI_Session_driver', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\tConfiguration parameters\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Session_files_driver', 'params': '$save_path, $name', 'extends': 'CI_Session_driver', 'comments': "/**\n* Open\n*\n* Sanitizes the save_path directory.\n*\n* @param\tstring\t$save_path\tPath to session files' directory\n* @param\tstring\t$name\t\tSession cookie name\n* @return\tbool\n*/", 'function_name': 'open'}, {'className': 'CI_Session_files_driver', 'params': '$session_id', 'extends': 'CI_Session_driver', 'comments': '/**\n* Read\n*\n* Reads session data and acquires a lock\n*\n* @param\tstring\t$session_id\tSession ID\n* @return\tstring\tSerialized session data\n*/', 'function_name': 'read'}, {'className': 'CI_Session_files_driver', 'params': '$session_id, $session_data', 'extends': 'CI_Session_driver', 'comments': '/**\n* Write\n*\n* Writes (create / update) session data\n*\n* @param\tstring\t$session_id\tSession ID\n* @param\tstring\t$session_data\tSerialized session data\n* @return\tbool\n*/', 'function_name': 'write'}, {'className': 'CI_Session_files_driver', 'params': '', 'extends': 'CI_Session_driver', 'comments': '/**\n* Close\n*\n* Releases locks and closes file descriptor.\n*\n* @return\tbool\n*/', 'function_name': 'close'}, {'className': 'CI_Session_files_driver', 'params': '$session_id', 'extends': 'CI_Session_driver', 'comments': '/**\n* Destroy\n*\n* Destroys the current session.\n*\n* @param\tstring\t$session_id\tSession ID\n* @return\tbool\n*/', 'function_name': 'destroy'}, {'className': 'CI_Session_files_driver', 'params': '$maxlifetime', 'extends': 'CI_Session_driver', 'comments': '/**\n* Garbage Collector\n*\n* Deletes expired sessions\n*\n* @param\tint \t$maxlifetime\tMaximum lifetime of sessions\n* @return\tbool\n*/', 'function_name': 'gc'}]
[{'className': 'CI_Session_memcached_driver', 'params': '&$params', 'extends': 'CI_Session_driver', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\tConfiguration parameters\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Session_memcached_driver', 'params': '$save_path, $name', 'extends': 'CI_Session_driver', 'comments': '/**\n* Open\n*\n* Sanitizes save_path and initializes connections.\n*\n* @param\tstring\t$save_path\tServer path(s)\n* @param\tstring\t$name\t\tSession cookie name, unused\n* @return\tbool\n*/', 'function_name': 'open'}, {'className': 'CI_Session_memcached_driver', 'params': '$session_id', 'extends': 'CI_Session_driver', 'comments': '/**\n* Read\n*\n* Reads session data and acquires a lock\n*\n* @param\tstring\t$session_id\tSession ID\n* @return\tstring\tSerialized session data\n*/', 'function_name': 'read'}, {'className': 'CI_Session_memcached_driver', 'params': '$session_id, $session_data', 'extends': 'CI_Session_driver', 'comments': '/**\n* Write\n*\n* Writes (create / update) session data\n*\n* @param\tstring\t$session_id\tSession ID\n* @param\tstring\t$session_data\tSerialized session data\n* @return\tbool\n*/', 'function_name': 'write'}, {'className': 'CI_Session_memcached_driver', 'params': '', 'extends': 'CI_Session_driver', 'comments': '/**\n* Close\n*\n* Releases locks and closes connection.\n*\n* @return\tbool\n*/', 'function_name': 'close'}, {'className': 'CI_Session_memcached_driver', 'params': '$session_id', 'extends': 'CI_Session_driver', 'comments': '/**\n* Destroy\n*\n* Destroys the current session.\n*\n* @param\tstring\t$session_id\tSession ID\n* @return\tbool\n*/', 'function_name': 'destroy'}, {'className': 'CI_Session_memcached_driver', 'params': '$maxlifetime', 'extends': 'CI_Session_driver', 'comments': '/**\n* Garbage Collector\n*\n* Deletes expired sessions\n*\n* @param\tint \t$maxlifetime\tMaximum lifetime of sessions\n* @return\tbool\n*/', 'function_name': 'gc'}]
[{'className': 'CI_Session_redis_driver', 'params': '&$params', 'extends': 'CI_Session_driver', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\tConfiguration parameters\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Session_redis_driver', 'params': '$save_path, $name', 'extends': 'CI_Session_driver', 'comments': '/**\n* Open\n*\n* Sanitizes save_path and initializes connection.\n*\n* @param\tstring\t$save_path\tServer path\n* @param\tstring\t$name\t\tSession cookie name, unused\n* @return\tbool\n*/', 'function_name': 'open'}, {'className': 'CI_Session_redis_driver', 'params': '$session_id', 'extends': 'CI_Session_driver', 'comments': '/**\n* Read\n*\n* Reads session data and acquires a lock\n*\n* @param\tstring\t$session_id\tSession ID\n* @return\tstring\tSerialized session data\n*/', 'function_name': 'read'}, {'className': 'CI_Session_redis_driver', 'params': '$session_id, $session_data', 'extends': 'CI_Session_driver', 'comments': '/**\n* Write\n*\n* Writes (create / update) session data\n*\n* @param\tstring\t$session_id\tSession ID\n* @param\tstring\t$session_data\tSerialized session data\n* @return\tbool\n*/', 'function_name': 'write'}, {'className': 'CI_Session_redis_driver', 'params': '', 'extends': 'CI_Session_driver', 'comments': '/**\n* Close\n*\n* Releases locks and closes connection.\n*\n* @return\tbool\n*/', 'function_name': 'close'}, {'className': 'CI_Session_redis_driver', 'params': '$session_id', 'extends': 'CI_Session_driver', 'comments': '/**\n* Destroy\n*\n* Destroys the current session.\n*\n* @param\tstring\t$session_id\tSession ID\n* @return\tbool\n*/', 'function_name': 'destroy'}, {'className': 'CI_Session_redis_driver', 'params': '$maxlifetime', 'extends': 'CI_Session_driver', 'comments': '/**\n* Garbage Collector\n*\n* Deletes expired sessions\n*\n* @param\tint \t$maxlifetime\tMaximum lifetime of sessions\n* @return\tbool\n*/', 'function_name': 'gc'}]
[{'className': 'CI_Session', 'params': 'array $params = array()', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\tConfiguration parameters\n* @return\tvoid\n*/', 'function_name': '__construct(array $params = array'}, {'className': 'CI_Session', 'params': '$key', 'extends': '', 'comments': '/**\n* Mark as flash\n*\n* @param\tmixed\t$key\tSession data key(s)\n* @return\tbool\n*/', 'function_name': 'mark_as_flash'}, {'className': 'CI_Session', 'params': '', 'extends': '', 'comments': '/**\n* Get flash keys\n*\n* @return\tarray\n*/', 'function_name': 'get_flash_keys'}, {'className': 'CI_Session', 'params': '$key', 'extends': '', 'comments': '/**\n* Unmark flash\n*\n* @param\tmixed\t$key\tSession data key(s)\n* @return\tvoid\n*/', 'function_name': 'unmark_flash'}, {'className': 'CI_Session', 'params': '$key, $ttl = 300', 'extends': '', 'comments': '/**\n* Mark as temp\n*\n* @param\tmixed\t$key\tSession data key(s)\n* @param\tint\t$ttl\tTime-to-live in seconds\n* @return\tbool\n*/', 'function_name': 'mark_as_temp'}, {'className': 'CI_Session', 'params': '', 'extends': '', 'comments': '/**\n* Get temp keys\n*\n* @return\tarray\n*/', 'function_name': 'get_temp_keys'}, {'className': 'CI_Session', 'params': '$key', 'extends': '', 'comments': '/**\n* Unmark flash\n*\n* @param\tmixed\t$key\tSession data key(s)\n* @return\tvoid\n*/', 'function_name': 'unmark_temp'}, {'className': 'CI_Session', 'params': '$key', 'extends': '', 'comments': "/**\n* __get()\n*\n* @param\tstring\t$key\t'session_id' or a session data key\n* @return\tmixed\n*/", 'function_name': '__get'}, {'className': 'CI_Session', 'params': '$key', 'extends': '', 'comments': "/**\n* __isset()\n*\n* @param\tstring\t$key\t'session_id' or a session data key\n* @return\tbool\n*/", 'function_name': '__isset'}, {'className': 'CI_Session', 'params': '$key, $value', 'extends': '', 'comments': '/**\n* __set()\n*\n* @param\tstring\t$key\tSession data key\n* @param\tmixed\t$value\tSession data value\n* @return\tvoid\n*/', 'function_name': '__set'}, {'className': 'CI_Session', 'params': '', 'extends': '', 'comments': '/**\n* Session destroy\n*\n* Legacy CI_Session compatibility method\n*\n* @return\tvoid\n*/', 'function_name': 'sess_destroy'}, {'className': 'CI_Session', 'params': '$destroy = FALSE', 'extends': '', 'comments': '/**\n* Session regenerate\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tbool\t$destroy\tDestroy old session data flag\n* @return\tvoid\n*/', 'function_name': 'sess_regenerate'}, {'className': 'CI_Session', 'params': '', 'extends': '', 'comments': '/**\n* Get userdata reference\n*\n* Legacy CI_Session compatibility method\n*\n* @returns\tarray\n*/', 'function_name': '&get_userdata'}, {'className': 'CI_Session', 'params': '$key = NULL', 'extends': '', 'comments': '/**\n* Userdata (fetch)\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tstring\t$key\tSession data key\n* @return\tmixed\tSession data value or NULL if not found\n*/', 'function_name': 'userdata'}, {'className': 'CI_Session', 'params': '$data, $value = NULL', 'extends': '', 'comments': '/**\n* Set userdata\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tmixed\t$data\tSession data key or an associative array\n* @param\tmixed\t$value\tValue to store\n* @return\tvoid\n*/', 'function_name': 'set_userdata'}, {'className': 'CI_Session', 'params': '$key', 'extends': '', 'comments': '/**\n* Unset userdata\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tmixed\t$key\tSession data key(s)\n* @return\tvoid\n*/', 'function_name': 'unset_userdata'}, {'className': 'CI_Session', 'params': '', 'extends': '', 'comments': '/**\n* All userdata (fetch)\n*\n* Legacy CI_Session compatibility method\n*\n* @return\tarray\t$_SESSION, excluding flash data items\n*/', 'function_name': 'all_userdata'}, {'className': 'CI_Session', 'params': '$key', 'extends': '', 'comments': '/**\n* Has userdata\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tstring\t$key\tSession data key\n* @return\tbool\n*/', 'function_name': 'has_userdata'}, {'className': 'CI_Session', 'params': '$key = NULL', 'extends': '', 'comments': '/**\n* Flashdata (fetch)\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tstring\t$key\tSession data key\n* @return\tmixed\tSession data value or NULL if not found\n*/', 'function_name': 'flashdata'}, {'className': 'CI_Session', 'params': '$data, $value = NULL', 'extends': '', 'comments': '/**\n* Set flashdata\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tmixed\t$data\tSession data key or an associative array\n* @param\tmixed\t$value\tValue to store\n* @return\tvoid\n*/', 'function_name': 'set_flashdata'}, {'className': 'CI_Session', 'params': '$key', 'extends': '', 'comments': '/**\n* Keep flashdata\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tmixed\t$key\tSession data key(s)\n* @return\tvoid\n*/', 'function_name': 'keep_flashdata'}, {'className': 'CI_Session', 'params': '$key = NULL', 'extends': '', 'comments': '/**\n* Temp data (fetch)\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tstring\t$key\tSession data key\n* @return\tmixed\tSession data value or NULL if not found\n*/', 'function_name': 'tempdata'}, {'className': 'CI_Session', 'params': '$data, $value = NULL, $ttl = 300', 'extends': '', 'comments': '/**\n* Set tempdata\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tmixed\t$data\tSession data key or an associative array of items\n* @param\tmixed\t$value\tValue to store\n* @param\tint\t$ttl\tTime-to-live in seconds\n* @return\tvoid\n*/', 'function_name': 'set_tempdata'}, {'className': 'CI_Session', 'params': '$key', 'extends': '', 'comments': '/**\n* Unset tempdata\n*\n* Legacy CI_Session compatibility method\n*\n* @param\tmixed\t$data\tSession data key(s)\n* @return\tvoid\n*/', 'function_name': 'unset_tempdata'}]
[{'className': '', 'params': '&$params', 'extends': '', 'comments': '/**\n* Class constructor\n*\n* @param\tarray\t$params\tConfiguration parameters\n* @return\tvoid\n*/', 'function_name': '__construct'}]
[{'className': 'CI_Table', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* Set the template from the table config file if it exists\n*\n* @param\tarray\t$config\t(default: array())\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}, {'className': 'CI_Table', 'params': '$template', 'extends': '', 'comments': '/**\n* Set the template\n*\n* @param\tarray\t$template\n* @return\tbool\n*/', 'function_name': 'set_template'}, {'className': 'CI_Table', 'params': '$args = array()', 'extends': '', 'comments': '/**\n* Set the table heading\n*\n* Can be passed as an array or discreet params\n*\n* @param\tmixed\n* @return\tCI_Table\n*/', 'function_name': 'set_heading($args = array'}, {'className': 'CI_Table', 'params': '$array = array(), $col_limit = 0', 'extends': '', 'comments': '/**\n* Set columns. Takes a one-dimensional array as input and creates\n* a multi-dimensional array with a depth equal to the number of\n* columns. This allows a single array with many elements to be\n* displayed in a table that has a fixed column count.\n*\n* @param\tarray\t$array\n* @param\tint\t$col_limit\n* @return\tarray\n*/', 'function_name': 'make_columns($array = array'}, {'className': 'CI_Table', 'params': '$value', 'extends': '', 'comments': '/**\n* Set "empty" cells\n*\n* Can be passed as an array or discreet params\n*\n* @param\tmixed\t$value\n* @return\tCI_Table\n*/', 'function_name': 'set_empty'}, {'className': 'CI_Table', 'params': '$args = array()', 'extends': '', 'comments': '/**\n* Add a table row\n*\n* Can be passed as an array or discreet params\n*\n* @param\tmixed\n* @return\tCI_Table\n*/', 'function_name': 'add_row($args = array'}, {'className': 'CI_Table', 'params': '$caption', 'extends': '', 'comments': '/**\n* Add a table caption\n*\n* @param\tstring\t$caption\n* @return\tCI_Table\n*/', 'function_name': 'set_caption'}, {'className': 'CI_Table', 'params': '$table_data = NULL', 'extends': '', 'comments': '/**\n* Generate the table\n*\n* @param\tmixed\t$table_data\n* @return\tstring\n*/', 'function_name': 'generate'}, {'className': 'CI_Table', 'params': '', 'extends': '', 'comments': '/**\n* Clears the table arrays.  Useful if multiple tables are being generated\n*\n* @return\tCI_Table\n*/', 'function_name': 'clear'}]
[{'className': 'CI_Trackback', 'params': '', 'extends': '', 'comments': '/**\n* Constructor\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Trackback', 'params': '$tb_data', 'extends': '', 'comments': '/**\n* Send Trackback\n*\n* @param\tarray\n* @return\tbool\n*/', 'function_name': 'send'}, {'className': 'CI_Trackback', 'params': '', 'extends': '', 'comments': '/**\n* Receive Trackback  Data\n*\n* This function simply validates the incoming TB data.\n* It returns FALSE on failure and TRUE on success.\n* If the data is valid it is set to the $this->data array\n* so that it can be inserted into a database.\n*\n* @return\tbool\n*/', 'function_name': 'receive'}, {'className': 'CI_Trackback', 'params': "$message = 'Incomplete Information'", 'extends': '', 'comments': '/**\n* Send Trackback Error Message\n*\n* Allows custom errors to be set. By default it\n* sends the "incomplete information" error, as that\'s\n* the most common one.\n*\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'send_error'}, {'className': 'CI_Trackback', 'params': '', 'extends': '', 'comments': '/**\n* Send Trackback Success Message\n*\n* This should be called when a trackback has been\n* successfully received and inserted.\n*\n* @return\tvoid\n*/', 'function_name': 'send_success'}, {'className': 'CI_Trackback', 'params': '$item', 'extends': '', 'comments': '/**\n* Fetch a particular item\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'data'}, {'className': 'CI_Trackback', 'params': '$url, $data', 'extends': '', 'comments': '/**\n* Process Trackback\n*\n* Opens a socket connection and passes the data to\n* the server. Returns TRUE on success, FALSE on failure\n*\n* @param\tstring\n* @param\tstring\n* @return\tbool\n*/', 'function_name': 'process'}, {'className': 'CI_Trackback', 'params': '$urls', 'extends': '', 'comments': '/**\n* Extract Trackback URLs\n*\n* This function lets multiple trackbacks be sent.\n* It takes a string of URLs (separated by comma or\n* space) and puts each URL into an array\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'extract_urls'}, {'className': 'CI_Trackback', 'params': '&$url', 'extends': '', 'comments': '/**\n* Validate URL\n*\n* Simply adds "http://" if missing\n*\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'validate_url'}, {'className': 'CI_Trackback', 'params': '$url', 'extends': '', 'comments': "/**\n* Find the Trackback URL's ID\n*\n* @param\tstring\n* @return\tstring\n*/", 'function_name': 'get_id'}, {'className': 'CI_Trackback', 'params': '$str', 'extends': '', 'comments': '/**\n* Convert Reserved XML characters to Entities\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'convert_xml'}, {'className': 'CI_Trackback', 'params': "$str, $n = 500, $end_char = '&#8230;'", 'extends': '', 'comments': '/**\n* Character limiter\n*\n* Limits the string based on the character count. Will preserve complete words.\n*\n* @param\tstring\n* @param\tint\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'limit_characters'}, {'className': 'CI_Trackback', 'params': '$str', 'extends': '', 'comments': '/**\n* High ASCII to Entities\n*\n* Converts Hight ascii text and MS Word special chars\n* to character entities\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'convert_ascii'}, {'className': 'CI_Trackback', 'params': '$msg', 'extends': '', 'comments': '/**\n* Set error message\n*\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'set_error'}, {'className': 'CI_Trackback', 'params': "$open = '<p>', $close = '</p>'", 'extends': '', 'comments': '/**\n* Show error messages\n*\n* @param\tstring\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'display_errors'}]
[{'className': 'CI_Typography', 'params': '$str, $reduce_linebreaks = FALSE', 'extends': '', 'comments': '/**\n* Auto Typography\n*\n* This function converts text, making it typographically correct:\n*\t- Converts double spaces into paragraphs.\n*\t- Converts single line breaks into <br /> tags\n*\t- Converts single and double quotes into correctly facing curly quote entities.\n*\t- Converts three dots into ellipsis.\n*\t- Converts double dashes into em-dashes.\n*  - Converts two spaces into entities\n*\n* @param\tstring\n* @param\tbool\twhether to reduce more then two consecutive newlines to two\n* @return\tstring\n*/', 'function_name': 'auto_typography'}, {'className': 'CI_Typography', 'params': '$str', 'extends': '', 'comments': '/**\n* Format Characters\n*\n* This function mainly converts double and single quotes\n* to curly entities, but it also converts em-dashes,\n* double spaces, and ampersands\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'format_characters'}, {'className': 'CI_Typography', 'params': '$str', 'extends': '', 'comments': '/**\n* Convert newlines to HTML line breaks except within PRE tags\n*\n* @param\tstring\n* @return\tstring\n*/', 'function_name': 'nl2br_except_pre'}]
[{'className': 'CI_Unit_test', 'params': '', 'extends': '', 'comments': '/**\n* Constructor\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Unit_test', 'params': '$items', 'extends': '', 'comments': '/**\n* Run the tests\n*\n* Runs the supplied tests\n*\n* @param\tarray\t$items\n* @return\tvoid\n*/', 'function_name': 'set_test_items'}, {'className': 'CI_Unit_test', 'params': "$test, $expected = TRUE, $test_name = 'undefined', $notes = ''", 'extends': '', 'comments': '/**\n* Run the tests\n*\n* Runs the supplied tests\n*\n* @param\tmixed\t$test\n* @param\tmixed\t$expected\n* @param\tstring\t$test_name\n* @param\tstring\t$notes\n* @return\tstring\n*/', 'function_name': 'run'}, {'className': 'CI_Unit_test', 'params': '$result = array()', 'extends': '', 'comments': '/**\n* Generate a report\n*\n* Displays a table with the test data\n*\n* @param\tarray\t $result\n* @return\tstring\n*/', 'function_name': 'report($result = array'}, {'className': 'CI_Unit_test', 'params': '$state = TRUE', 'extends': '', 'comments': '/**\n* Use strict comparison\n*\n* Causes the evaluation to use === rather than ==\n*\n* @param\tbool\t$state\n* @return\tvoid\n*/', 'function_name': 'use_strict'}, {'className': 'CI_Unit_test', 'params': '$state = TRUE', 'extends': '', 'comments': '/**\n* Make Unit testing active\n*\n* Enables/disables unit testing\n*\n* @param\tbool\n* @return\tvoid\n*/', 'function_name': 'active'}, {'className': 'CI_Unit_test', 'params': '$results = array()', 'extends': '', 'comments': '/**\n* Result Array\n*\n* Returns the raw result data\n*\n* @param\tarray\t$results\n* @return\tarray\n*/', 'function_name': 'result($results = array'}, {'className': 'CI_Unit_test', 'params': '$template', 'extends': '', 'comments': '/**\n* Set the template\n*\n* This lets us set the template to be used to display results\n*\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'set_template'}, {'className': 'CI_Unit_test', 'params': '$test', 'extends': '', 'comments': '/**\n* Helper function to test boolean TRUE\n*\n* @param\tmixed\t$test\n* @return\tbool\n*/', 'function_name': 'is_true'}, {'className': 'CI_Unit_test', 'params': '$test', 'extends': '', 'comments': '/**\n* Helper function to test boolean FALSE\n*\n* @param\tmixed\t$test\n* @return\tbool\n*/', 'function_name': 'is_false'}]
[{'className': 'CI_Upload', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* Constructor\n*\n* @param\tarray\t$config\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}, {'className': 'CI_Upload', 'params': 'array $config = array(), $reset = TRUE', 'extends': '', 'comments': '/**\n* Initialize preferences\n*\n* @param\tarray\t$config\n* @param\tbool\t$reset\n* @return\tCI_Upload\n*/', 'function_name': 'initialize(array $config = array'}, {'className': 'CI_Upload', 'params': "$field = 'userfile'", 'extends': '', 'comments': '/**\n* Perform the file upload\n*\n* @param\tstring\t$field\n* @return\tbool\n*/', 'function_name': 'do_upload'}, {'className': 'CI_Upload', 'params': '$index = NULL', 'extends': '', 'comments': '/**\n* Finalized Data Array\n*\n* Returns an associative array containing all of the information\n* related to the upload, allowing the developer easy access in one array.\n*\n* @param\tstring\t$index\n* @return\tmixed\n*/', 'function_name': 'data'}, {'className': 'CI_Upload', 'params': '$path', 'extends': '', 'comments': '/**\n* Set Upload Path\n*\n* @param\tstring\t$path\n* @return\tCI_Upload\n*/', 'function_name': 'set_upload_path'}, {'className': 'CI_Upload', 'params': '$path, $filename', 'extends': '', 'comments': '/**\n* Set the file name\n*\n* This function takes a filename/path as input and looks for the\n* existence of a file with the same name. If found, it will append a\n* number to the end of the filename to avoid overwriting a pre-existing file.\n*\n* @param\tstring\t$path\n* @param\tstring\t$filename\n* @return\tstring\n*/', 'function_name': 'set_filename'}, {'className': 'CI_Upload', 'params': '$n', 'extends': '', 'comments': '/**\n* Set Maximum File Size\n*\n* @param\tint\t$n\n* @return\tCI_Upload\n*/', 'function_name': 'set_max_filesize'}, {'className': 'CI_Upload', 'params': '$n', 'extends': '', 'comments': '/**\n* Set Maximum File Name Length\n*\n* @param\tint\t$n\n* @return\tCI_Upload\n*/', 'function_name': 'set_max_filename'}, {'className': 'CI_Upload', 'params': '$n', 'extends': '', 'comments': '/**\n* Set Maximum Image Width\n*\n* @param\tint\t$n\n* @return\tCI_Upload\n*/', 'function_name': 'set_max_width'}, {'className': 'CI_Upload', 'params': '$n', 'extends': '', 'comments': '/**\n* Set Maximum Image Height\n*\n* @param\tint\t$n\n* @return\tCI_Upload\n*/', 'function_name': 'set_max_height'}, {'className': 'CI_Upload', 'params': '$n', 'extends': '', 'comments': '/**\n* Set minimum image width\n*\n* @param\tint\t$n\n* @return\tCI_Upload\n*/', 'function_name': 'set_min_width'}, {'className': 'CI_Upload', 'params': '$n', 'extends': '', 'comments': '/**\n* Set minimum image height\n*\n* @param\tint\t$n\n* @return\tCI_Upload\n*/', 'function_name': 'set_min_height'}, {'className': 'CI_Upload', 'params': '$types', 'extends': '', 'comments': '/**\n* Set Allowed File Types\n*\n* @param\tmixed\t$types\n* @return\tCI_Upload\n*/', 'function_name': 'set_allowed_types'}, {'className': 'CI_Upload', 'params': "$path = ''", 'extends': '', 'comments': '/**\n* Set Image Properties\n*\n* Uses GD to determine the width/height/type of image\n*\n* @param\tstring\t$path\n* @return\tCI_Upload\n*/', 'function_name': 'set_image_properties'}, {'className': 'CI_Upload', 'params': '$flag = FALSE', 'extends': '', 'comments': '/**\n* Set XSS Clean\n*\n* Enables the XSS flag so that the file that was uploaded\n* will be run through the XSS filter.\n*\n* @param\tbool\t$flag\n* @return\tCI_Upload\n*/', 'function_name': 'set_xss_clean'}, {'className': 'CI_Upload', 'params': '', 'extends': '', 'comments': '/**\n* Validate the image\n*\n* @return\tbool\n*/', 'function_name': 'is_image'}, {'className': 'CI_Upload', 'params': '$ignore_mime = FALSE', 'extends': '', 'comments': '/**\n* Verify that the filetype is allowed\n*\n* @param\tbool\t$ignore_mime\n* @return\tbool\n*/', 'function_name': 'is_allowed_filetype'}, {'className': 'CI_Upload', 'params': '', 'extends': '', 'comments': '/**\n* Verify that the file is within the allowed size\n*\n* @return\tbool\n*/', 'function_name': 'is_allowed_filesize'}, {'className': 'CI_Upload', 'params': '', 'extends': '', 'comments': '/**\n* Verify that the image is within the allowed width/height\n*\n* @return\tbool\n*/', 'function_name': 'is_allowed_dimensions'}, {'className': 'CI_Upload', 'params': '', 'extends': '', 'comments': '/**\n* Validate Upload Path\n*\n* Verifies that it is a valid upload path with proper permissions.\n*\n* @return\tbool\n*/', 'function_name': 'validate_upload_path'}, {'className': 'CI_Upload', 'params': '$filename', 'extends': '', 'comments': '/**\n* Extract the file extension\n*\n* @param\tstring\t$filename\n* @return\tstring\n*/', 'function_name': 'get_extension'}, {'className': 'CI_Upload', 'params': '$filename, $length', 'extends': '', 'comments': '/**\n* Limit the File Name Length\n*\n* @param\tstring\t$filename\n* @param\tint\t$length\n* @return\tstring\n*/', 'function_name': 'limit_filename_length'}, {'className': 'CI_Upload', 'params': '', 'extends': '', 'comments': "/**\n* Runs the file through the XSS clean function\n*\n* This prevents people from embedding malicious code in their files.\n* I'm not sure that it won't negatively affect certain files in unexpected ways,\n* but so far I haven't found that it causes trouble.\n*\n* @return\tstring\n*/", 'function_name': 'do_xss_clean'}, {'className': 'CI_Upload', 'params': "$msg, $log_level = 'error'", 'extends': '', 'comments': '/**\n* Set an error message\n*\n* @param\tstring\t$msg\n* @return\tCI_Upload\n*/', 'function_name': 'set_error'}, {'className': 'CI_Upload', 'params': "$open = '<p>', $close = '</p>'", 'extends': '', 'comments': '/**\n* Display the error message\n*\n* @param\tstring\t$open\n* @param\tstring\t$close\n* @return\tstring\n*/', 'function_name': 'display_errors'}]
[{'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Constructor\n*\n* Sets the User Agent and runs the compilation routine\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_User_agent', 'params': '$key = NULL', 'extends': '', 'comments': '/**\n* Is Browser\n*\n* @param\tstring\t$key\n* @return\tbool\n*/', 'function_name': 'is_browser'}, {'className': 'CI_User_agent', 'params': '$key = NULL', 'extends': '', 'comments': '/**\n* Is Robot\n*\n* @param\tstring\t$key\n* @return\tbool\n*/', 'function_name': 'is_robot'}, {'className': 'CI_User_agent', 'params': '$key = NULL', 'extends': '', 'comments': '/**\n* Is Mobile\n*\n* @param\tstring\t$key\n* @return\tbool\n*/', 'function_name': 'is_mobile'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Is this a referral from another site?\n*\n* @return\tbool\n*/', 'function_name': 'is_referral'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Agent String\n*\n* @return\tstring\n*/', 'function_name': 'agent_string'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Get Platform\n*\n* @return\tstring\n*/', 'function_name': 'platform'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Get Browser Name\n*\n* @return\tstring\n*/', 'function_name': 'browser'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Get the Browser Version\n*\n* @return\tstring\n*/', 'function_name': 'version'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Get The Robot Name\n*\n* @return\tstring\n*/', 'function_name': 'robot'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Get the Mobile Device\n*\n* @return\tstring\n*/', 'function_name': 'mobile'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Get the referrer\n*\n* @return\tbool\n*/', 'function_name': 'referrer'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Get the accepted languages\n*\n* @return\tarray\n*/', 'function_name': 'languages'}, {'className': 'CI_User_agent', 'params': '', 'extends': '', 'comments': '/**\n* Get the accepted Character Sets\n*\n* @return\tarray\n*/', 'function_name': 'charsets'}, {'className': 'CI_User_agent', 'params': "$lang = 'en'", 'extends': '', 'comments': '/**\n* Test for a particular language\n*\n* @param\tstring\t$lang\n* @return\tbool\n*/', 'function_name': 'accept_lang'}, {'className': 'CI_User_agent', 'params': "$charset = 'utf-8'", 'extends': '', 'comments': '/**\n* Test for a particular character set\n*\n* @param\tstring\t$charset\n* @return\tbool\n*/', 'function_name': 'accept_charset'}, {'className': 'CI_User_agent', 'params': '$string', 'extends': '', 'comments': '/**\n* Parse a custom user-agent string\n*\n* @param\tstring\t$string\n* @return\tvoid\n*/', 'function_name': 'parse'}]
[{'className': 'CI_Xmlrpc', 'params': '$config = array()', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Constructor\n*\n* Initializes property default values\n*\n* @param\tarray\t$config\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}, {'className': 'CI_Xmlrpc', 'params': '$config = array()', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Initialize\n*\n* @param\tarray\t$config\n* @return\tvoid\n*/', 'function_name': 'initialize($config = array'}, {'className': 'CI_Xmlrpc', 'params': '$url, $port = 80, $proxy = FALSE, $proxy_port = 8080', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Parse server URL\n*\n* @param\tstring\t$url\n* @param\tint\t$port\n* @param\tstring\t$proxy\n* @param\tint\t$proxy_port\n* @return\tvoid\n*/', 'function_name': 'server'}, {'className': 'CI_Xmlrpc', 'params': '$seconds = 5', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Set Timeout\n*\n* @param\tint\t$seconds\n* @return\tvoid\n*/', 'function_name': 'timeout'}, {'className': 'CI_Xmlrpc', 'params': '$function', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Set Methods\n*\n* @param\tstring\t$function\tMethod name\n* @return\tvoid\n*/', 'function_name': 'method'}, {'className': 'CI_Xmlrpc', 'params': '$incoming', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Take Array of Data and Create Objects\n*\n* @param\tarray\t$incoming\n* @return\tvoid\n*/', 'function_name': 'request'}, {'className': 'CI_Xmlrpc', 'params': '$flag = TRUE', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Set Debug\n*\n* @param\tbool\t$flag\n* @return\tvoid\n*/', 'function_name': 'set_debug'}, {'className': 'CI_Xmlrpc', 'params': '$value', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Values Parsing\n*\n* @param\tmixed\t$value\n* @return\tobject\n*/', 'function_name': 'values_parsing'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Sends XML-RPC Request\n*\n* @return\tbool\n*/', 'function_name': 'send_request'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Returns Error\n*\n* @return\tstring\n*/', 'function_name': 'display_error'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Returns Remote Server Response\n*\n* @return\tstring\n*/', 'function_name': 'display_response'}, {'className': 'CI_Xmlrpc', 'params': '$number, $message', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Sends an Error Message for Server Request\n*\n* @param\tint\t$number\n* @param\tstring\t$message\n* @return\tobject\n*/', 'function_name': 'send_error_message'}, {'className': 'CI_Xmlrpc', 'params': '$response', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Send Response for Server Request\n*\n* @param\tarray\t$response\n* @return\tobject\n*/', 'function_name': 'send_response'}, {'className': 'CI_Xmlrpc', 'params': '$path, $server, $port = 80, $proxy = FALSE, $proxy_port = 8080', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Constructor\n*\n* @param\tstring\t$path\n* @param\tobject\t$server\n* @param\tint\t$port\n* @param\tstring\t$proxy\n* @param\tint\t$proxy_port\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Xmlrpc', 'params': '$msg', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Send message\n*\n* @param\tmixed\t$msg\n* @return\tobject\n*/', 'function_name': 'send'}, {'className': 'CI_Xmlrpc', 'params': '$msg', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Send payload\n*\n* @param\tobject\t$msg\n* @return\tobject\n*/', 'function_name': 'sendPayload'}, {'className': 'CI_Xmlrpc', 'params': "$val, $code = 0, $fstr = ''", 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Constructor\n*\n* @param\tmixed\t$val\n* @param\tint\t$code\n* @param\tstring\t$fstr\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Fault code\n*\n* @return\tint\n*/', 'function_name': 'faultCode'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Fault string\n*\n* @return\tstring\n*/', 'function_name': 'faultString'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Value\n*\n* @return\tmixed\n*/', 'function_name': 'value'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Prepare response\n*\n* @return\tstring\txml\n*/', 'function_name': 'prepare_response'}, {'className': 'CI_Xmlrpc', 'params': '$array = NULL', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Decode\n*\n* @param\tmixed\t$array\n* @return\tarray\n*/', 'function_name': 'decode'}, {'className': 'CI_Xmlrpc', 'params': '$xmlrpc_val', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* XML-RPC Object to PHP Types\n*\n* @param\tobject\n* @return\tarray\n*/', 'function_name': 'xmlrpc_decoder'}, {'className': 'CI_Xmlrpc', 'params': '$time, $utc = FALSE', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* ISO-8601 time to server or UTC time\n*\n* @param\tstring\n* @param\tbool\n* @return\tint\tunix timestamp\n*/', 'function_name': 'iso8601_decode'}, {'className': 'CI_Xmlrpc', 'params': '$method, $pars = FALSE', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Constructor\n*\n* @param\tstring\t$method\n* @param\tarray\t$pars\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Create Payload to Send\n*\n* @return\tvoid\n*/', 'function_name': 'createPayload'}, {'className': 'CI_Xmlrpc', 'params': '$fp', 'extends': 'CI_Xmlrpc', 'comments': "/**\n* Parse External XML-RPC Server's Response\n*\n* @param\tresource\n* @return\tobject\n*/", 'function_name': 'parseResponse'}, {'className': 'CI_Xmlrpc', 'params': '$the_parser, $name', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Start Element Handler\n*\n* @param\tstring\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'open_tag'}, {'className': 'CI_Xmlrpc', 'params': '$the_parser, $name', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* End Element Handler\n*\n* @param\tstring\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'closing_tag'}, {'className': 'CI_Xmlrpc', 'params': '$the_parser, $data', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Parse character data\n*\n* @param\tstring\n* @param\tstring\n* @return\tvoid\n*/', 'function_name': 'character_data'}, {'className': 'CI_Xmlrpc', 'params': '$par', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Add parameter\n*\n* @param\tmixed\n* @return\tvoid\n*/', 'function_name': 'addParam'}, {'className': 'CI_Xmlrpc', 'params': 'array $array = array()', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Output parameters\n*\n* @param\tarray\t$array\n* @return\tarray\n*/', 'function_name': 'output_parameters(array $array = array'}, {'className': 'CI_Xmlrpc', 'params': '$param', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Decode message\n*\n* @param\tobject\n* @return\tmixed\n*/', 'function_name': 'decode_message'}, {'className': 'CI_Xmlrpc', 'params': "$val = -1, $type = ''", 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Constructor\n*\n* @param\tmixed\t$val\n* @param\tstring\t$type\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Xmlrpc', 'params': "$val, $type = 'string'", 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Add scalar value\n*\n* @param\tscalar\n* @param\tstring\n* @return\tint\n*/', 'function_name': 'addScalar'}, {'className': 'CI_Xmlrpc', 'params': '$vals', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Add array value\n*\n* @param\tarray\n* @return\tint\n*/', 'function_name': 'addArray'}, {'className': 'CI_Xmlrpc', 'params': '$vals', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Add struct value\n*\n* @param\tobject\n* @return\tint\n*/', 'function_name': 'addStruct'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Get value type\n*\n* @return\tstring\n*/', 'function_name': 'kindOf'}, {'className': 'CI_Xmlrpc', 'params': '$typ, $val', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Serialize data\n*\n* @param\tstring\n* @param\tmixed\n* @return\tstring\n*/', 'function_name': 'serializedata'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Serialize class\n*\n* @return\tstring\n*/', 'function_name': 'serialize_class'}, {'className': 'CI_Xmlrpc', 'params': '$o', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Serialize value\n*\n* @param\tobject\n* @return\tstring\n*/', 'function_name': 'serializeval'}, {'className': 'CI_Xmlrpc', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Scalar value\n*\n* @return\tmixed\n*/', 'function_name': 'scalarval'}, {'className': 'CI_Xmlrpc', 'params': '$time, $utc = FALSE', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Encode time in ISO-8601 form.\n* Useful for sending time in XML-RPC\n*\n* @param\tint\tunix timestamp\n* @param\tbool\n* @return\tstring\n*/', 'function_name': 'iso8601_encode'}]
[{'className': 'CI_Xmlrpcs', 'params': '$config = array()', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Initialize XMLRPC class\n*\n* @param\tarray\t$config\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}, {'className': 'CI_Xmlrpcs', 'params': '$config = array()', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Initialize Prefs and Serve\n*\n* @param\tmixed\n* @return\tvoid\n*/', 'function_name': 'initialize($config = array'}, {'className': 'CI_Xmlrpcs', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Setting of System Methods\n*\n* @return\tvoid\n*/', 'function_name': 'set_system_methods'}, {'className': 'CI_Xmlrpcs', 'params': '', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Main Server Function\n*\n* @return\tvoid\n*/', 'function_name': 'serve'}, {'className': 'CI_Xmlrpcs', 'params': '$methodname, $function, $sig, $doc', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Add Method to Class\n*\n* @param\tstring\tmethod name\n* @param\tstring\tfunction\n* @param\tstring\tsignature\n* @param\tstring\tdocstring\n* @return\tvoid\n*/', 'function_name': 'add_to_map'}, {'className': 'CI_Xmlrpcs', 'params': "$data = ''", 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Parse Server Request\n*\n* @param\tstring\tdata\n* @return\tobject\txmlrpc response\n*/', 'function_name': 'parseRequest'}, {'className': 'CI_Xmlrpcs', 'params': '$m', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Server Function: List Methods\n*\n* @param\tmixed\n* @return\tobject\n*/', 'function_name': 'listMethods'}, {'className': 'CI_Xmlrpcs', 'params': '$m', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Server Function: Return Signature for Method\n*\n* @param\tmixed\n* @return\tobject\n*/', 'function_name': 'methodSignature'}, {'className': 'CI_Xmlrpcs', 'params': '$m', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Server Function: Doc String for Method\n*\n* @param\tmixed\n* @return\tobject\n*/', 'function_name': 'methodHelp'}, {'className': 'CI_Xmlrpcs', 'params': '$m', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Server Function: Multi-call\n*\n* @param\tmixed\n* @return\tobject\n*/', 'function_name': 'multicall'}, {'className': 'CI_Xmlrpcs', 'params': '$err', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Multi-call Function: Error Handling\n*\n* @param\tmixed\n* @return\tobject\n*/', 'function_name': 'multicall_error'}, {'className': 'CI_Xmlrpcs', 'params': '$call', 'extends': 'CI_Xmlrpc', 'comments': '/**\n* Multi-call Function: Processes method\n*\n* @param\tmixed\n* @return\tobject\n*/', 'function_name': 'do_multicall'}]
[{'className': 'CI_Zip', 'params': '', 'extends': '', 'comments': '/**\n* Initialize zip compression class\n*\n* @return\tvoid\n*/', 'function_name': '__construct'}, {'className': 'CI_Zip', 'params': '$directory', 'extends': '', 'comments': '/**\n* Add Directory\n*\n* Lets you add a virtual directory into which you can place files.\n*\n* @param\tmixed\t$directory\tthe directory name. Can be string or array\n* @return\tvoid\n*/', 'function_name': 'add_dir'}, {'className': 'CI_Zip', 'params': '$filepath, $data = NULL', 'extends': '', 'comments': '/**\n* Add Data to Zip\n*\n* Lets you add files to the archive. If the path is included\n* in the filename it will be placed within a directory. Make\n* sure you use add_dir() first to create the folder.\n*\n* @param\tmixed\t$filepath\tA single filepath or an array of file => data pairs\n* @param\tstring\t$data\t\tSingle file contents\n* @return\tvoid\n*/', 'function_name': 'add_data'}, {'className': 'CI_Zip', 'params': '$path, $archive_filepath = FALSE', 'extends': '', 'comments': '/**\n* Read the contents of a file and add it to the zip\n*\n* @param\tstring\t$path\n* @param\tbool\t$archive_filepath\n* @return\tbool\n*/', 'function_name': 'read_file'}, {'className': 'CI_Zip', 'params': '$path, $preserve_filepath = TRUE, $root_path = NULL', 'extends': '', 'comments': '/**\n* Read a directory and add it to the zip.\n*\n* This function recursively reads a folder and everything it contains (including\n* sub-folders) and creates a zip based on it. Whatever directory structure\n* is in the original file path will be recreated in the zip file.\n*\n* @param\tstring\t$path\tpath to source directory\n* @param\tbool\t$preserve_filepath\n* @param\tstring\t$root_path\n* @return\tbool\n*/', 'function_name': 'read_dir'}, {'className': 'CI_Zip', 'params': '', 'extends': '', 'comments': '/**\n* Get the Zip file\n*\n* @return\tstring\t(binary encoded)\n*/', 'function_name': 'get_zip'}, {'className': 'CI_Zip', 'params': '$filepath', 'extends': '', 'comments': '/**\n* Write File to the specified directory\n*\n* Lets you write a file\n*\n* @param\tstring\t$filepath\tthe file name\n* @return\tbool\n*/', 'function_name': 'archive'}, {'className': 'CI_Zip', 'params': "$filename = 'backup.zip'", 'extends': '', 'comments': '/**\n* Download\n*\n* @param\tstring\t$filename\tthe file name\n* @return\tvoid\n*/', 'function_name': 'download'}, {'className': 'CI_Zip', 'params': '', 'extends': '', 'comments': '/**\n* Initialize Data\n*\n* Lets you clear current zip data. Useful if you need to create\n* multiple zips with different data.\n*\n* @return\tCI_Zip\n*/', 'function_name': 'clear_data'}]
False
[{'className': 'Benchmark_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Benchmark_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_mark'}, {'className': 'Benchmark_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_elapsed_time'}, {'className': 'Benchmark_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_memory_usage'}]
[{'className': 'Common_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_is_php'}, {'className': 'Common_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_stringify_attributes'}, {'className': 'Common_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_stringify_js_attributes'}, {'className': 'Common_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_html_escape'}, {'className': 'Common_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_remove_invisible_characters'}]
[{'className': 'hash_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_bootstrap'}, {'className': 'hash_test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* hash_equals() test\n*\n* Borrowed from PHP's own tests\n*\n* @depends\ttest_bootstrap\n*/", 'function_name': 'test_hash_equals'}, {'className': 'hash_test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* hash_pbkdf2() test\n*\n* Borrowed from PHP's own tests\n*\n* @depends\ttest_bootstrap\n*/", 'function_name': 'test_hash_pbkdf2'}]
[{'className': 'mbstring_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_bootstrap'}, {'className': 'mbstring_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @depends\ttest_bootstrap\n*/', 'function_name': 'test_mb_strlen'}, {'className': 'mbstring_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @depends\ttest_boostrap\n*/', 'function_name': 'test_mb_strpos'}, {'className': 'mbstring_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @depends\ttest_boostrap\n*/', 'function_name': 'test_mb_substr'}]
[{'className': 'password_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_bootstrap'}, {'className': 'password_test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* password_get_info() test\n*\n* Borrowed from PHP's own tests\n*\n* @depends\ttest_bootstrap\n*/", 'function_name': 'test_password_get_info'}, {'className': 'password_test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* password_hash() test\n*\n* Borrowed from PHP's own tests\n*\n* @depends\ttest_bootstrap\n*/", 'function_name': 'test_password_hash'}, {'className': 'password_test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* password_needs_rehash() test\n*\n* Borrowed from PHP's own tests\n*\n* @depends\ttest_password_get_info\n*/", 'function_name': 'test_password_needs_rehash'}, {'className': 'password_test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* password_verify() test\n*\n* Borrowed from PHP's own tests\n*\n* @depends\ttest_bootstrap\n*/", 'function_name': 'test_password_verify'}]
[{'className': 'standard_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_bootstrap'}, {'className': 'standard_test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* array_column() test\n*\n* Borrowed from PHP's own tests\n*\n* @depends\ttest_bootstrap\n*/", 'function_name': 'test_array_column'}, {'className': 'standard_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '__toString'}, {'className': 'standard_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '__toString'}]
[{'className': 'Config_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Config_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_item'}, {'className': 'Config_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_item'}, {'className': 'Config_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_slash_item'}, {'className': 'Config_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_base_url'}, {'className': 'Config_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_site_url'}, {'className': 'Config_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_load'}, {'className': 'Config_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_load_nonexistent'}]
[{'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_not_exists'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_exist'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_exist_with_xss_clean'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_post_not_exists'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_post_exist'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_post_exist_with_xss_clean'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_post_get'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_post'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_cookie'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_server'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_fetch_from_array'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_valid_ip'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_method'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_is_ajax_request'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_input_stream'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_cookie'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_request_header'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_ip_address'}, {'className': 'Input_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_user_agent'}]
[{'className': 'Lang_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Lang_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_load'}, {'className': 'Lang_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_non_alpha_idiom'}, {'className': 'Lang_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_multiple_file_load'}, {'className': 'Lang_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_alternative_path_load'}, {'className': 'Lang_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @depends\ttest_load\n*/', 'function_name': 'test_line'}]
[{'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_library'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_bad_library'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_library_extension'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_library_config'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_load_library_in_application_dir'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_driver'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_models'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_model_subdir'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_non_existent_model'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_invalid_model'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_load_view'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_non_existent_view'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_file'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_vars'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_clear_vars'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_helper'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_non_existent_helper'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_loading_multiple_helpers'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_language'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_packages'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_remove_package_path'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_load_config'}, {'className': 'Loader_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_initialize'}]
[{'className': 'Log_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_configuration'}, {'className': 'Log_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_format_line'}]
[{'className': 'Model_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Model_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test__get'}]
[{'className': 'Output_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Output_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_get_append_output'}, {'className': 'Output_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_content_type'}, {'className': 'Output_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_header'}]
[{'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_csrf_verify'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_csrf_verify_invalid'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_csrf_verify_valid'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_csrf_hash'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_csrf_token_name'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_clean'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_clean_string_array'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_clean_image_valid'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_clean_image_invalid'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_clean_entity_double_encoded'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'text_xss_clean_js_link_removal'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_clean_js_img_removal'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_clean_sanitize_naughty_html_tags'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_clean_sanitize_naughty_html_attributes'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @depends test_xss_clean_sanitize_naughty_html_tags\n* @depends test_xss_clean_sanitize_naughty_html_attributes\n*/', 'function_name': 'test_naughty_html_plus_evil_attributes'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_hash'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_random_bytes'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_entity_decode'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_sanitize_filename'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_strip_image_tags'}, {'className': 'Security_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_csrf_set_hash'}]
[{'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_uri_string'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_fetch_uri_string'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_explode_segments'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @runInSeparateProcess\n*/', 'function_name': 'test_filter_uri_passing'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @runInSeparateProcess\n*/', 'function_name': 'test_filter_uri_throws_error'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_segment'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rsegment'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_uri_to_assoc'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_ruri_to_assoc'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_assoc_to_uri'}, {'className': 'URI_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_slash_segment'}]
[{'className': 'Utf8_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test___constructUTF8_ENABLED'}, {'className': 'Utf8_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test__constructUTF8_DISABLED'}, {'className': 'Utf8_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* is_ascii() test\n*\n* Note: DO NOT move this below test_clean_string()\n*/', 'function_name': 'test_is_ascii'}, {'className': 'Utf8_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* clean_string() test\n*\n* @depends\ttest_is_ascii\n* @covers\tCI_Utf8::clean_string\n*/', 'function_name': 'test_clean_string'}, {'className': 'Utf8_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* convert_to_utf8() test\n*\n* @covers\tCI_Utf8::convert_to_utf8\n*/', 'function_name': 'test_convert_to_utf8'}]
[{'className': 'DB_driver_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_initialize'}]
[{'className': 'DB_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_db_invalid'}, {'className': 'DB_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_db_valid'}, {'className': 'DB_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_db_failover'}]
[{'className': 'Count_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Count_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_count_all'}, {'className': 'Count_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_count_all_results'}, {'className': 'Count_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_count_all_results_limit'}]
[{'className': 'Delete_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Delete_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_delete'}, {'className': 'Delete_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_delete_several_tables'}]
[{'className': 'Distinct_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Distinct_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_distinct'}]
[{'className': 'Empty_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Empty_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_empty_table'}]
[{'className': 'Escape_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Escape_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_escape_like_percent_sign'}, {'className': 'Escape_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_escape_like_backslash_sign'}]
[{'className': 'From_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'From_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_from_simple'}, {'className': 'From_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_from_with_where'}]
[{'className': 'Get_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Get_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_get_simple'}, {'className': 'Get_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_get_where'}]
[{'className': 'Group_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Group_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_group_by'}, {'className': 'Group_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_having_by'}, {'className': 'Group_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_having_in'}, {'className': 'Group_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_or_having_in'}, {'className': 'Group_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_having_not_in'}, {'className': 'Group_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_or_having_not_in'}]
[{'className': 'Insert_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Insert_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_insert'}, {'className': 'Insert_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_insert_batch'}]
[{'className': 'Join_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Join_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_join_simple'}, {'className': 'Join_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_join_escape_is_null'}, {'className': 'Join_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_join_escape_multiple_conditions'}, {'className': 'Join_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_join_escape_multiple_conditions_with_parentheses'}]
[{'className': 'Like_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Like_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_like'}, {'className': 'Like_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_or_like'}, {'className': 'Like_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_not_like'}, {'className': 'Like_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_or_not_like'}, {'className': 'Like_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* GitHub issue #273\n*\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_like_spaces_and_tabs'}]
[{'className': 'Limit_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Limit_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_limit'}, {'className': 'Limit_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_limit_and_offset'}]
[{'className': 'Order_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Order_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_order_ascending'}, {'className': 'Order_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_order_descending'}]
[{'className': 'Select_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Select_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_select_only_one_collumn'}, {'className': 'Select_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_select_min'}, {'className': 'Select_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_select_max'}, {'className': 'Select_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_select_avg'}, {'className': 'Select_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_select_sum'}]
[{'className': 'Truncate_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Truncate_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_truncate'}, {'className': 'Truncate_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_truncate_with_from'}]
[{'className': 'Update_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Update_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_update'}, {'className': 'Update_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_update_with_set'}]
[{'className': 'Where_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Where_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_where_simple_key_value'}, {'className': 'Where_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_where_custom_key_value'}, {'className': 'Where_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_where_associative_array'}, {'className': 'Where_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_where_custom_string'}, {'className': 'Where_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_where_or'}, {'className': 'Where_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_where_in'}, {'className': 'Where_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @see ./mocks/schema/skeleton.php\n*/', 'function_name': 'test_where_not_in'}, {'className': 'Where_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_issue4093'}]
[{'className': 'Array_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Array_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_element_with_existing_item'}, {'className': 'Array_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_random_element'}, {'className': 'Array_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_elements'}]
[{'className': 'Captcha_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_create_captcha'}]
[{'className': 'Cookie_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Cookie_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_cookie'}, {'className': 'Cookie_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_cookie'}, {'className': 'Cookie_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_delete_cookie'}]
[{'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_nice_date'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_now_local'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_now_utc'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_mdate'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_timespan'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_days_in_month'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_local_to_gmt'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_gmt_to_local'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_mysql_to_unix'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_unix_to_human'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_human_to_unix'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_timezones'}, {'className': 'Date_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_date_range'}]
[{'className': 'Directory_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Directory_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_directory_map'}]
[{'className': 'Download_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_force_download'}]
[{'className': 'File_helper_Test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'File_helper_Test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_octal_permissions'}, {'className': 'File_helper_Test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* More tests should happen here, since I'm not hitting the whole function.\n*/", 'function_name': 'test_symbolic_permissions'}, {'className': 'File_helper_Test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_mime_by_extension'}, {'className': 'File_helper_Test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_file_info'}, {'className': 'File_helper_Test', 'params': '$vals', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_test_get_file_info'}, {'className': 'File_helper_Test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_write_file'}]
[{'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_hidden'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_input'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_password'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_upload'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_textarea'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_dropdown'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_multiselect'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_fieldset'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_fieldset_close'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_checkbox'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_radio'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_submit'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_label'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_reset'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_button'}, {'className': 'Form_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_form_close'}]
[{'className': 'Html_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Html_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_heading'}, {'className': 'Html_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_heading_array_attributes'}, {'className': 'Html_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_heading_object_attributes'}, {'className': 'Html_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_img'}, {'className': 'Html_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_Ul'}, {'className': 'Html_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_meta'}]
[{'className': 'Inflector_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Inflector_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_singular'}, {'className': 'Inflector_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_plural'}, {'className': 'Inflector_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_camelize'}, {'className': 'Inflector_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_underscore'}, {'className': 'Inflector_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_humanize'}, {'className': 'Inflector_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_ordinal_format'}]
[{'className': 'Language_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_lang'}]
[{'className': 'Number_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Number_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_byte_format'}, {'className': 'Number_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_kb_format'}, {'className': 'Number_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_kb_format_medium'}, {'className': 'Number_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_kb_format_large'}, {'className': 'Number_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_mb_format'}, {'className': 'Number_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_gb_format'}, {'className': 'Number_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_tb_format'}]
[{'className': 'Path_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Path_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_realpath'}, {'className': 'Path_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_realpath_nonexistent_directory'}, {'className': 'Path_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_realpath_error_trigger'}]
[{'className': 'Security_helper_tests', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'setUp'}, {'className': 'Security_helper_tests', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xss_clean'}, {'className': 'Security_helper_tests', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_sanitize_filename'}, {'className': 'Security_helper_tests', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_strip_image_tags'}, {'className': 'Security_helper_tests', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_encode_php_tags'}]
[{'className': 'String_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'String_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_strip_slashes'}, {'className': 'String_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_strip_quotes'}, {'className': 'String_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_quotes_to_entities'}, {'className': 'String_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_reduce_double_slashes'}, {'className': 'String_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_reduce_multiples'}, {'className': 'String_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_random_string'}, {'className': 'String_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_increment_string'}]
[{'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_word_limiter'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_character_limiter'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_ascii_to_entities'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_entities_to_ascii'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_convert_accented_characters'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_censored_words'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_highlight_code'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @runInSeparateProcess\n*/', 'function_name': 'test_highlight_phrase'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_ellipsize'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_word_wrap'}, {'className': 'Text_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_default_word_wrap_charlim'}]
[{'className': 'Url_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Url_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @runInSeparateProcess\n*/', 'function_name': 'test_url_title'}, {'className': 'Url_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* @runInSeparateProcess\n*/', 'function_name': 'test_url_title_extra_dashes'}, {'className': 'Url_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_prep_url'}, {'className': 'Url_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_auto_link_url'}, {'className': 'Url_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_pull_675'}, {'className': 'Url_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_issue_5331'}]
[{'className': 'Xml_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Xml_helper_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_xml_convert'}]
[{'className': 'Calendar_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Calendar_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_initialize'}, {'className': 'Calendar_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_generate'}, {'className': 'Calendar_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_month_name'}, {'className': 'Calendar_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_day_names'}, {'className': 'Calendar_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_adjust_date'}, {'className': 'Calendar_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_total_days'}, {'className': 'Calendar_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_default_template'}]
[{'className': 'Driver_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Set up test framework\n*/', 'function_name': 'set_up'}, {'className': 'Driver_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test driver child loading\n*/', 'function_name': 'test_load_driver'}, {'className': 'Driver_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test loading lowercase from app path\n*/', 'function_name': 'test_load_app_driver'}, {'className': 'Driver_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test loading driver extension\n*/', 'function_name': 'test_load_driver_ext'}, {'className': 'Driver_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test decorating driver with parent attributes\n*/', 'function_name': 'test_decorate'}]
[{'className': 'Encrypt_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Encrypt_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_encode'}, {'className': 'Encrypt_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_decode'}, {'className': 'Encrypt_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_optional_key'}, {'className': 'Encrypt_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_default_cipher'}, {'className': 'Encrypt_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_cipher'}, {'className': 'Encrypt_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_default_mode'}, {'className': 'Encrypt_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_mode'}]
[{'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* __construct test\n*\n* Covers behavior with $config['encryption_key'] set or not\n*/", 'function_name': 'test___construct'}, {'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': "/**\n* hkdf() test\n*\n* Applies test vectors described in Appendix A(1-3) RFC5869.\n* Described vectors 4-7 SHA-1, which we don't support and are\n* therefore excluded.\n*\n* Because our implementation is a single method instead of being\n* split into hkdf_extract() and hkdf_expand(), we cannot test for\n* the PRK value. As long as the OKM is correct though, it's fine.\n*\n* @link\thttps://tools.ietf.org/rfc/rfc5869.txt\n*/", 'function_name': 'test_hkdf'}, {'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* _get_params() test\n*/', 'function_name': 'test__get_params'}, {'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* initialize(), encrypt(), decrypt() test\n*\n* Testing the three methods separately is not realistic as they are\n* designed to work together. A more thorough test for initialize()\n* though is the OpenSSL/MCrypt compatibility test.\n*\n* @depends\ttest_hkdf\n* @depends\ttest__get_params\n*/', 'function_name': 'test_initialize_encrypt_decrypt'}, {'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* encrypt(), decrypt test with custom parameters\n*\n* @depends\ttest___get_params\n*/', 'function_name': 'test_encrypt_decrypt_custom'}, {'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* _mcrypt_get_handle() test\n*/', 'function_name': 'test__mcrypt_get_handle'}, {'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* _openssl_get_handle() test\n*/', 'function_name': 'test__openssl_mcrypt_get_handle'}, {'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* OpenSSL/MCrypt portability test\n*\n* Amongst the obvious stuff, _cipher_alias() is also tested here.\n*/', 'function_name': 'test_portability'}, {'className': 'Encryption_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* __get() test\n*/', 'function_name': 'test_magic_get'}]
[{'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_empty_array_input'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_required'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_is_array'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_matches'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_differs'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_min_length'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_max_length'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_exact_length'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_greater_than'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_greater_than_equal_to'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_less_than'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_less_than_equal_to'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_in_list'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_alpha'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_alpha_numeric'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_alpha_numeric_spaces'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_alpha_dash'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_numeric'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_integer'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_decimal'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_is_natural'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_is_natural_no_zero'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_valid_url'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_valid_email'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_valid_emails'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_valid_ip'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_valid_mac'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_rule_valid_base64'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_data'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_message'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_error_delimiters'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_error_array'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_error_string'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_run'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_rules_exception'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_has_rule'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_value'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_issue_5202'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_select'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_radio'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_checkbox'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_regex_match'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_prep_url'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_encode_php_tags'}, {'className': 'Form_validation_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_validated_data_assignment'}, {'className': 'Form_validation_test', 'params': '$rules, $values', 'extends': 'CI_TestCase', 'comments': '/**\n* Run rules\n*\n* Helper method to set rules and run them at once, not\n* an actual test case.\n*/', 'function_name': 'run_rules'}]
[{'className': 'Parser_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Parser_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_delimiters'}, {'className': 'Parser_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_parse_string'}, {'className': 'Parser_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_parse'}, {'className': 'Parser_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_parse_no_template'}, {'className': 'Parser_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_parse_var_pair'}, {'className': 'Parser_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_mismatched_var_pair'}]
[{'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Set up test framework\n*/', 'function_name': 'set_up'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Tear down test framework\n*/', 'function_name': 'tear_down'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test set_userdata() function\n*/', 'function_name': 'test_set_userdata'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the has_userdata() function\n*/', 'function_name': 'test_has_userdata'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the all_userdata() function\n*/', 'function_name': 'test_all_userdata'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the unset_userdata() function\n*/', 'function_name': 'test_unset_userdata'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the flashdata() functions\n*/', 'function_name': 'test_flashdata'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the keep_flashdata() function\n*/', 'function_name': 'test_keep_flashdata'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_keep_flashdata_with_array'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the all_flashdata() function\n*/', 'function_name': 'test_all_flashdata'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the tempdata() functions\n*/', 'function_name': 'test_set_tempdata'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the unset_tempdata() function\n*/', 'function_name': 'test_unset_tempdata'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the sess_regenerate() function\n*/', 'function_name': 'test_sess_regenerate'}, {'className': 'Session_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Test the sess_destroy() function\n*/', 'function_name': 'test_sess_destroy'}]
[{'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_template'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_empty'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_caption'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/*\n* @depends\ttest_prep_args\n*/', 'function_name': 'test_set_heading'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/*\n* @depends\ttest_prep_args\n*/', 'function_name': 'test_add_row'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_prep_args'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_default_template_keys'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_compile_template'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_make_columns'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_clear'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_from_array'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_from_object'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_generate'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'list_fields'}, {'className': 'Table_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'result_array'}]
[{'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '/**\n* Tests the format_characters() function.\n*\n* this can and should grow.\n*/', 'function_name': 'test_format_characters'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_nl2br_except_pre'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_auto_typography'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_blank_string'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_standardize_new_lines'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_reduce_linebreaks'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_remove_comments'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_protect_pre'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_no_opening_block'}, {'className': 'Typography_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': '_protect_braced_quotes'}]
[{'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test___construct_initialize'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_do_upload'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_data'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_upload_path'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_filename'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_max_filesize'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_max_filename'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_max_width'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_max_height'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_allowed_types'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_image_properties'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_xss_clean'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_is_image'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_is_allowed_filetype'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_is_allowed_filesize'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_is_allowed_dimensions'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_validate_upload_path'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_get_extension'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_limit_filename_length'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_do_xss_clean'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_set_error'}, {'className': 'Upload_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_display_errors'}]
[{'className': 'UserAgent_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'set_up'}, {'className': 'UserAgent_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_accept_lang'}, {'className': 'UserAgent_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_mobile'}, {'className': 'UserAgent_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_is_functions'}, {'className': 'UserAgent_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_referrer'}, {'className': 'UserAgent_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_agent_string'}, {'className': 'UserAgent_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_browser_info'}, {'className': 'UserAgent_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_charsets'}, {'className': 'UserAgent_test', 'params': '', 'extends': 'CI_TestCase', 'comments': '', 'function_name': 'test_parse'}]
[{'className': 'Setup_test', 'params': '', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'test_bootstrap_constants'}]
[{'className': '', 'params': '$class', 'extends': '', 'comments': '', 'function_name': 'autoload'}]
[{'className': 'CI_TestCase', 'params': "$name = null, array $data = [], $dataName = ''", 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': '__construct'}, {'className': 'CI_TestCase', 'params': '', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'setUp'}, {'className': 'CI_TestCase', 'params': '', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'tearDown'}, {'className': 'CI_TestCase', 'params': "$key = '', $val = ''", 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'ci_set_config'}, {'className': 'CI_TestCase', 'params': '', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'ci_get_config'}, {'className': 'CI_TestCase', 'params': '$obj = FALSE', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'ci_instance'}, {'className': 'CI_TestCase', 'params': '$name, $obj = FALSE', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'ci_instance_var'}, {'className': 'CI_TestCase', 'params': '$name', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '/**\n* Grab a core class\n*\n* Loads the correct core class without extensions\n* and returns a reference to the class name in the\n* globals array with the correct key. This way the\n* test can modify the variable it assigns to and\n* still maintain the global.\n*/', 'function_name': '&ci_core_class'}, {'className': 'CI_TestCase', 'params': '$name, $obj', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'ci_set_core_class'}, {'className': 'CI_TestCase', 'params': '$name, $root = NULL', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '/**\n* Create VFS directory\n*\n* @param\tstring\tDirectory name\n* @param\tobject\tOptional root to create in\n* @return\tobject\tNew directory object\n*/', 'function_name': 'ci_vfs_mkdir'}, {'className': 'CI_TestCase', 'params': "$file, $content = '', $root = NULL, $path = NULL", 'extends': 'PHPUnit_Framework_TestCase', 'comments': '/**\n* Create VFS content\n*\n* @param\tstring\tFile name\n* @param\tstring\tFile content\n* @param\tobject\tVFS directory object\n* @param\tmixed\tOptional subdirectory path or array of subs\n* @return\tvoid\n*/', 'function_name': 'ci_vfs_create'}, {'className': 'CI_TestCase', 'params': "$path, $dest=''", 'extends': 'PHPUnit_Framework_TestCase', 'comments': '/**\n* Clone a real file into VFS\n*\n* @param\tstring\tPath from base directory\n* @return\tbool\tTRUE on success, otherwise FALSE\n*/', 'function_name': 'ci_vfs_clone'}, {'className': 'CI_TestCase', 'params': "$path, $base = ''", 'extends': 'PHPUnit_Framework_TestCase', 'comments': '/**\n* Helper to get a VFS URL path\n*\n* @param\tstring\tPath\n* @param\tstring\tOptional base path\n* @return\tstring\tPath URL\n*/', 'function_name': 'ci_vfs_path'}, {'className': 'CI_TestCase', 'params': '', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '/**\n* Overwrite runBare\n*\n* PHPUnit instantiates the test classes before\n* running them individually. So right before a test\n* runs we set our instance. Normally this step would\n* happen in setUp, but someone is bound to forget to\n* call the parent method and debugging this is no fun.\n*/', 'function_name': 'runBare'}, {'className': 'CI_TestCase', 'params': '$name', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'helper'}, {'className': 'CI_TestCase', 'params': '$name', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '', 'function_name': 'lang'}, {'className': 'CI_TestCase', 'params': '$method, $args', 'extends': 'PHPUnit_Framework_TestCase', 'comments': '/**\n* This overload is useful to create a stub, that need to have a specific method.\n*/', 'function_name': '__call'}]
[{'className': 'CI_TestConfig', 'params': "$key, $index = ''", 'extends': 'CI_Config', 'comments': '', 'function_name': 'item'}, {'className': 'CI_TestConfig', 'params': "$file = '', $use_sections = FALSE, $fail_gracefully = FALSE", 'extends': 'CI_Config', 'comments': '', 'function_name': 'load'}]
[{'className': '', 'params': '', 'extends': '', 'comments': '', 'function_name': '&get_instance'}, {'className': '', 'params': '', 'extends': '', 'comments': '', 'function_name': '&get_config'}, {'className': '', 'params': '$item', 'extends': '', 'comments': '', 'function_name': 'config_item'}, {'className': '', 'params': '', 'extends': '', 'comments': '/**\n* Returns the MIME types array from config/mimes.php\n*\n* @return\tarray\n*/', 'function_name': '&get_mimes'}, {'className': '', 'params': "$class, $directory = 'libraries', $prefix = 'CI_'", 'extends': '', 'comments': '', 'function_name': 'load_class'}, {'className': '', 'params': "$message, $status_code = 500, $heading = 'An Error Was Encountered'", 'extends': '', 'comments': '', 'function_name': 'show_error'}, {'className': '', 'params': "$page = '', $log_error = TRUE", 'extends': '', 'comments': '', 'function_name': 'show_404'}, {'className': '', 'params': '$severity, $message, $filepath, $line', 'extends': '', 'comments': '', 'function_name': '_exception_handler'}, {'className': '', 'params': '', 'extends': '', 'comments': '', 'function_name': '&is_loaded'}, {'className': '', 'params': '$level, $message', 'extends': '', 'comments': '', 'function_name': 'log_message'}, {'className': '', 'params': "$code = 200, $text = ''", 'extends': '', 'comments': '', 'function_name': 'set_status_header'}, {'className': '', 'params': '', 'extends': '', 'comments': '', 'function_name': 'is_cli'}]
[{'className': 'Mock_Core_Security', 'params': '', 'extends': 'CI_Security', 'comments': '', 'function_name': 'csrf_set_cookie'}, {'className': 'Mock_Core_Security', 'params': '$property', 'extends': 'CI_Security', 'comments': '', 'function_name': '__get'}, {'className': 'Mock_Core_Security', 'params': '$str, $is_image', 'extends': 'CI_Security', 'comments': '', 'function_name': 'remove_evil_attributes'}, {'className': 'Mock_Core_Security', 'params': '$method, $params', 'extends': 'CI_Security', 'comments': '', 'function_name': '__call'}]
[{'className': 'Mock_Core_URI', 'params': '', 'extends': 'CI_URI', 'comments': '', 'function_name': '__construct'}, {'className': 'Mock_Core_URI', 'params': '$value', 'extends': 'CI_URI', 'comments': '', 'function_name': '_set_permitted_uri_chars'}]
False
False
False
False
False
False
False
[{'className': 'Mock_Database_DB_Driver', 'params': '$driver_class, $config = array()', 'extends': 'CI_DB_driver', 'comments': '/**\n* Instantiate the database driver\n*\n* @param  string \tDB Driver class name\n* @param  array \tDB configuration to set\n* @return void\n*/', 'function_name': '__construct($driver_class, $config = array'}, {'className': 'Mock_Database_DB_Driver', 'params': '$method, $arguments', 'extends': 'CI_DB_driver', 'comments': '/**\n* Overloading method, emulate the actual driver method (multiple inheritance workaround)\n*/', 'function_name': '__call'}]
[{'className': 'Mock_Database_DB', 'params': '$config = array()', 'extends': '', 'comments': '/**\n* Prepare database configuration skeleton\n*\n* @param  array \tDB configuration to set\n* @return void\n*/', 'function_name': '__construct($config = array'}, {'className': 'Mock_Database_DB', 'params': "$group = 'default'", 'extends': '', 'comments': '/**\n* Build DSN connection string for DB driver instantiate process\n*\n* @param \tstring \tGroup name\n* @return \tstring \tDSN Connection string\n*/', 'function_name': 'set_dsn'}]
[{'className': 'Mock_Database_Drivers_Mysql', 'params': '$config = array()', 'extends': 'Mock_Database_DB_Driver', 'comments': '/**\n* Instantiate the database driver\n*\n* @param\tarray\tDB configuration to set\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}]
[{'className': 'Mock_Database_Drivers_Mysqli', 'params': '$config = array()', 'extends': 'Mock_Database_DB_Driver', 'comments': '/**\n* Instantiate the database driver\n*\n* @param\tarray\tDB configuration to set\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}]
[{'className': 'Mock_Database_Drivers_PDO', 'params': '$config = array()', 'extends': 'Mock_Database_DB_Driver', 'comments': '/**\n* Instantiate the database driver\n*\n* @param\tarray\tDB configuration to set\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}]
[{'className': 'Mock_Database_Drivers_Postgre', 'params': '$config = array()', 'extends': 'Mock_Database_DB_Driver', 'comments': '/**\n* Instantiate the database driver\n*\n* @param\tarray\tDB configuration to set\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}]
[{'className': 'Mock_Database_Drivers_Sqlite', 'params': '$config = array()', 'extends': 'Mock_Database_DB_Driver', 'comments': '/**\n* Instantiate the database driver\n*\n* @param\tarray\tDB configuration to set\n* @return\tvoid\n*/', 'function_name': '__construct($config = array'}]
[{'className': '', 'extends': '', 'params': '', 'comments': '', 'function_name': ''}]
[{'className': 'Mock_Libraries_Driver', 'params': '$drivers = NULL', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Set valid drivers list\n*/', 'function_name': 'driver_list'}, {'className': 'Mock_Libraries_Driver', 'params': '', 'extends': 'CI_Driver_Library', 'comments': '/**\n* Get library name\n*/', 'function_name': 'get_name'}]
[{'className': 'Mock_Libraries_Encrypt', 'params': '$method, $params', 'extends': 'CI_Encrypt', 'comments': '', 'function_name': '__call'}]
[{'className': 'Mock_Libraries_Encryption', 'params': '$params', 'extends': 'CI_Encryption', 'comments': '/**\n* __get_params()\n*\n* Allows public calls to the otherwise protected _get_params().\n*/', 'function_name': '__get_params'}, {'className': 'Mock_Libraries_Encryption', 'params': '', 'extends': 'CI_Encryption', 'comments': '/**\n* get_key()\n*\n* Allows checking for key changes.\n*/', 'function_name': 'get_key'}, {'className': 'Mock_Libraries_Encryption', 'params': '$driver, $cipher, $mode', 'extends': 'CI_Encryption', 'comments': '/**\n* __driver_get_handle()\n*\n* Allows checking for _mcrypt_get_handle(), _openssl_get_handle()\n*/', 'function_name': '__driver_get_handle'}]
[{'className': 'Mock_Libraries_Session', 'params': '', 'extends': 'CI_Session', 'comments': '/**\n* Simulate new page load\n*/', 'function_name': 'reload'}]
[{'className': 'Mock_Libraries_Table', 'params': '$method, $params', 'extends': 'CI_Table', 'comments': '', 'function_name': '__call'}]
[{'className': 'Car_Commonlib_Data_AdminRecords', 'params': '', 'extends': 'aaa', 'comments': '', 'function_name': '__construct'}, {'className': 'Car_Commonlib_Data_AdminRecords', 'params': '$action, $controller, $request', 'extends': 'aaa', 'comments': '/**\n* @param $action\n* @param $controller\n* @return \xe6\x88\x90\xe5\x8a\x9f\n*/', 'function_name': 'addRecord'}, {'className': 'Car_Commonlib_Data_AdminRecords', 'params': '', 'extends': 'aaa', 'comments': '/**\n* @param null $beginTime\n* @param null $endTime\n* @param null $operator\n* @param null $action\n* @param null $controller\n* @param int $offset\n* @param int $limit\n* @return array|\xe6\x88\x90\xe5\x8a\x9f\n* @throws Car_Commonlib_Exception_Usability\n*/', 'function_name': 'getRecords'}]
